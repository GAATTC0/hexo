<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>碎碎念2024</title>
      <link href="posts/e4b77a0d/"/>
      <url>posts/e4b77a0d/</url>
      
        <content type="html"><![CDATA[<h2 id="2024-01"><a href="#2024-01" class="headerlink" title="2024.01"></a>2024.01</h2><ul><li>打卡解锁新地点：<em>红船厂</em>、<em>盛岸市场</em></li><li>第一次吃到网上看过多次的潮汕生腌，还被死去的皮皮虾挂到了嘴上，体验到咬钩之鱼的感觉(鱼为了让我们吃也很不容易)</li><li>紧急上线问题第一次加班到凌晨4点，好在有一群人一起(解锁隐藏成就：<font color="purple"><strong>凌晨四点的无锡</strong></font>)</li><li>解锁了微信年度报告的生成方式</li><li>第一次参加部门小年会，抽奖抽到了刮刮乐，中了又完全没中！😣</li></ul><h2 id="2024-02"><a href="#2024-02" class="headerlink" title="2024.02"></a>2024.02</h2><ul><li>才发现高铁回家比飞机便宜一半，下次一定</li></ul>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
          <category> 想法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>责任链模式的实践与思考</title>
      <link href="posts/5ea2c3ea/"/>
      <url>posts/5ea2c3ea/</url>
      
        <content type="html"><![CDATA[<h1 id="责任链模式的实践与思考"><a href="#责任链模式的实践与思考" class="headerlink" title="责任链模式的实践与思考"></a>责任链模式的实践与思考</h1><h1 id="一、应用场景"><a href="#一、应用场景" class="headerlink" title="一、应用场景"></a>一、应用场景</h1><p>我的理解是：某些复杂的逻辑，可以抽象成对于特定的对象，经过传递到各个环节的依次处理，形成一个链式的流程，每个环节都有自己独立的职责，<br>便可以尝试使用责任链模式，用于逻辑拆分和解耦，也可以让冗长的代码更加优雅。</p><p>这样的设计可以更好地应用单一职责原则、迪米特法则。</p><p>在资源迁移这种具有复杂的逻辑，但也可以抽象成环环相扣的链式处理场景上，首次尝试使用了责任链模式，期间遇到不少问题和坑点，也有在使用优雅/内存占用优化/调试和看堆栈方便之间的权衡纠结，故作此文，以记录之。</p><h1 id="二、简单实现方式"><a href="#二、简单实现方式" class="headerlink" title="二、简单实现方式"></a>二、简单实现方式</h1><h2 id="1-实现"><a href="#1-实现" class="headerlink" title="1.实现"></a>1.实现</h2><p>传统的、简单的实现方式：每个环节都接收同样的参数(一个对象，或一个基本类型的值)，按顺序各自处理，直到没有下一个可执行的环节。</p><p>简单示例：</p><p>接口：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Chain</span> <span class="token punctuation">{</span>     <span class="token comment">/**     * 获取责任链上下一个环节     */</span>    <span class="token annotation punctuation">@Nullable</span>    <span class="token class-name">Chain</span> <span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">void</span> <span class="token function">setNext</span><span class="token punctuation">(</span><span class="token class-name">Chain</span> chain<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">void</span> <span class="token function">handle</span><span class="token punctuation">(</span><span class="token class-name">Object</span> param<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>抽象实现：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">AbstractChain</span> <span class="token keyword">implements</span> <span class="token class-name">Chain</span> <span class="token punctuation">{</span>     <span class="token keyword">private</span> <span class="token class-name">Chain</span> next<span class="token punctuation">;</span>     <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token class-name">Chain</span> <span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">setNext</span><span class="token punctuation">(</span><span class="token class-name">Chain</span> chain<span class="token punctuation">)</span> <span class="token punctuation">{</span>        next <span class="token operator">=</span> chain<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>简单的环节实现：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SimpleChain</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractChain</span><span class="token punctuation">{</span>         <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handle</span><span class="token punctuation">(</span><span class="token class-name">Object</span> param<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// do business...</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">!=</span> <span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">handle</span><span class="token punctuation">(</span>param<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>     <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样，一个简单的责任链就实现好了。</p><h2 id="2-缺点"><a href="#2-缺点" class="headerlink" title="2.缺点"></a>2.缺点</h2><p>但是，这样的实现有很多不便之处，比如：</p><p>①构造责任链的时候，需要new一个第一层的对象，然后调用其setNext()方法，而这个方法又是void返回值的，所以在set之前，需要先把第二层的对象构造出来，并调用其setNext()先设置第三层的，以此类推，</p><p>就非常的麻烦，写起来不顺手且不能直观看出谁的下一环节是谁；</p><p>②另一方面，每个环节都需要getNext()或者next改为protected，但也需要在各自的执行逻辑中判断下一环节是否存在，对于编写各个环节来说，不应该关心这个问题，且造成了很多冗余逻辑在里面；</p><p>③一些环节内需要使用局部变量，会维持虚拟机栈到堆上的一些对象的强引用，在handle()方法中最后进入下一环节，则将会导致当前环节已经使用过的局部对象的引用不能被立即消除，如果这个链式的调用很长很长，则将有很多实际已经不需要的对象无法被回收，此时的内存占用表现将比传统的面向过程处理，抽成一个个方法的实现方式，还要差；</p><p>④参数需要指定固定的类型，扩展性不好</p><p>⑤不支持返回值，某些需要链式处理结果的场景将无法发挥价值</p><h2 id="3-缺点的优化思路"><a href="#3-缺点的优化思路" class="headerlink" title="3.缺点的优化思路"></a>3.缺点的优化思路</h2><p>与上面一一对应。</p><h3 id="①构造的方式修改"><a href="#①构造的方式修改" class="headerlink" title="①构造的方式修改"></a>①构造的方式修改</h3><p>可以将构造方法改为简单的builder模式，不过不同于传统的builder返回对象自身，这里需要返回参数自身：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token class-name">Chain</span> <span class="token function">setNext</span><span class="token punctuation">(</span><span class="token class-name">Chain</span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>next <span class="token operator">=</span> next<span class="token punctuation">;</span>    <span class="token keyword">return</span> next<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如此一来，可以使用链式构造，更加优雅，如：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">new</span> <span class="token class-name">SimpleChain</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">setNext</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SimpleChain1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">setNext</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SimpleChain2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">setNext</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SimpleChain3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>但是也有一些问题，踩到了坑，因为最终返回值一定是最后一个环节，所以要使用这个责任链，需要拿到第一个环节对象的引用，则需要注册前，先存一个第一个对象的引用，来后续调用执行，还是不够优雅：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">SimpleChain</span> simpleChain <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleChain</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>simpleChain        <span class="token punctuation">.</span><span class="token function">setNext</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SimpleChain1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">setNext</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SimpleChain2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">setNext</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SimpleChain3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>simpleChain<span class="token punctuation">.</span><span class="token function">handle</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>所以，想了想，还得靠一个构造器来完成：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ChainBuilder</span> <span class="token punctuation">{</span>     <span class="token keyword">private</span> <span class="token class-name">Chain</span> head<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Chain</span> tail<span class="token punctuation">;</span>     <span class="token keyword">public</span> <span class="token class-name">ChainBuilder</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token class-name">Chain</span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">==</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span>            head <span class="token operator">=</span> next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">!=</span> tail<span class="token punctuation">)</span> <span class="token punctuation">{</span>            tail<span class="token punctuation">.</span><span class="token function">setNext</span><span class="token punctuation">(</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        tail <span class="token operator">=</span> next<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token keyword">public</span> <span class="token class-name">Chain</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> head<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样就可以优雅地构建链了：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Chain</span> chain <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ChainBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SimpleChain</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SimpleChain1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SimpleChain2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SimpleChain3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>chain<span class="token punctuation">.</span><span class="token function">handle</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="②环节自身不需要手动判断-调用下一环节，做到无感知"><a href="#②环节自身不需要手动判断-调用下一环节，做到无感知" class="headerlink" title="②环节自身不需要手动判断/调用下一环节，做到无感知"></a>②环节自身不需要手动判断/调用下一环节，做到无感知</h3><p>这个也比较好做到，因为是简单的重复逻辑，提到抽象类即可，先增加接口：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 从当前环节开始执行 */</span><span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token class-name">Object</span> param<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>抽象类实现：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token class-name">Object</span> param<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">handle</span><span class="token punctuation">(</span>param<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">!=</span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>        next<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span>param<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如此一来，所有环节只需要实现handle()方法，在第一环节调用start()方法，即可按顺序执行完成了。</p><h3 id="③及时消除局部变量表对堆对象的引用"><a href="#③及时消除局部变量表对堆对象的引用" class="headerlink" title="③及时消除局部变量表对堆对象的引用"></a>③及时消除局部变量表对堆对象的引用</h3><p>其实经过了②的优化，已经天然地实现了目的，因为处理逻辑全部在handle()方法中，调用下一环节时，已经销毁当前环节handle()方法的栈帧，自然就没有局部变量的引用了，做到了即用即销，优化内存占用。</p><h3 id="④支持不同的参数类型"><a href="#④支持不同的参数类型" class="headerlink" title="④支持不同的参数类型"></a>④支持不同的参数类型</h3><p>这个也比较简单，使用泛型即可</p><h3 id="⑤支持返回值"><a href="#⑤支持返回值" class="headerlink" title="⑤支持返回值"></a>⑤支持返回值</h3><p>返回值的支持，第一点和上面参数类似，需要支持泛型；</p><p>其次，返回值的逻辑要明确一下，可以是对同一个对象的连续处理，最终返回这个对象，也可以是链式处理的最后一环返回的对象，按具体的需要来实现，</p><p>第一种比较好理解，没有歧义，第二种的话，就需要在handle()方法增加一个返回值，不过中间环节的返回值，实际上都被忽略掉了，只有最后以环节才有意义。</p><h1 id="三、最终的实现"><a href="#三、最终的实现" class="headerlink" title="三、最终的实现"></a>三、最终的实现</h1><p>经过一系列优化与斟酌，实现了一个通用性较好的责任链架子</p><p>接口：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Chain</span><span class="token generics"><span class="token punctuation">&lt;</span>PARAM<span class="token punctuation">,</span> RESULT<span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>     <span class="token comment">/**     * 注册下一环节处理器     *     * @param next 下一环节     */</span>    <span class="token class-name">Chain</span><span class="token generics"><span class="token punctuation">&lt;</span>PARAM<span class="token punctuation">,</span> RESULT<span class="token punctuation">&gt;</span></span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token class-name">Chain</span><span class="token generics"><span class="token punctuation">&lt;</span>PARAM<span class="token punctuation">,</span> RESULT<span class="token punctuation">&gt;</span></span> next<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">/**     * 当前环节处理     */</span>    <span class="token class-name">RESULT</span> <span class="token function">handle</span><span class="token punctuation">(</span><span class="token class-name">PARAM</span> param<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">/**     * 从当前环节开始执行     */</span>    <span class="token class-name">RESULT</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token class-name">PARAM</span> param<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>抽象实现：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">BaseChain</span><span class="token generics"><span class="token punctuation">&lt;</span>PARAM<span class="token punctuation">,</span> RESULT<span class="token punctuation">&gt;</span></span> <span class="token keyword">implements</span> <span class="token class-name">Chain</span><span class="token generics"><span class="token punctuation">&lt;</span>PARAM<span class="token punctuation">,</span> RESULT<span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>     <span class="token keyword">protected</span> <span class="token class-name">Chain</span><span class="token generics"><span class="token punctuation">&lt;</span>PARAM<span class="token punctuation">,</span> RESULT<span class="token punctuation">&gt;</span></span> next<span class="token punctuation">;</span>     <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token class-name">Chain</span><span class="token generics"><span class="token punctuation">&lt;</span>PARAM<span class="token punctuation">,</span> RESULT<span class="token punctuation">&gt;</span></span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token class-name">Chain</span><span class="token generics"><span class="token punctuation">&lt;</span>PARAM<span class="token punctuation">,</span> RESULT<span class="token punctuation">&gt;</span></span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>next <span class="token operator">=</span> next<span class="token punctuation">;</span>        <span class="token keyword">return</span> next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token class-name">RESULT</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token class-name">PARAM</span> param<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">RESULT</span> result <span class="token operator">=</span> <span class="token function">handle</span><span class="token punctuation">(</span>param<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">!=</span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> next<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span>param<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>构造器：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ChainBuilder</span><span class="token generics"><span class="token punctuation">&lt;</span>PARAM<span class="token punctuation">,</span> RESULT<span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>     <span class="token keyword">private</span> <span class="token class-name">Chain</span><span class="token generics"><span class="token punctuation">&lt;</span>PARAM<span class="token punctuation">,</span> RESULT<span class="token punctuation">&gt;</span></span> head<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Chain</span><span class="token generics"><span class="token punctuation">&lt;</span>PARAM<span class="token punctuation">,</span> RESULT<span class="token punctuation">&gt;</span></span> tail<span class="token punctuation">;</span>     <span class="token keyword">public</span> <span class="token class-name">ChainBuilder</span><span class="token generics"><span class="token punctuation">&lt;</span>PARAM<span class="token punctuation">,</span> RESULT<span class="token punctuation">&gt;</span></span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token class-name">Chain</span><span class="token generics"><span class="token punctuation">&lt;</span>PARAM<span class="token punctuation">,</span> RESULT<span class="token punctuation">&gt;</span></span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">==</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span>            head <span class="token operator">=</span> next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">!=</span> tail<span class="token punctuation">)</span> <span class="token punctuation">{</span>            tail<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        tail <span class="token operator">=</span> next<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token keyword">public</span> <span class="token class-name">Chain</span><span class="token generics"><span class="token punctuation">&lt;</span>PARAM<span class="token punctuation">,</span> RESULT<span class="token punctuation">&gt;</span></span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> head<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>满足了二中提到的所有缺点的优化。</p><h1 id="四、其他的思考"><a href="#四、其他的思考" class="headerlink" title="四、其他的思考"></a>四、其他的思考</h1><p>虽然上述的实现满足了基本需要，还是有一点点遗憾，</p><p>如在调试时，或者报错时，或看堆栈时，查看上述方式实现的栈，都是在抽象类的start()方法上，只有栈顶的一环节才是在handle()，此时才能看到所处的类的类名，很可能报错堆栈看到的是下面这样：</p><img src="/img/image-20240115151438662.png" alt="异常" style="zoom: 50%;"><p>但是，要解决这一问题，就需要有所牺牲：</p><p>①比如，可以改回简单实现中的，每个环节的handler()调用下一环节，则堆栈中可清晰查看调用链，但缺点也很明显，增加了冗余代码、环节之间的耦合度、损失了局部变量对象的及时回收，增加了内存占用。</p><p>②可以改为各个实现类都重写抽象类中的start()方法，或者直接不需要抽象类的实现了，下放到子类中，则堆栈中可清晰查看调用链，缺点是冗余代码、且误重写的风险不可控。</p><p>总之，实现方式需要考虑多方面的因素，有时候各个因素之间会互斥，需要权衡利弊，取其一，或是在一些场景下，不断优化设计，最终达到一个平衡点。</p>]]></content>
      
      
      <categories>
          
          <category> 工作 </category>
          
          <category> 开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>零碎的想法2023</title>
      <link href="posts/74acaa5c/"/>
      <url>posts/74acaa5c/</url>
      
        <content type="html"><![CDATA[<h1 id="零碎的想法2023"><a href="#零碎的想法2023" class="headerlink" title="零碎的想法2023"></a>零碎的想法2023</h1><blockquote><p>23年前几个月因为懒没有记录，后来一起写在2022的末尾了，这里就从10月开始吧</p></blockquote><h2 id="2023-10"><a href="#2023-10" class="headerlink" title="2023.10"></a>2023.10</h2><ul><li>🍖</li><li>没什么有趣的事情发生，体检出来去年超标的指标正常了，但是也有新的异常，大概是因为练太多了，以及肉吃的多🤔</li></ul><h2 id="2023-12"><a href="#2023-12" class="headerlink" title="2023.12"></a>2023.12</h2><ul><li>最特殊最难忘最感动的一次生日，是被在意的感觉</li><li>开心的一个月，2023的尾巴，让一整年都变得闪光</li><li>吃到了俄罗斯菜</li><li>完成人生中第一个乐高</li></ul><h2 id="年度总结"><a href="#年度总结" class="headerlink" title="年度总结"></a>年度总结</h2><p>if (我还记得) {</p><p>// todo，放假再写吧ฅʕ•̫͡•ʔฅ</p><p>}</p>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
          <category> 想法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Exzel-便捷快速的java对象到Excel映射框架</title>
      <link href="posts/f3cba243/"/>
      <url>posts/f3cba243/</url>
      
        <content type="html"><![CDATA[<h1 id="Exzel"><a href="#Exzel" class="headerlink" title="Exzel"></a>Exzel</h1><p>an easy java object to excel mapper framework based on poi with more features</p><p><a href="https://github.com/GAATTC0/exzel"><img src="https://img.shields.io/github/stars/GAATTC0/exzel?style=social&amp;label=Github&amp;logo=github&amp;logoColor=white&amp;style=for-the-badge"></a></p><h1 id="一、功能介绍"><a href="#一、功能介绍" class="headerlink" title="一、功能介绍"></a>一、功能介绍</h1><p>基于apache poi框架，以注解形式定义java对象到excel对象的映射方式。</p><ul><li><input checked="" disabled="" type="checkbox"> 支持多sheet页</li><li><input checked="" disabled="" type="checkbox"> 支持对象嵌套递归查找</li><li><input checked="" disabled="" type="checkbox"> 支持日期格式化</li><li><input checked="" disabled="" type="checkbox"> 支持自定义字段顺序</li><li><input checked="" disabled="" type="checkbox"> 支持自定义字段名，未设置则使用成员变量名</li><li><input checked="" disabled="" type="checkbox"> 支持单独设置每个表头字段的样式</li><li><input checked="" disabled="" type="checkbox"> 支持开启自动设置列宽(追踪列中最长值的长度)</li><li><input checked="" disabled="" type="checkbox"> 支持文本、数值、日期、布尔类型的数据，并以文本类型兜底</li><li><input checked="" disabled="" type="checkbox"> 支持Iterable接口的实现类映射时自动纵向拓展</li><li><input checked="" disabled="" type="checkbox"> 支持导出到输出流</li><li><input checked="" disabled="" type="checkbox"> 支持导出到httpServletResponse</li><li><input checked="" disabled="" type="checkbox"> 性能统计日志</li></ul><h1 id="二、实现"><a href="#二、实现" class="headerlink" title="二、实现"></a>二、实现</h1><h2 id="1-注解定义"><a href="#1-注解定义" class="headerlink" title="1.注解定义"></a>1.注解定义</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span>FIELD<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">ExcelMapping</span> <span class="token punctuation">{</span>    <span class="token class-name">String</span> <span class="token function">sheetName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">"sheet"</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token function">columnIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 若域为long类型，可以选择尝试格式化为可读日期 ExcelGenerator#PATTERN，格式化失败则使用string类型     */</span>    <span class="token keyword">boolean</span> <span class="token function">tryFormatDateTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span>FIELD<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">ExcelRecursiveMapping</span> <span class="token punctuation">{</span>    <span class="token comment">// 用于递归到对象内部扫描字段映射</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * excel表头单元格样式（仅表头行，支持按列自定义） * * @author gaattc * @since 1.0 * Created by gaattc on 2023/4/13 */</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span>FIELD<span class="token punctuation">)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">ExcelStyle</span> <span class="token punctuation">{</span>    <span class="token class-name">CellType</span> <span class="token function">cellType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token class-name">CellType</span><span class="token punctuation">.</span>STRING<span class="token punctuation">;</span>    <span class="token class-name">String</span> <span class="token function">columnName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 自动设置本列列宽     */</span>    <span class="token keyword">boolean</span> <span class="token function">autoSizeColumn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token class-name">IndexedColors</span> <span class="token function">backgroundColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token class-name">IndexedColors</span><span class="token punctuation">.</span>WHITE<span class="token punctuation">;</span>    <span class="token class-name">FillPatternType</span> <span class="token function">fillPatternType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token class-name">FillPatternType</span><span class="token punctuation">.</span>NO_FILL<span class="token punctuation">;</span>    <span class="token class-name">HorizontalAlignment</span> <span class="token function">horizontalAlignment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token class-name">HorizontalAlignment</span><span class="token punctuation">.</span>GENERAL<span class="token punctuation">;</span>    <span class="token class-name">VerticalAlignment</span> <span class="token function">verticalAlignment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token class-name">VerticalAlignment</span><span class="token punctuation">.</span>BOTTOM<span class="token punctuation">;</span>    <span class="token class-name">IndexedColors</span> <span class="token function">fontColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token class-name">IndexedColors</span><span class="token punctuation">.</span>BLACK<span class="token punctuation">;</span>    <span class="token keyword">short</span> <span class="token function">fontSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token number">12</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> <span class="token function">bold</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> <span class="token function">italic</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token class-name">FontUnderline</span> <span class="token function">underline</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token class-name">FontUnderline</span><span class="token punctuation">.</span>NONE<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-excel对象生成器"><a href="#2-excel对象生成器" class="headerlink" title="2.excel对象生成器"></a>2.excel对象生成器</h2><p>ExcelGenerator</p><h2 id="3-Excel输出器"><a href="#3-Excel输出器" class="headerlink" title="3.Excel输出器"></a>3.Excel输出器</h2><p>ExcelExporter</p><h1 id="三、使用示例"><a href="#三、使用示例" class="headerlink" title="三、使用示例"></a>三、使用示例</h1><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unused"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExcelGeneratorTest</span> <span class="token keyword">extends</span> <span class="token class-name">TestCase</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token class-name">Foo</span> source <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">URI</span> uri <span class="token operator">=</span> <span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token string">"test.xlsx"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toURI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Path</span> path <span class="token operator">=</span> <span class="token class-name">Paths</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>uri<span class="token punctuation">)</span><span class="token punctuation">;</span>        path<span class="token punctuation">.</span><span class="token function">toFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">createNewFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">ExcelExporter</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">generate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">output</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BufferedOutputStream</span><span class="token punctuation">(</span><span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">newOutputStream</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Foo</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@ExcelMapping</span><span class="token punctuation">(</span>columnIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> stringField <span class="token operator">=</span> <span class="token string">"stringField"</span><span class="token punctuation">;</span>        <span class="token annotation punctuation">@ExcelMapping</span><span class="token punctuation">(</span>columnIndex <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token annotation punctuation">@ExcelStyle</span><span class="token punctuation">(</span>cellType <span class="token operator">=</span> <span class="token class-name">CellType</span><span class="token punctuation">.</span>NUMERIC<span class="token punctuation">)</span>        <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token class-name">IntField</span> <span class="token operator">=</span> <span class="token number">233</span><span class="token punctuation">;</span>        <span class="token annotation punctuation">@ExcelMapping</span><span class="token punctuation">(</span>columnIndex <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">)</span>        <span class="token annotation punctuation">@ExcelStyle</span><span class="token punctuation">(</span>cellType <span class="token operator">=</span> <span class="token class-name">CellType</span><span class="token punctuation">.</span>NUMERIC<span class="token punctuation">)</span>        <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">long</span> longField <span class="token operator">=</span> <span class="token number">2333L</span><span class="token punctuation">;</span>        <span class="token annotation punctuation">@ExcelMapping</span><span class="token punctuation">(</span>columnIndex <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">)</span>        <span class="token annotation punctuation">@ExcelStyle</span><span class="token punctuation">(</span>cellType <span class="token operator">=</span> <span class="token class-name">CellType</span><span class="token punctuation">.</span>BOOLEAN<span class="token punctuation">)</span>        <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> boolField <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token annotation punctuation">@ExcelMapping</span><span class="token punctuation">(</span>columnIndex <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">,</span> tryFormatDateTime <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>        <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">long</span> dateField <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token annotation punctuation">@ExcelMapping</span><span class="token punctuation">(</span>sheetName <span class="token operator">=</span> <span class="token string">"iterable"</span><span class="token punctuation">,</span> columnIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> iterableField <span class="token operator">=</span> <span class="token class-name">CollectionUtils</span><span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">,</span> <span class="token string">"2"</span><span class="token punctuation">,</span> <span class="token string">"3"</span><span class="token punctuation">,</span> <span class="token string">"4"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token annotation punctuation">@ExcelRecursiveMapping</span>        <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Bar</span><span class="token punctuation">&gt;</span></span> innerClassField <span class="token operator">=</span> <span class="token class-name">CollectionUtils</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Bar</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@ExcelMapping</span><span class="token punctuation">(</span>columnIndex <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">)</span>        <span class="token annotation punctuation">@ExcelStyle</span><span class="token punctuation">(</span>autoSizeColumn <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>        <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> innerStringField <span class="token operator">=</span> <span class="token string">"Bar#innerStringField"</span><span class="token punctuation">;</span>        <span class="token annotation punctuation">@ExcelRecursiveMapping</span>        <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Inner</span> <span class="token class-name">InnerClassField</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Inner</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@ExcelMapping</span><span class="token punctuation">(</span>columnIndex <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">)</span>        <span class="token annotation punctuation">@ExcelStyle</span><span class="token punctuation">(</span>autoSizeColumn <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>        <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> innerStringField <span class="token operator">=</span> <span class="token string">"Inner#innerStringField"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="四、性能报告"><a href="#四、性能报告" class="headerlink" title="四、性能报告"></a>四、性能报告</h1><p><img src="/img/flamegraph.png"></p><p><img src="/img/Snipaste_2023-04-18_17-44-36.png"></p>]]></content>
      
      
      <categories>
          
          <category> 工作 </category>
          
          <category> 开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Halo主题介绍与热门主题对比</title>
      <link href="posts/6458f244/"/>
      <url>posts/6458f244/</url>
      
        <content type="html"><![CDATA[<h1 id="Halo主题介绍与热门主题对比"><a href="#Halo主题介绍与热门主题对比" class="headerlink" title="Halo主题介绍与热门主题对比"></a>Halo主题介绍与热门主题对比</h1><blockquote><p>先说结论，经过对比最终决定使用的主题是：<code> </code></p></blockquote><h2 id="一、主题介绍"><a href="#一、主题介绍" class="headerlink" title="一、主题介绍"></a>一、主题介绍</h2><h2 id="二、主题用法"><a href="#二、主题用法" class="headerlink" title="二、主题用法"></a>二、主题用法</h2><blockquote><p>当你搭建好博客之后，如果你不喜欢默认的主题，那么你可以去 <a href="https://halo.run/themes/">https://halo.run/themes/</a> 选择你喜欢的主题。在这里主要讲一些注意事项。</p><h3 id="如何安装？"><a href="#如何安装？" class="headerlink" title="如何安装？"></a>如何安装？<a href="https://docs.halo.run/user-guide/config/#%E5%A6%82%E4%BD%95%E5%AE%89%E8%A3%85"></a></h3><p>登录到后台之后，进入 外观 -&gt; 主题，在后下角有一个按钮，点击之后选择 <code>安装主题</code>。系统提供的两种安装方式。</p><ol><li>第一种，远程拉取。你只需要把主题的 GitHub 地址复制进去点击下载即可。</li><li>第二种，本地上传，你需要将主题安装包（releases）下载到本地，然后选择 <code>本地上传</code> 点击选择你下载好的主题即可。</li></ol><blockquote><p>一般情况下，推荐第二种，第一种一般安装的为开发版本，建议谨慎使用。</p></blockquote><h3 id="设置主题"><a href="#设置主题" class="headerlink" title="设置主题"></a>设置主题<a href="https://docs.halo.run/user-guide/config/#%E8%AE%BE%E7%BD%AE%E4%B8%BB%E9%A2%98"></a></h3><blockquote><p>可能有一部分人不太清楚，一般情况下，每个主题都是有单独的设置选项的。</p></blockquote><p>点击主题下方的设置按钮即可进入主题设置。另外主题设置还有一种预览模式，可以实时查看主题设置变更后的效果。当你设置当前激活主题的时候，在页面右下角有一个 <code>预览模式</code> 的按钮，点击即可进入预览模式。</p></blockquote><h2 id="三、热门主题对比"><a href="#三、热门主题对比" class="headerlink" title="三、热门主题对比"></a>三、热门主题对比</h2><h2 id="四、主题二次开发"><a href="#四、主题二次开发" class="headerlink" title="四、主题二次开发"></a>四、主题二次开发</h2>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> halo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> halo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello,Halo—Halo框架入门(一)</title>
      <link href="posts/4bcf9dad/"/>
      <url>posts/4bcf9dad/</url>
      
        <content type="html"><![CDATA[<h1 id="Hello-Halo—Halo框架入门-一"><a href="#Hello-Halo—Halo框架入门-一" class="headerlink" title="Hello,Halo—Halo框架入门(一)"></a>Hello,Halo—Halo框架入门(一)</h1><blockquote><p><a href="https://halo.run/">官方网站</a>    <a href="https://docs.halo.run/">官方文档</a></p></blockquote><h2 id="一、环境准备"><a href="#一、环境准备" class="headerlink" title="一、环境准备"></a>一、环境准备</h2><h2 id="1-JDK环境"><a href="#1-JDK环境" class="headerlink" title="1.JDK环境"></a>1.JDK环境</h2><p>从 <code>1.4.3 </code>起，版本要求为 11 以上的版本。<code>1.4.3 </code>以下需要 8 以上的版本。<br>本文以及本站使用<code>1.5.4~</code>版本，故使用jdk11。</p><h2 id="2-MySQL环境"><a href="#2-MySQL环境" class="headerlink" title="2.MySQL环境"></a>2.MySQL环境</h2><blockquote><p><strong>摘自帮助文档</strong>：这并不是 Halo 必须依赖的，Halo 默认使用自带的 <code>H2 Database</code>，无需单独安装。如果 <code>H2 Database</code> 不能满足你的要求，您需要在系统内安装并运行好 MySQL。具体要求：</p><ol><li>版本：5.7 +</li><li>字符集（Character Set）：<code>utf8mb4</code></li><li>排序规则（Collate）：<code>utf8mb4_bin</code></li><li>存储引擎：<code>InnoDB</code></li></ol></blockquote><p>出于性能以及手动增删改查的便捷性考虑，使用mysql持久化。</p><h2 id="二、源码"><a href="#二、源码" class="headerlink" title="二、源码"></a>二、源码</h2><p><a href="https://github.com/halo-dev/halo">仓库地址</a><br>此为halo项目地址，其中<code>release-1.4</code>为第一个稳定版本，<code>release-1.5</code>与<code>next</code>分别为下一个版本的开发分支，我们二次开发时可以选择较新的<code>master</code>分支或者<code>release-1.5</code>分支。另外，2.0版本将在2022.9.30发布，届时也可体验最新版本的halo。</p><p>我使用的是master分支，fork后clone之：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone git@github.com:GAATTC0/halo.git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="三、运行"><a href="#三、运行" class="headerlink" title="三、运行"></a>三、运行</h2><p>克隆项目后使用IDE打开项目，识别并解析gradle项目配置，并进行依赖资源的import。</p><p>准备工作完成后编译项目，并运行<code>run.halo.app.Application</code>主类。</p><h2 id="四、踩坑记录"><a href="#四、踩坑记录" class="headerlink" title="四、踩坑记录"></a>四、踩坑记录</h2><h3 id="1-编译时依赖和语法报错问题"><a href="#1-编译时依赖和语法报错问题" class="headerlink" title="1.编译时依赖和语法报错问题"></a>1.编译时依赖和语法报错问题</h3><p>如下面这两段：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">return</span> ignoredClasses<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">::</span><span class="token keyword">new</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// ...</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Pair</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Ref</span><span class="token punctuation">,</span> <span class="token class-name">RevCommit</span><span class="token punctuation">&gt;</span></span> <span class="token function">getLatestTag</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">Git</span> git<span class="token punctuation">)</span>        <span class="token keyword">throws</span> <span class="token class-name">GitAPIException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> <span class="token keyword">var</span> tags <span class="token operator">=</span> git<span class="token punctuation">.</span><span class="token function">tagList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// ...</span>        <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token keyword">var</span> revWalk <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RevWalk</span><span class="token punctuation">(</span>git<span class="token punctuation">.</span><span class="token function">getRepository</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            revWalk<span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// ...</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>依赖问题：gradle需要设置auto import，或是手动import依赖即可</li><li>编译问题：项目中有很多java11的语法和api，需要检查<code>Project Structure</code>的<code>Project SDK</code>和<code>Project Language Level</code>是否正确设置为java11</li></ul><h3 id="2-编译时报错：”无效的源发行版-11”"><a href="#2-编译时报错：”无效的源发行版-11”" class="headerlink" title="2.编译时报错：”无效的源发行版: 11”"></a>2.编译时报错：”无效的源发行版: 11”</h3><p><img src="/img/Hello,Halo%E2%80%94Halo%E6%A1%86%E6%9E%B6%E5%85%A5%E9%97%A8(%E4%B8%80)/image-20220920221326863.png" alt="image-20220920221326863"></p><p><del>试了<a href="https://segmentfault.com/a/1190000023536478%E7%AD%89%E7%BD%91%E4%B8%8A%E6%90%9C%E5%88%B0%E7%9A%84%E8%AE%B8%E5%A4%9A%E6%96%B9%E5%BC%8F%E5%8F%91%E7%8E%B0%E9%83%BD%E6%B2%A1%E6%9C%89%E9%B8%9F%E7%94%A8%EF%BC%8C%E6%B5%AA%E8%B4%B9%E4%BA%86%E4%B8%80%E4%B8%AA%E5%A4%9A%E5%B0%8F%E6%97%B6%E7%BC%96%E8%AF%91%E4%B8%8D%E4%BA%86%E3%80%82%E8%AF%95%E4%BA%86%E5%B0%86%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E4%B8%AD%E7%9A%84jdk%E4%B9%9F%E6%94%B9%E6%88%9011%E8%BF%98%E6%98%AF%E4%B8%8D%E8%A1%8C%E3%80%82">https://segmentfault.com/a/1190000023536478等网上搜到的许多方式发现都没有鸟用，浪费了一个多小时编译不了。试了将环境变量中的jdk也改成11还是不行。</a></del></p><p>后来自己摸索，查看各种配置中的jdk是否为java11，最终发现了问题所在：<br><code>File | Settings | Build, Execution, Deployment | Build Tools | Gradle</code></p><p><img src="/img/image-20220920222900122.png" alt="image-20220920222900122"></p><p>将这里的Gradle JVM设置为11即可。</p><h3 id="3-启动springboot时报错：”Error-running-Application-Command-line-is-too-long-Shorten-the-command-line-and-rerun-”"><a href="#3-启动springboot时报错：”Error-running-Application-Command-line-is-too-long-Shorten-the-command-line-and-rerun-”" class="headerlink" title="3.启动springboot时报错：”Error running Application. Command line is too long. Shorten the command line and rerun.”"></a>3.启动springboot时报错：”Error running Application. Command line is too long. Shorten the command line and rerun.”</h3><p>点击自动修复shorten command line and rerun即可。<br>其他方式参考：</p><ul><li><a href="https://www.cnblogs.com/cnndevelop/p/12740263.html">https://www.cnblogs.com/cnndevelop/p/12740263.html</a></li><li><del><a href="https://blog.csdn.net/weixin_44299027/article/details/108084326">https://blog.csdn.net/weixin_44299027/article/details/108084326</a></del></li></ul><hr><pre class="line-numbers language-log" data-language="log"><code class="language-log">2022-09-20 22:31:14.688  INFO 21196 --- [  restartedMain] run.halo.app.listener.StartedListener    : Halo started at         http://127.0.0.1:80902022-09-20 22:31:14.689  INFO 21196 --- [  restartedMain] run.halo.app.listener.StartedListener    : Halo admin started at   http://127.0.0.1:8090/admin2022-09-20 22:31:14.689  INFO 21196 --- [  restartedMain] run.halo.app.listener.StartedListener    : Halo has started successfully!<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>看到启动成功的日志，至此，halo的启动准备工作就完成了。</p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> halo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> halo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用java清理本地maven仓库无效文件</title>
      <link href="posts/34e027a/"/>
      <url>posts/34e027a/</url>
      
        <content type="html"><![CDATA[<p>由于maven的jar包频繁更新，随着maven reimport次数的增加，本地仓库中的无效文件(包括jar包、pom文件、校验和文件和未下载成功文件)会占用大量磁盘空间，但是把本地仓库暴力地全部清理后还需要重新下依赖，且下了依赖后IDEA还要花较长时间重新建立索引，非常不方便。<br>所以，利用java的文件io写了一个工具类，用来根据匹配规则删除无效的文件。规则：</p><ul><li><p>删除所有空文件夹</p></li><li><p>删除所有扩展名为<code>.lastUpdated</code>的文件</p></li><li><p>删除所有扩展名为<code>.sha1</code>的文件</p></li><li><p>删除自定义路径下所有不包含<code>SNAPSHOT</code>的jar文件</p></li><li><p>删除自定义路径下所有不包含<code>SNAPSHOT</code>的pom文件</p></li></ul><p>另外:<br>集成了文件和目录的删除记录日志，记录删除的文件/目录绝对路径、删除结果、释放磁盘空间大小、删除总耗时。支持控制台日志和持久化日志，通过开关控制;<br>支持不同操作系统。</p><blockquote><p>注意:<br>执行清理时建议关闭工程和代码工程，可避免因资源占用导致的部分文件删除失败；<br>虽然工程实际依赖的是最新的jar包但可能不是SNAPSHOT这份(尽管两者除文件名外是相同的)，所以需要在清理后刷新maven依赖来保证正确依赖。</p></blockquote><p>下面是代码：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">BufferedOutputStream</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">File</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileOutputStream</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">OutputStreamWriter</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>file<span class="token punctuation">.</span></span><span class="token class-name">Files</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>text<span class="token punctuation">.</span></span><span class="token class-name">SimpleDateFormat</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>function<span class="token punctuation">.</span></span><span class="token class-name">Predicate</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MavenRepositoryCleaner</span> <span class="token punctuation">{</span>    <span class="token comment">// 本地maven仓库路径</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> MAVEN_REPOSITORY_ROOT <span class="token operator">=</span> <span class="token string">"F:\\mavenRepository"</span><span class="token punctuation">;</span>    <span class="token comment">// 控制台日志开关</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> TERMINAL_LOG <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token comment">// 持久化日志开关(默认存放于maven仓库根目录下)</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> FILE_LOG <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> SEPARATOR <span class="token operator">=</span> <span class="token class-name">File</span><span class="token punctuation">.</span>pathSeparator<span class="token punctuation">;</span>    <span class="token comment">// 清理过期jar与pom的路径</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> CUSTOM_CLEAN_PATHS <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>            SEPARATOR <span class="token operator">+</span> <span class="token string">"com"</span> <span class="token operator">+</span> SEPARATOR <span class="token operator">+</span> <span class="token string">"xxx"</span><span class="token punctuation">,</span>            SEPARATOR <span class="token operator">+</span> <span class="token string">"org"</span> <span class="token operator">+</span> SEPARATOR <span class="token operator">+</span> <span class="token string">"xxx"</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> JAR_SUFFIX <span class="token operator">=</span> <span class="token string">".jar"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> POM_SUFFIX <span class="token operator">=</span> <span class="token string">".pom"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> SHA_SUFFIX <span class="token operator">=</span> <span class="token string">".sha1"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> SNAPSHOT <span class="token operator">=</span> <span class="token string">"SNAPSHOT"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> INVALID_FILE_SUFFIX <span class="token operator">=</span> <span class="token string">".lastUpdated"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">OutputStreamWriter</span><span class="token punctuation">&gt;</span></span> LOGGERS <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">long</span> startTime<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">long</span> totalSpace <span class="token operator">=</span> <span class="token number">0L</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> delFiles <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> delDirs <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> failed <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">checkRootValid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">traverseFolder</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>MAVEN_REPOSITORY_ROOT<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">getInvalidFilePredicate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> cleanPath <span class="token operator">:</span> CUSTOM_CLEAN_PATHS<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">File</span> dir <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>MAVEN_REPOSITORY_ROOT <span class="token operator">+</span> cleanPath<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>dir<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> dir<span class="token punctuation">.</span><span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">traverseFolder</span><span class="token punctuation">(</span>dir<span class="token punctuation">,</span> <span class="token function">getCustomInvalidFilePredicate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">checkRootValid</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">boolean</span> valid <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token class-name">File</span> root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>MAVEN_REPOSITORY_ROOT<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span>root<span class="token punctuation">.</span><span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"[ERROR] please check maven repository root exist: "</span><span class="token punctuation">,</span> MAVEN_REPOSITORY_ROOT<span class="token punctuation">)</span><span class="token punctuation">;</span>            valid <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> valid<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Predicate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">File</span><span class="token punctuation">&gt;</span></span> <span class="token function">getInvalidFilePredicate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> f <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>            <span class="token class-name">String</span> name <span class="token operator">=</span> f<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> name<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span>INVALID_FILE_SUFFIX<span class="token punctuation">)</span>                    <span class="token operator">||</span> name<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span>SHA_SUFFIX<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Predicate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">File</span><span class="token punctuation">&gt;</span></span> <span class="token function">getCustomInvalidFilePredicate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> f <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>            <span class="token class-name">String</span> name <span class="token operator">=</span> f<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span>name<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span>JAR_SUFFIX<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>name<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>SNAPSHOT<span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token operator">||</span> <span class="token punctuation">(</span>name<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span>POM_SUFFIX<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>name<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>SNAPSHOT<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">traverseFolder</span><span class="token punctuation">(</span><span class="token class-name">File</span> dir<span class="token punctuation">,</span> <span class="token class-name">Predicate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">File</span><span class="token punctuation">&gt;</span></span> predicate<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">File</span><span class="token punctuation">[</span><span class="token punctuation">]</span> listFiles <span class="token operator">=</span> dir<span class="token punctuation">.</span><span class="token function">listFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>listFiles <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">==</span> listFiles<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">delete</span><span class="token punctuation">(</span>dir<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">File</span><span class="token punctuation">&gt;</span></span> subFiles <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">File</span> file <span class="token operator">:</span> listFiles<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">traverseFolder</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> predicate<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    subFiles<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>subFiles<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">doClean</span><span class="token punctuation">(</span>subFiles<span class="token punctuation">,</span> predicate<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">doClean</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">File</span><span class="token punctuation">&gt;</span></span> subFiles<span class="token punctuation">,</span> <span class="token class-name">Predicate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">File</span><span class="token punctuation">&gt;</span></span> predicate<span class="token punctuation">)</span> <span class="token punctuation">{</span>        subFiles<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>predicate<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">MavenRepositoryCleaner</span><span class="token operator">::</span><span class="token function">delete</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unused"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token class-name">File</span> file<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">long</span> length <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> isDir <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">toPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"delete succeed:"</span><span class="token punctuation">,</span> file<span class="token punctuation">.</span><span class="token function">getAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"; release space: "</span><span class="token punctuation">,</span> <span class="token function">generateSpaceString</span><span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            totalSpace <span class="token operator">+=</span> length<span class="token punctuation">;</span>            <span class="token keyword">int</span> i <span class="token operator">=</span> isDir <span class="token operator">?</span> delDirs<span class="token operator">++</span> <span class="token operator">:</span> delFiles<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"delete failed: "</span><span class="token punctuation">,</span> file<span class="token punctuation">.</span><span class="token function">getAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            failed<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">generateSpaceString</span><span class="token punctuation">(</span><span class="token keyword">long</span> space<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>space <span class="token operator">&gt;</span> <span class="token number">1073741823L</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> space <span class="token operator">/</span> <span class="token number">1073741824L</span> <span class="token operator">+</span> <span class="token string">"GB,"</span> <span class="token operator">+</span> <span class="token function">generateSpaceString</span><span class="token punctuation">(</span>space <span class="token operator">%</span> <span class="token number">1073741824L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>space <span class="token operator">&gt;</span> <span class="token number">1048575L</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> space <span class="token operator">/</span> <span class="token number">1048576L</span> <span class="token operator">+</span> <span class="token string">"MB,"</span> <span class="token operator">+</span> <span class="token function">generateSpaceString</span><span class="token punctuation">(</span>space <span class="token operator">%</span> <span class="token number">1048576L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>space <span class="token operator">&gt;</span> <span class="token number">1023L</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> space <span class="token operator">/</span> <span class="token number">1024L</span> <span class="token operator">+</span> <span class="token string">"KB,"</span> <span class="token operator">+</span> <span class="token function">generateSpaceString</span><span class="token punctuation">(</span>space <span class="token operator">%</span> <span class="token number">1024L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> space <span class="token operator">+</span> <span class="token string">"B"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"ResultOfMethodCallIgnored"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        startTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>TERMINAL_LOG<span class="token punctuation">)</span> <span class="token punctuation">{</span>            LOGGERS<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">OutputStreamWriter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BufferedOutputStream</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>FILE_LOG<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">File</span> logFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>MAVEN_REPOSITORY_ROOT <span class="token operator">+</span> SEPARATOR <span class="token operator">+</span> <span class="token string">"mavenRepositoryCleaner.log"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>logFile<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                logFile<span class="token punctuation">.</span><span class="token function">createNewFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            LOGGERS<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">OutputStreamWriter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BufferedOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>logFile<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">SimpleDateFormat</span> format <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"["</span><span class="token punctuation">,</span> format<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>startTime<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"] clean task started..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> info<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> i <span class="token operator">:</span> info<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">OutputStreamWriter</span> logger <span class="token operator">:</span> LOGGERS<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    logger<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">OutputStreamWriter</span> logger <span class="token operator">:</span> LOGGERS<span class="token punctuation">)</span> <span class="token punctuation">{</span>                logger<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">lineSeparator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"clean finished, deleted files:"</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>delFiles<span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token string">", deleted dirs:"</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>delDirs<span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token string">", failed:"</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>failed<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"released disk space: "</span><span class="token punctuation">,</span> <span class="token function">generateSpaceString</span><span class="token punctuation">(</span>totalSpace<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"cost time: "</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> startTime<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"mills"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">OutputStreamWriter</span> logger <span class="token operator">:</span> LOGGERS<span class="token punctuation">)</span> <span class="token punctuation">{</span>            logger<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SuppressWarnings注解</title>
      <link href="posts/b932b521/"/>
      <url>posts/b932b521/</url>
      
        <content type="html"><![CDATA[<h1 id="SuppressWarnings注解整理"><a href="#SuppressWarnings注解整理" class="headerlink" title="@SuppressWarnings注解整理"></a>@SuppressWarnings注解整理</h1><h2 id="1-SuppressWarnings注解"><a href="#1-SuppressWarnings注解" class="headerlink" title="1.@SuppressWarnings注解"></a>1.@SuppressWarnings注解</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span>TYPE<span class="token punctuation">,</span> FIELD<span class="token punctuation">,</span> METHOD<span class="token punctuation">,</span> PARAMETER<span class="token punctuation">,</span> CONSTRUCTOR<span class="token punctuation">,</span> LOCAL_VARIABLE<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span>SOURCE<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">SuppressWarnings</span> <span class="token punctuation">{</span>    <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>是jdk提供的注解之一，作用是屏蔽一些无关紧要的警告。使开发者能看到一些他们真正关心的警告，从而提高开发者的效率。指示应该在注释元素（以及包含在该注释元素中的所有程序元素）中取消显示指定的编译器警告。注意，在给定元素中取消显示的警告集是所有包含元素中取消显示的警告的超集。例如，如果注释一个类来取消显示某个警告，同时注释一个方法来取消显示另一个警告，那么将在此方法中同时取消显示这两个警告。<br>根据风格不同，程序员应该始终在最里层的嵌套元素上使用此注释，在那里使用才有效。如果要在特定的方法中取消显示某个警告，则应该注释该方法而不是注释它的类。 </p><p>“各编译器供应商应该将它们所支持的警告名连同注释类型一起记录。鼓励各供应商之间相互合作，确保在多个编译器中使用相同的名称。”<br>尽管官方建议编译器厂商使用相同的名称，但是实际还是有所不同，下面均以IDEA为例。</p><h2 id="2-用法"><a href="#2-用法" class="headerlink" title="2.用法"></a>2.用法</h2><h3 id="1-单个value注解"><a href="#1-单个value注解" class="headerlink" title="(1)单个value注解"></a>(1)单个value注解</h3><p>可用于类、字段、方法、参数、构造方法、局部变量。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"val"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"val"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"val"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"val"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-多个value注解"><a href="#2-多个value注解" class="headerlink" title="(2)多个value注解"></a>(2)多个value注解</h3><p>可用于类、字段、方法、参数、构造方法、局部变量。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"val1"</span><span class="token punctuation">,</span> <span class="token string">"val2"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"val1"</span><span class="token punctuation">,</span> <span class="token string">"val2"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="3-单行注释形式"><a href="#3-单行注释形式" class="headerlink" title="(3)单行注释形式"></a>(3)单行注释形式</h3><p>一般用于单行或者代码片段的警告抑制，作用范围较小时使用。(注意这里//后不加空格，否则会有Redundant suppression警告)</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//noinspection val</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="3-常用value值及其含义"><a href="#3-常用value值及其含义" class="headerlink" title="3.常用value值及其含义"></a>3.常用value值及其含义</h2><table><thead><tr><th align="left">关键字</th><th align="left">用途</th></tr></thead><tbody><tr><td align="left">all</td><td align="left">抑制所有警告</td></tr><tr><td align="left">boxing</td><td align="left">抑制装箱、拆箱操作时候的警告</td></tr><tr><td align="left">cast</td><td align="left">抑制映射相关的警告</td></tr><tr><td align="left">dep-ann</td><td align="left">抑制启用注释的警告</td></tr><tr><td align="left">deprecation</td><td align="left">抑制过期方法警告</td></tr><tr><td align="left">fallthrough</td><td align="left">抑制确在switch中缺失breaks的警告</td></tr><tr><td align="left">finally</td><td align="left">抑制finally模块没有返回的警告</td></tr><tr><td align="left">hiding</td><td align="left">抑制相对于隐藏变量的局部变量的警告</td></tr><tr><td align="left">incomplete-switch</td><td align="left">忽略没有完整的switch语句</td></tr><tr><td align="left">nls</td><td align="left">忽略非nls格式的字符</td></tr><tr><td align="left">null</td><td align="left">忽略对null的操作</td></tr><tr><td align="left">rawtypes</td><td align="left">使用generics时忽略没有指定相应的类型</td></tr><tr><td align="left">restriction</td><td align="left">抑制禁止使用劝阻或禁止引用的警告</td></tr><tr><td align="left">serial</td><td align="left">忽略在serializable类中没有声明serialVersionUID变量</td></tr><tr><td align="left">static-access</td><td align="left">抑制不正确的静态访问方式警告</td></tr><tr><td align="left">synthetic-access</td><td align="left">抑制子类没有按最优方法访问内部类的警告</td></tr><tr><td align="left">unchecked</td><td align="left">抑制没有进行类型检查操作的警告</td></tr><tr><td align="left">unqualified-field-access</td><td align="left">抑制没有权限访问的域的警告</td></tr><tr><td align="left">unused</td><td align="left">抑制没被使用过的代码的警告</td></tr><tr><td align="left">UnusedReturnValue</td><td align="left">抑制返回值没有被使用的方法上的警告</td></tr><tr><td align="left">ResultOfMethodCallIgnored</td><td align="left">抑制调用有返回值的方法没有使用其返回值的警告</td></tr><tr><td align="left">Duplicates</td><td align="left">抑制重复代码警告</td></tr><tr><td align="left">DuplicatedCode</td><td align="left">抑制重复代码警告</td></tr><tr><td align="left">ConditionCoveredByFurtherCondition</td><td align="left">抑制非必要条件的警告</td></tr><tr><td align="left">TestMethodWithIncorrectSignature</td><td align="left">抑制测试方法签名不正确(带参)警告</td></tr><tr><td align="left">SuspiciousMethodCalls</td><td align="left">抑制可疑的方法调用的警告</td></tr><tr><td align="left">Convert2Lambda</td><td align="left">抑制匿名内部类可以转为lambda的警告</td></tr><tr><td align="left">Convert2MethodRef</td><td align="left">抑制lambda可以转为方法引用的警告</td></tr><tr><td align="left">FieldCanBeLocal</td><td align="left">抑制成员变量可以改为局部变量的警告</td></tr><tr><td align="left">ArraysAsListWithZeroOrOneArgument</td><td align="left">抑制Arrays.asList()方法参数少于2个的警告</td></tr><tr><td align="left">RedundantSuppression</td><td align="left">抑制冗余抑制的警告</td></tr><tr><td align="left">…</td><td align="left">…</td></tr></tbody></table><p>IDEA中所有检查的警告都有对应的抑制注解，不一一列举了，使用时可以在警告上使用alt+enter快捷添加注解。</p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《未来的未来》</title>
      <link href="posts/16aecb71/"/>
      <url>posts/16aecb71/</url>
      
        <content type="html"><![CDATA[<h1 id="《未来的未来》"><a href="#《未来的未来》" class="headerlink" title="《未来的未来》"></a>《未来的未来》</h1><ul><li>虽然我是独生子，但是也有和主角类似的”嫉妒”情绪。小时候走亲戚或是父母的朋友来家里，有小孩子我妈都会去抱去哄，每当看到这样的情形我心里都会不高兴，仿佛失宠了一样。后来还和她说过不要哄别人的小孩，”你怎么不去当它的妈妈”之类的话。现在已经长大了，但我还是十分理解当时的我的感受，所以即使是现在，我一定也会阻止她。还记得小学时爸妈曾经问我想不想要一个妹妹，我说不要，理由是有了妹妹爸妈就不爱我了hhh。</li><li>刚看到一半，浮现上面这段想法的时候，我妈给我打电话了。又聊着聊着，好像是说我表哥相亲失败，到我的想法，到我说摆烂不想相亲，到我妈又开始灌输传宗接代的传统观念，到我说你喜欢抱别人家的小孩为啥还要盼我结婚生孩子抱娃。hhh怎么这么巧，世界线收束回到了这个话题上。命运的捉弄，真有意思。继续看电影。</li><li>电影中的传说习俗:”小孩子出生要供奉娃娃，过节前一天要收起来否则晚一天小孩结婚就会晚一年，就不能和喜欢的人在一起了”。中国也有大量的习俗和传说，繁文缛节不计其数，我倒是自认为思想比较开放不喜欢被规则约束，从来不按习俗要求来做:冬至不吃饺子，二月二不理发，说是男生不能养猫我偏养。。。还有各种想不起来了的奇怪习俗，我妈总能记得很清楚，经常突然冒出来一句”xxx不行，会xxx”，我还是很佩服的，感觉比我高中时候背课文还厉害。</li><li>看到小君第一次骑马吓到头都不敢抬，突然联想到小时候的我，第一次去迪士尼坐过山车，还是室内的过山车，全黑的大型室内一路应该是各种炫酷的灯光，也许就像是穿越星系的感觉吧。之所以说应该也许，是因为我在第一次急下坡后就吓得紧紧抓住扶手眼睛也不敢睁开，就这样度过了难忘的不知道几分钟。出来后还领取了不知道哪来的摄像头抓拍的中途特写照片，看到眼睛紧闭的自己。回到电影，小君有曾祖父的”不管发生什么，都要抬起头注视远方”，大概这就是人生哲理吧，若是在生活中因为害怕而头都不敢抬眼睛都不敢睁，将错过那穿越星系般壮丽的体验，也将被像那张照片一样成为永远的笑柄。(满分作文bushi</li></ul><img src="/img/IMG_0240.JPG" style="zoom: 33%;"><ul><li>正如未来所说，在时间的树中，无数细小的事叠加在一起，才造就了现在的我们。可能每个人都有很多遗憾和懊悔，就像我虽然对自己的现状感到幸运了，但时不时还是会想起当时有哪些事能做得更好，有哪些尝试没有勇敢去做。但这些都已经过去了，能做的大概只有记住它们，并让今后的遗憾减少一些吧。</li></ul><img src="/img/IMG_1593.JPG" style="zoom:67%;"><img src="/img/IMG_1594.JPG" style="zoom: 67%;"><ul><li>只有傻瓜才会期盼着长大吧</li></ul><img src="/img/IMG_1591.JPG" style="zoom:67%;">]]></content>
      
      
      <categories>
          
          <category> 兴趣 </category>
          
          <category> 观影 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 观影 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>喜欢的视频系列</title>
      <link href="posts/5fece136/"/>
      <url>posts/5fece136/</url>
      
        <content type="html"><![CDATA[<h1 id="喜欢的视频系列"><a href="#喜欢的视频系列" class="headerlink" title="喜欢的视频系列"></a>喜欢的视频系列</h1><blockquote><p>这个列表不包括电影和动漫,且持续更新(回忆)中…</p></blockquote><ul><li>老高与小茉：<a href="https://www.youtube.com/channel/UCMUnInmOkrWN4gof9KlhNmQ">https://www.youtube.com/channel/UCMUnInmOkrWN4gof9KlhNmQ</a></li><li>守护解放西123：<a href="https://www.bilibili.com/bangumi/play/ss28277">https://www.bilibili.com/bangumi/play/ss28277</a></li><li>空中浩劫：<a href="https://www.bilibili.com/video/BV19x411q7BN">https://www.bilibili.com/video/BV19x411q7BN</a></li><li>盗月社食遇记：<a href="https://space.bilibili.com/99157282">https://space.bilibili.com/99157282</a></li><li>暴走大事件：<a href="https://space.bilibili.com/883968">https://space.bilibili.com/883968</a></li><li>王老菊阿飞kenshi：<a href="https://www.bilibili.com/video/BV1ux411d746">https://www.bilibili.com/video/BV1ux411d746</a></li><li>王老菊只狼：<a href="https://www.bilibili.com/video/BV17b41177cB">https://www.bilibili.com/video/BV17b41177cB</a></li><li>桔桔的茶园小动物：<a href="https://space.bilibili.com/417567377">https://space.bilibili.com/417567377</a></li><li>瓜皮的id酱：<a href="https://weibo.com/melonpi">https://weibo.com/melonpi</a></li><li>差评君：<a href="https://space.bilibili.com/19319172">https://space.bilibili.com/19319172</a></li><li>麦之花Hibana：<a href="https://space.bilibili.com/141496">https://space.bilibili.com/141496</a></li><li>Akie秋绘：<a href="https://space.bilibili.com/4176573">https://space.bilibili.com/4176573</a></li><li>笔吧评测室：<a href="https://space.bilibili.com/367877">https://space.bilibili.com/367877</a></li><li>开箱嘤嘤怪：<a href="https://space.bilibili.com/454118230">https://space.bilibili.com/454118230</a></li><li>人生第一次：<a href="https://www.bilibili.com/bangumi/play/ss31906">https://www.bilibili.com/bangumi/play/ss31906</a></li><li>你画我猜系列(当然不只是这个合集)：<a href="https://space.bilibili.com/30709393/channel/seriesdetail?sid=249086">https://space.bilibili.com/30709393/channel/seriesdetail?sid=249086</a></li><li>无锡vlog：<a href="https://space.bilibili.com/535275516">https://space.bilibili.com/535275516</a></li><li>凉风阅片无数系列：<a href="https://space.bilibili.com/14110780/channel/collectiondetail?sid=807">https://space.bilibili.com/14110780/channel/collectiondetail?sid=807</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
          <category> 分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分享 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>零碎的想法2022</title>
      <link href="posts/2af7e1fb/"/>
      <url>posts/2af7e1fb/</url>
      
        <content type="html"><![CDATA[<h1 id="零碎的想法"><a href="#零碎的想法" class="headerlink" title="零碎的想法"></a>零碎的想法</h1><h2 id="2022-4"><a href="#2022-4" class="headerlink" title="2022.4:"></a>2022.4:</h2><ul><li>转眼间我已经不再是晚上一个人睡觉怕黑的小男孩了，也不是那个怕和生人说话怕和别人对视的腼腆小孩了</li><li>学会接受自己的平凡，但拒绝平庸，改变不了世界，但至少也要多体验人生，少留下点遗憾</li><li>其实我们大多数人一直在和更好的相比，或是攀比，很多人抱怨命运不公，但看看底层的劳动人民，尤其是体力劳动者，看看谭谈交通遇到的那些苦命的人们。我有两个感叹:我徒有一颗怜悯和共情之心，却无能为力；我虽然没房没车没对象，但能过上即使这样的生活，也已经是足够幸运了。</li><li>有时候突然会有些大胆的想法，比如这辈子不买房不结婚不要孩子，租房养只猫也挺好，不用还房贷的话我的收入还是能活的很有趣和丰富多彩的，也能照顾好父母亲人。毕竟看过很多的人的人生，我不想和大多数人一样过上复制粘贴的生活，选择自己的生活方式无悔这一生就好～(以上纯胡思乱想罢了</li><li>看《守护解放西》看的好开心，但是也看到了很多人间冷暖。我真希望人与人之间能相互理解和相互信任，有耐心，也希望我可能记得成为这样的人。</li><li>最近每天回家坐被窝里看解放西真是太舒服了。可是渐渐地发现，和谭谈交通好像，都是社会中真实的人和事，看到可怜的人我还是会替他们难受。希望善良的人都能被温柔以待，希望世界对他们好一点。</li><li>突然很想看那种催泪虐心的动漫电影，很想身临其境体验那种内心深处的情感，大概是因为现实太枯燥了吧</li><li>偶尔突然浮现一些学生时代的画面，那么熟悉却又那么遥不可及，要是当时更珍惜一些该多好。大概为了以后不会有同样的感想，要记得好好过现在了</li><li>突然很希望这个世界是假的，是电影或动漫中的，或是不那么复杂的。简单纯粹该多好，不用顾虑那么多，不用羡慕别人，每个人都能适得其所。现在的我，内心没有以前的迷茫，却仍然走在迷茫的道路上，不知道去哪，不知道还要走多久。</li><li>关系最好的大学室友读研，几乎天天晚上在实验室忙到10点11点，有时甚至到12点，但我却很羡慕，我害怕自己闲下来，我害怕自己又陷入那种胡思乱想无助迷茫的情绪中，我好想继续上学，融入集体之中，回忆起学生时代的时光，心灵有依托和归宿，能被别人在意，才是我这种人生活的意义之一吧。</li><li>从什么时候，开始练思考起来人生的意义这种问题，但却越来越不明白。现在的我大概是漫无目的地活着，不知道未来何去何从。同样是漫无目的地度过的中学时代，却是我状态最好的时候，我不知道学习是为了什么，一切都是被推动着，和大家一起，理所应当地努力学习努力玩努力锻炼，没有丝毫闲暇去胡思乱想，现在回忆起来是那么的充实幸福令人怀念。现在的我看上去清醒了不少，开始思考生活的意义，却远远没有”活不明白”时快乐，也未曾找到过答案。小学时没有零花钱时地上捡到二十块钱高兴无比，仔细规划如何细水长流地使用，现在月底发了工资看看数字，不知道能用来干什么，想想买房买车又觉得离我很远。初中时有空就喜欢骑车到处跑和拍照，整个咸阳大街小巷都去了遍，夏天烈日当空仍乐此不疲，现在明明每天都可以早早下班利用大把的时间，学习感兴趣的或是出门发现世界，我却靠在床上看屏幕直到深夜。高中时周末早上因为生物钟还是醒的很早，起床后却又困到补觉几小时，享受那份珍贵又安心的睡眠，或是平日每天六点多起床上学，强撑完早读后如饥似渴地趴在桌子上睡，终于到第二节课左右克服睡意那种突然清醒的神奇感觉记忆犹新，现在天天没事却熬夜到很晚早上睡到9点起床还很艰难，曾经梦寐以求的充足睡眠现在唾手可得却丝毫不懂珍惜。大学时不喜欢上课，却不知从何而来的动力坚持夜跑了三年，磨平了那双最喜欢的lunar9，现在每次决定好好锻炼都没能坚持下去，过年被亲戚说毫无训练痕迹。对我来说现在的舒适圈并不舒适，明明曾经毕业前对未来的生活充满了各种美好的想象，计划过一个不留遗憾的精彩丰富的后半生，却变成了在谭谈交通体验社会底层人民的疾苦，在解放西体验走入歧途的人们的懊悔，在动漫和电影体验纯粹极致的爱恨感动，现实中越来越平淡重复。在看到很多画面和片段感慨万千的时候，身边却甚至没有个知心的朋友能倾听，在以为自己又认识了一些新面孔时，却发现大多数人都变得只为了自己的利益，不再体谅他人的感受。曾觉得以后一定能认识更多人，交很多朋友，我只需三两知心者足矣，现在渐渐发现去结识、了解一个人越来越难，再也不能像学生时代那样理所应当地互相认识了解，而是大多数人都变得浮躁，认识一个人很累，微信里近年加了不少人，大多都没有联系躺在列表里。大概人生的意义就和很多事一样没有道理，亦或是我并不能理解，有时候希望一切都是命中注定，大概这样的话就不必再想为什么也不用担忧未来了吧。真好奇以后的我会是什么样子，以后的生活会是什么样呢。</li><li>突然回忆一下过去的经历，就像电影或书本中的剧情一样梦幻，经历了很多不平凡的事，有过翻涌的幸福，也有过极致的痛苦，有人生最低谷时期的绝望，也有破釜沉舟做出改变人生的选择，完成曾经不敢相信的目标。即使我还是孤身一人在外飘零，无数次幻想如果自己有另一半的样子，或是有人可以分享发现的有趣事物，可以诉说各种奇思妙想，能监督自己早睡早起和健身练琴。大概好运是有限的吧，我已经足够幸运了，不能拥有知己和灵魂伴侣也不必太失落，就这样安慰自己吧。</li><li>但是为什么大多数人都能理所应当地，看起来水到渠成地，就能遇到喜欢和喜欢自己的人呢，而我甚至连异性朋友都没有，也根本没有可能性去认识别人，就这样慢慢长大，然后可能性越来越低吧。啊，好烦，人要是单性该多好，那样的话我现在一定快乐的多吧。。</li><li>看到很多上海疫情期间，各种贪官污吏以及以权谋私者，还有后来四月之声被封，客观的记录尚且都要被全网封杀，那各种社会的阴暗和腐败是不是更不能让世人知晓了？真是看一次气愤一次。我这种容易被自己的正义感和微不足道的执念影响情绪的人，大概不适合了解那些黑暗的真相吧，也绝对不适合进入肮脏的官场吧。</li></ul><h2 id="2022-5："><a href="#2022-5：" class="headerlink" title="2022.5："></a>2022.5：</h2><ul><li>之前考核时认识的同事最近分手了，问了后知道他又去了很多次相亲都没结果，我希望找个公司的，一起上下班天天见面再好不过了。但是他说别找公司的甚至别找太近的，要保持距离感才好，并且分手后不会碰见尴尬。我很不认同，既然恋爱肯定不能异地呀，大学时看室友受够了异地的苦，并且为什么在找女朋友之前就要考虑分手的事呢，我希望以后只谈一次恋爱，永远不分。</li><li>大学室友在学校喂猫被抓伤了，现在要打几针狂犬疫苗，犹记得小学时我和同学在小区抓猫，我的手也被猫抓伤过还流了血，但是却害怕打疫苗贵没告诉家里，现在十几年过去了所幸那只猫是健康的，不然我的人生可能就止步于此了吧</li><li>和同学聊天谈起大学时的那些课程，我又回忆起大四时在深渊中的绝望和挣扎，不喜欢的专业课挂了好几门，同时又要准备java知识秋招，面临着如果不能毕业所有努力都前功尽弃的压力，以至于到现在快毕业一年了，还时不时做梦梦见自己毕不了业，逃不出去。每当惊魂未定地意识到那是梦境，都会再次感谢曾经的自己，感谢这幸运的一切经历</li><li>最近又开始闲下来了，早上楼上装修早早被吵醒却又睡着了，再次醒来已经九点四十，遂请假一早，弹了会琴，距上一次碰琴也有一两个月了吧，我再也不是高中时一有空就拿起来弹了，对于出去玩也渐渐失去了热情，大概是不想一个人出去的感觉吧。白天刷了一天nga晴风村，看了很多爱情的甜和苦的帖子发给大学室友看，我们讨论着这些人的经历，可我们自身却连爱河都没能踏进半步。今天开会研发大佬分享职级的经验心得，我却觉得很无趣，大概没有机会升到一个很高的职级走上人生巅峰的吧，我只是个普通不过的一员，天天面对着普通的业务代码，以后何去何从也未知。晚上下了雨却没带伞，淋着雨匆匆走回家，想路上拍点雨中夜景留点纪念也只有没擦拭镜头的散光照片出来。有点丧丧的，这时候适合打游戏来转移注意让心情好起来至少不那么差，或是看看催泪的电影让情感爆发。唉，生活还有什么能期待的呢，孤独终老就要发生在我身上了吗。</li><li>左胳膊肘大四的时候天天撑在桌子上打游戏，每次很长时间然后留下一片红印，后来不知什么时候开始特别痒，后来抓烂了才意识到不对。去了医院检查是神经性皮炎，但是抹了药膏貌似并没有用，已经快一年了，这几天看视频才知道，这个和精神状态有关，要保持愉悦的心情，不能熬夜(难怪一直好不了呢，真的真的要开始早睡了</li><li>吃完饭回家趁室友没回来弹了会吉他，心情舒畅，躺在床上听《夕日坂》，开着的窗户外面传来了隔壁夫妻的吵架声，啊，请不要再打破我对未来的美好幻想了，真不想做那样充满抱怨和没有耐心的人，不想以后的家庭中有一点点的不愉快，愿我温柔待人也能被温柔对待吧</li><li>BV1Dg4y1B74y，晚上看搞笑视频却完全被bgm吸引了，以至于前几个视频还忍俊不禁的我，完全笑不出来了。我立即去听了好几个版本的《父亲的散文诗》，听了快一个小时，这种朴实的话语描述的却是跨越时代的触动内心深处的浓浓情感，大概我又把自己代入进故事里了，感受到了那种艰难无助和压力，也感受到了生死离别的无力与孤独，也感受到了那些终生难忘的回忆带来的感动。但是，大多数人生来就注定要承受经历这些吧，所以我忍不住想要哭，为什么人类注定要伴随着悲剧呢？</li><li>当时看花束般的恋爱，有一个小插曲:歌是不能左右声道分开听的。突然想到，两个人共享一对耳机，仅仅是为了听歌吗，当然是连接两个人的心呀hhh</li><li>感觉自己已经快虚拟化了，现实中与别人的交流太少了。大学以前一天到晚都在现实中与人交流沟通，大学后渐渐地就只有同学室友和连麦打游戏的队友，而毕业后到现在，99%的工作都是在电脑上完成，现实中也只有和合作密切的几个同事会说说话讨论问题，另外就是每天下班出来吃饭和老板点单的三言两语了。不说什么与其他人深入交流，我现在连日常能面对面说说话、开个玩笑、谈论日常琐事的人也没有。天呐，不能再这么下去了，我得快想想办法。</li><li>我不想浪费时间去认识表面的朋友，或者说我已经对成人世界那种脆弱的友情不抱希望了。我梦想着哪怕只有一个也好，有一个互相理解知根知底无话不谈的友谊。但我却什么也没有，现实中感觉大家是社牛，都有关系要好的朋友都有心灵的港湾，我甚至有点自卑和绝望的感觉涌上来。想要恋爱，但是别人会看上我哪里呢，我找不到什么出众的地方。唉，深夜emo，我的人生是不是很失败呢。</li></ul><h2 id="2022-6"><a href="#2022-6" class="headerlink" title="2022.6:"></a>2022.6:</h2><ul><li>下班去红豆楼下吃锅盖面，这是一家新开的店，新奇的食物果然比较吸引人，遂决定经常来，把菜单上的所有种类都尝一遍，虽说有点小贵且量有点少但是味道真不错，虽说可以加面但我每次点的时候都忘记，吃完了没菜了也不想加了。平时都点的加菜的一般17、18r左右，直到有一天，突然想点点便宜的，选了<code>狮子头面加面</code>(只有13r)，感觉自己在薅羊毛并且有种潜意识在想这么便宜还加面，老板会不会不高兴然后暗箱操作(干净又卫生)之类的。结果面上来后吃起来的确和平时有点不一样，以前的韭菜段是新鲜刚切的但是这次是像在辣椒油里面捞出来的，绿色也有点褪色，不过我并没有吃不下的想法，直到吃了1/5发现汤上飘着一个1cm长的笔直细长的绿色东西，用筷子把它拨到碗边看清了是一条笔直的多足的青虫，一开始还安慰自己高温煮过没事的，一边继续硬着头皮把唯二的肉(狮子头，另一个是高蛋白的🐛)吃完，零星地吃了几根面，但是越来越难以下咽了，心里一直在想要不要告诉老板(一瞬间想起很多大学食堂吃出虫找食堂主任的校园新闻，还有室友吃出蟑螂的事迹)，又担心老板很没面子因为很多人在旁边吃饭。最终，一口也咽不下去了，我把虫子拨到碗沿端给老板小声说”有虫”，老板强装不以为然的样子用手直接把虫子捏走并笑着说”菜虫~””给你再下一碗?”(但是能感觉出来老板慌了)，可我他喵哪里吃得下去，我笑了下”不用了没事没事”，拔腿就走头也不回。到家发现老板把钱退款了，我怎么是一个心软到这种程度的人，心里还有点替老板担心(同理心泛滥觉得老板有点可怜😥)，并且感觉我有点对不起老板，我不想让别人觉得我有恶意也不想让别人难堪，明明经常去这家吃有一次老板还问我是不是下班了，很明显经常来老板都认得我，但是我可能再也不会去了，我怕看到老板见我后说抱歉或是给我多加点菜的样子，虽然觉得一条虫没什么，但想想那种场景很尬尴我不想面对，所以就逃避吧(就像大学时和某一位热情的食堂阿姨一样)。真心希望老板能忘了这事，不要太内疚吧，也希望这种事情不要再发生了。</li><li>梦到童年和学生时代，大概也是种噩梦吧。一切都回不去了。</li></ul><h2 id="2022-7"><a href="#2022-7" class="headerlink" title="2022.7:"></a>2022.7:</h2><ul><li>人生就像在一张纸上绘画，去临摹别人的会觉得被约束不自由，但自己从空白自由发挥，却又会觉得无从下手，又很容易画出一笔不满意又抹不掉的后悔。</li><li>居家办公被蚊子骚扰却迟迟不咬我，后来才发现是为了让我多站起来多活动活动脖子(背后的原因令人暖心</li><li>午睡梦到和两个大学室友交谈，没有另一个，我忽然问到他怎么没在，又”想起来”他已经不在了。虽然是梦中，还是心头一紧，一种欲哭的绝望感瞬间让我醒来了。这大概就是离别和失去的感受吧，尽管我多么不想再感受到，但人生总有一天要亲身经历这些，啊，人生不就是一场噩梦吗。好好珍惜眼前人吧。</li></ul><h2 id="2022-8："><a href="#2022-8：" class="headerlink" title="2022.8："></a>2022.8：</h2><ul><li>上周六的爬山累到思考人生，周天的体检出结果后发现尿酸偏高，多年没体检的我看到一条条的异常数据大受震撼。才毕业工作一年身体素质就如此不堪了，我的后半段人生还怎么精彩度过呢？</li><li>从体检出结果的一天开始，每天11点就开始睡觉，买的牛排由于嘌呤含量高也不敢吃了一直冻在冰箱，开始有意识地多喝水清淡饮食，开始监督自己多运动。也许，也希望，为时不晚吧。（11点睡的第二天，早上7点多就自然醒了，感谢这一切让我时隔多年又见到了早上7点的世界</li><li>有时突然就会回忆起许多学生时代的往事，小学时上课偷偷喝水、初中时课间在当时极为先进的”多媒体教学设备”(其实就是电脑)上玩cod、高中时上课互相偷偷弹纸团、数学老师的一些有趣的话语(虽然脑袋想炸了才想起来一句”恍然大明白”，还有很多想不起来了)。。。很多很多美好的回忆，都已经成为记忆了，对比起如今的生活，唉，</li></ul><h2 id="2022-9"><a href="#2022-9" class="headerlink" title="2022.9:"></a>2022.9:</h2><ul><li>周末出去唱歌，看到了一首《违章动物》，初中的时候被同学带动会唱过，突然涌现了一些回忆所以点了。唱到一半看到那些歌词以及mv，我脑子里开始疑问:这是能放出来的吗？竟然没像李志一样被封？我八年前为什么没有听懂这么浅显的含义？回到家，我又看了一遍mv，还看了k耀君的一个解读视频，看懂了很多拍摄和编曲细节才发现这首歌如此有内容。看这个解读视频的时候，突然觉得，如果有未来，会否像解读古诗文词曲一样解读这些歌，如同我们现在去看那些讽刺批判现实的诗歌，去看《石壕吏》《卖炭翁》，去看鲁迅的文字。。看了一些又发现了曾经听过或是没听过的许嵩的歌都很有深度，《伴虎》《拆东墙》《毁人不倦》《降温》。。我是个坚定不追星的，不过看懂了这些他在我心中的高度upup，下周中午吃饭时候又有的看了。 <a href="https://space.bilibili.com/94412444/channel/collectiondetail?sid=15233">附视频合辑链接</a></li><li>2022.9.20，由于某些原因开始研究halo了，不得不说，开发了一年的公司老项目后，看到springboot项目+jdk11的语法竟给我一种耳目一新的感觉，仿佛从小学的黑板粉笔教师来到了初中高中的多媒体数字化教室。啊，我与时代脱节了多少呀，如果我继续开发下去公司的老项目，技术如何进步呢？感谢halo，也感谢促使我接触halo的一切，我会在接下来的日子里将它研究透彻的！</li></ul><h2 id="2022-10"><a href="#2022-10" class="headerlink" title="2022.10:"></a>2022.10:</h2><ul><li>国庆在家期间，听别人说了其家乡亲戚物质生活多么丰富以及那边的彩礼18.8w起，我又恍然如梦初醒，我就像是另一种edgerunner，在<code>安逸开脱自欺欺人</code>和<code>清醒感到危机未雨绸缪提升自己</code>之间徘徊；但能发现，什么远大理想亦或出人头地，早已被现实击碎地无影无踪，不买房不结婚还勉强能过一个能看的生活，对于和那些出身优越的人的差距，我只能渺小地汪洋叹息，大概能做到的只是努力不被淘汰，苟且过完这碌碌无为的一生，至于爱情之类，看看别人的故事足矣。不过这样仿佛一眼看到底的人生，有什么动力坚持下去呢，能让我坚持的可能只是对未来几十年后世界变成什么样的好奇心罢。</li><li>事实证明，我不适合与人相处，从学生时代和同桌关系，工作后和同事做朋友，到现在还是单身并可以预见地继续下去。。我是个”想法太多会逼死自己的人”，是啊，就连这里都不知不觉写了这么多想法，心中所想那大概是数不胜数了吧。想法太多会让别人疑惑、担忧、害怕、讨厌，看来我需要彻彻底底地改变才行，这真的能办到吗。活得简单，快乐。</li></ul><h2 id="剩下的-2023-09-30补"><a href="#剩下的-2023-09-30补" class="headerlink" title="剩下的(2023.09.30补)"></a>剩下的(2023.09.30补)</h2><p>转眼一年时间过去了，发生了许多许多的事情，而我因为一次又一次的懒惰拖延没有记录下来，今天终于因为国庆放假在家无聊，忽然想起这一年未更新的随想和已经过期许久的域名(gaattc.life)，今天就凭借回忆星星点点地回顾和展望一下生活，并新买一个域名(gaattc.cloud)。时间的车轮开始倒转，来浅浅回忆这一年：</p><ul><li><p>大概是在22年的10月还是11月，公司开始”传递寒气”，名曰加速人员更迭，遂开始每个团队都立指标裁员：坐我对面的兄弟因为运气差被分配敢一些杂活（但是我认为技术不错）而遭到了突然裁员，上午通知下午走人。和我一届来公司的一个fr的同事，平时关系还不错，出去唱过歌吃过饭游过泳，也难逃一劫。临走前我们一起吃了大渔铁板，还去了同事家撸猫。然后就再也没能见过面了。我觉得很气的是，自己的圈子这么小，本身就没认识几个人，前一天还欢声笑语，这一下就走了两，真是世事无常。</p></li><li><p>疫情期间，比较特立独行，并且很享受这种特立独行的感觉，没打疫苗，天天居家办公。某天出门了，然后被通知单元楼上有一户人家阳性，整个单元被封隔离，我在外回不去了，和物业、社区的人反复沟通才终于让我回去了，接下来的几天里，被给了几个超大的印有生化标志的垃圾袋，每两天社区防护服人员来送菜，肉菜水果还是蛮不错的，居家办公更不错！我和另一个室友不怎么会做饭，帮佳佳处理杂活，见证了佳佳的厨艺：卖相不好味道还行。我在最后一天做了道煎鱼，可惜貌似与平时煎鸡胸的容易程度不一样，没熟😅。</p></li><li><p>给大学室友介绍了部门的测试，一起打游戏，然后上室友的号偷偷加了测试好友，过了一段时间，成了！</p></li><li><p>室友因为公司抽调人力，被迫去深圳base了，但是他女友刚好在深圳，因祸得福了属于是。最后三个月，我们没招新室友了，因为他说租房补贴2500，房租3000，差不太多，就继续交着算了。</p></li><li><p>佳佳相亲成功了，准备结婚，然后天天沉迷看车，带着我和嘉明也天天看，这段时间对车的了解突飞猛进，各个品牌的常识、常见车型的价位、国产的几大巨头、电车与油车的优劣、汽车排量、发动机缸数、车机相关。。。周末还和佳佳嘉明一起去了4s店看了领克03和本田思域，高下立判不言而喻，现在的国产车已经性价比超级高了，试驾了一下领克03期间我们三个和销售聊(问)了很多，佳佳最后谈价格，各种计算下来也还符合预期，甚至贷款买竟然比全款便宜？后面去了本田的店，外观内饰都被吊打了，问销售思域和领克比优势在哪，他自己都答不上来，只道：“本田老品牌，质量你放心”。</p></li><li><p>后来佳佳的未婚女友，因为工作在福建，在无锡找不到工作，不愿意过来住，然后谈崩了，佳佳说相亲就是这样，很现实，成的快败的也快，不过是找个人凑合过日子罢了。我大受震撼，没有感情的婚姻，真的能幸福长久吗，我大概是不能接受这样的，但也大概不得不走和他一样的路了，上学时不懂得”早恋”，等毕业追悔莫及吧，这辈子已经大半是废了，可恶啊，我也想要甜甜的爱情。</p></li><li><p>管控放开后，发烧了，买不到药，药店买了氨氯芬，好像是叫这个，店员说是和布洛芬一样的效果，等发烧了一天后吃了一次退烧成功，但是第二天又开始，室友给了布洛芬胶囊，不过吃了没退烧，此时又怕有冲突不敢再吃氨氯芬了，打车到水岸诊所打针，被狠狠地花了350，打两天，遂康复。然后疫情突然就消失在视线中了。</p></li><li><p>第二波裁员，带我的师傅被裁了，但是他因为人脉好(认识法律的朋友)，加上口才犀利，获得了比其他人多的多的补偿，真好。</p></li><li><p>买了台电脑，现在是真便宜，除了显卡。又买了块固态，真便宜。</p></li><li><p>ai画图流行起来了，装了sd，用3060ti试画了几天，真不错，只不过浅尝辄止了。</p></li><li><p>一年一度的涨工资环节，谈薪的时候大失所望，我去年年终评价A，且今年升了职级，但是公司因为这两年大环境不好，只给涨了很少，到现在我涨了两次，还是没有当时一起入职的嘉明高，我据理力争强烈不服！申请上诉，但是和组长、领导沟通了几次，最后还是这个理由，没办法了，可恶啊！</p></li><li><p>佳佳姐姐找了个无锡的工作，不过在新吴区，佳佳房租到期后准备和姐姐合租了，住个离两个人都差不多远的地方，早上各自搭地铁上班。房子快到期的几天，我和佳佳叫了保洁，把客厅和厨房被佳佳平时做饭弄得肮脏不堪的油污清洗清洗，本来是计划3小时，最后清理了4小时才弄完，好在我和另一个室友的房间比较干净，不用打扫嘿嘿。</p></li><li><p>而我，以为房子6月底到期刚好是校招新同学毕业的时候，室友肯定不难找，结果发了同事吧，问了中介，基本杳无音讯。公司现在缩招了，今年的研发就只有十来个人，还有很多在南京和成都，终于有人联系了我，但是给他拍了照片后没有后续了，我感觉情况不妙开始做两手准备，自己先尝试另寻租房，公寓看了都很不好，单租的话房子都在2500左右，问了佳佳不是贝壳而是安居客找的，看了下有个还不错的两室一厅2100，周末看了房就定了下来，抽了一个工作日中午签合同。然后开始人工搬家，每次带部分东西过去，搬了一个星期才完，低估自己的东西数量了！不料校招新人又来找我，我告诉了情况后，给他视频看了新的房，然后合租了。</p></li><li><p>和新室友(东林)还有嘉明周五下班去吃饭，第一次带东林去市里，荟聚吃了顿潮汕火锅，回来时出地铁口，外面光线很暗，室友一脚踩下去没看到台阶，脚崴了，还很严重。和他骑电动到公司，帮他拿了电脑，打车去医院，租了轮椅，推着他跑来跑去。挂号，等急诊，拍片，医生也许是大场面见多了，毕竟是急诊，看了眼就说没事回去休息吧，甚至没开药。回家的</p></li><li><p>和新室友一起生活，感觉瞬间多了很多快乐，室友喜欢分享，我们就互相分享吃的喝的；刚来的时候室友疯狂学习，我们每天晚上回到家用电视看spring，看java多线程，看grpc；周末和室友逛超市，见证他大手大脚的花钱的快乐；一起玩三国杀，还带上了学弟和嘉明一起；一起看三国演义(老版！)。室友还买了电动车，中午带我回家睡午觉。</p></li><li><p>中秋国庆连一起，9.23请假，在家浑浑噩噩几天，给爸妈朋友带了两箱无锡特产然后他们请客吃饭，聊了他们健身的成功、子女的现状，感觉都蛮好的，而我练到现在，没有训练痕迹，浪费了又一年时光。另外就是，从小被勤俭节约的爷爷奶奶带大，从来不敢花钱，现在毕业工作两年了，渐渐开始融入了正常人的消费习惯，不再那么扣扣嗖嗖了，也是一种成长吧。回家几天带爸妈吃了两顿饭，还蛮开心的，只要开心就是值得！</p></li><li><p>昨天和爸妈出去看了咸阳开通的新地铁，有生之年系列！从没想过咸阳也有地铁的一天，坐到了沣河森林公园，然后从二号桥走回来看了北平街，整条街全是室内外吃的，坐满了人，这盛世，希望我也能有福消遣。</p><p>大概就是这些了，未来的展望嘛，保持早睡，坚持锻炼，提升自己，虽然说没什么生活的希望，还是要努力找点乐趣，以及让未来不后悔今日吧。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
          <category> 想法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《花束般的恋爱》</title>
      <link href="posts/ca27f386/"/>
      <url>posts/ca27f386/</url>
      
        <content type="html"><![CDATA[<blockquote><p>未完待更…</p></blockquote><h1 id="《花束般的恋爱》"><a href="#《花束般的恋爱》" class="headerlink" title="《花束般的恋爱》"></a>《花束般的恋爱》</h1><img src="/img/yigerendeyingyuan.jpg" style="zoom: 25%;"><p><strong>一个人看电影包场的体验也不错。</strong></p><blockquote><p>以前看完电影觉得意犹未尽，会找各种相关资料和评论和解读，一篇又一篇地看，总能看到其他人的独到见解、细节发现和精辟概括，是一件很爽的事，不过这次我不想再走老路了，自己再看一遍，试着自己去解读和感悟一下。<br>看电影的过程中一直有各种感慨冒出来，但是不能暂停也没有记录，回到家想写些什么却不知道怎么开头，那就换种风格写一写:</p></blockquote><img src="/img/kaitou.jpg" style="zoom:25%;"><p>开头的这一段，第二遍看才恍然大悟。</p><img src="/img/liangshouge.jpg" style="zoom:25%;"><p>在剧中出现的歌竟然有两首都是我特别喜欢的，一首是牙医的<code>キセキ</code>，另一首是世终的<code>RPG</code>，听到的时候DNA都动了，只可惜没人能告诉这份激动hhh</p><img src="/img/dianyingdepinwei.jpg" style="zoom:25%;"><p>这个场景，可能电影并没有想表达我理解的意思，而只是为两位有相同爱好做铺垫。两位路人聊的<code>肖申克</code>、<code>魔女宅急便真人版</code>，都是相对大众化的品味，借以代表那些看似紧跟潮流的人云亦云的从众又浮躁的品味，就像现在流行的抖音之流，而主角们拥有自己小众或者说独特的品味，有自己的想法和选择并乐在其中，相比之下他们是脱俗独特的，虽然小众的爱好更难得到共鸣，但当这一刻来临时一定是更幸福的事。</p><img src="/img/tongkuanxie.jpg" style="zoom:25%;"><img src="/img/pixie&amp;gaogenxie.jpg" style="zoom:25%;"><p>两人的鞋是同款，两人的鞋也贯穿了整个电影，它们代表的是两个人的心灵，从一开始的高度契合天生一对，到后来渐渐不一致不在同一场合一起出现，最后终于变成了皮鞋和高跟鞋，这大概就是时间改变了他们，差异越来越大的体现</p><img src="/img/yongniantianzhen!.jpg" style="zoom:25%;"><p>保持一份像小孩子一样的天真和倔强，向世上那些所谓的规则质疑，这就是我们所说的还未被生活磨平的棱角，能够独立清醒地思考而不是默默接受被制定的一切规则，这才是宝藏</p><img src="/img/wenshen.jpg" style="zoom:25%;"><img src="/img/wenshen2.jpg" style="zoom:25%;"><p>想起来之前看的一个视频，up去纹身店，老板聊天时说，纹身一定要慎重，他见过太多情侣纹身的分手后来洗纹身，甚至还有身上纹身份证号的。这个，哦应该是这些，故事告诉我们一个残酷的事实，很多人在热恋时张口闭口就是一生、永远，他们坚信会彼此不离不弃，可随着时间的过去，这些誓言也会淡去，甚至消散。人是个感性的动物，在恋爱高潮的时候说这些做这些，都没有错，只是，大部分人都不懂得如何也很难去维持好感和浪漫，最终败给了现实吧</p><img src="/img/mianshi.jpg" style="zoom:25%;"><p>看到她面试失利后男主连夜跑去地铁站相拥的场景，想到了我自己。即使我的校招算是比较顺利的，但也能感同身受她的那种压力和无助感，我的秋招只有我一个人孤军奋战，白天参加学校强制的金工实习，下午回到住的校区下车后食堂打包饭再跑回宿舍，勉强赶上笔试开始，做完笔试做行测，有时还有好几家一起或是面试时间冲突，就这样持续了很多天，我知道自己选择的路，必须咬着牙走完，也感受到了那种无力感和疲惫感，我累时并没有人可以倾诉，而女主很幸运，她在最无助的时候迎来了关心和拥抱，我把自己代入她，隔着屏幕都能感受到幸福温暖和安全感，这大概就是有依靠的感觉吧(<del>如果我是女主我就直接嫁给他了hhh</del></p><p><img src="/img/beimaimodemengxiang.jpg"></p><p>看到他工作后，曾经壮志凌云要靠画画为生的工具，被冷落在角落，包括还有工作忙而没时间去看新出的电影，曾经作为共同爱好的书本也被无情的丢弃在后备箱，甚至游戏都能拒之门外。这样的行为一般人或许会称之为”有上进心”，也有人把”工作狂”看做褒义词，但我十分讨厌这种行为，我不认为这就是变得理性、长大了的表现，也许是我贪玩的性格，我觉得生活远比工作重要，生活才是人生的意义。我身边也有那样的人，我亲眼见证了一个人从有趣热爱生活的变成了一个眼里只有工作无心静下来放慢生活的，人都会有自己的选择，我绝不会成为那样的人。</p><p><img src="/img/quefagoutongdehouguo.jpg"></p><p>我觉得不断地交流沟通，不断地发现和理解彼此的想法，才是维持关系最重要的做法。因为人生来就是有隔阂的，人生来就不是互相理解的，停下了交流，心与心之间就会越来越遥远，细小的误会、矛盾、隐瞒，如果不及时交流化解，都会加大这道隔阂，并恶性循环越来越多。我的所见，也大致如此。</p><p><img src="/img/hewodexiangfayiyang.jpg"></p><p>这是我所欣赏的心态，也是我努力实现的事情。按理来说，我现在所做的工作会和现在完全不同，但我喜欢写代码，能从其中获得乐趣，我作了大多数人都不敢作的决定，今天如愿以偿，这大概是我人生中最成功和值得骄傲的事之一。我觉得人就应该尊重自己的内心，做喜欢的事，人生只有一次却又这么短暂，为什么还要抛弃热爱的东西而转向”应该做的事”呢？遵从自己的选择，即使失败，也不会有”如果当时”的遗憾吧。另外，说个题外话，随着长大，我越来越确信，钱，是一个让人心与人心分割的东西，当亲情、友谊、爱情中出现了钱，它就会变得不再纯洁神圣，就会变得脆弱出现裂痕。一些时候，钱会使某些人走到一起，甚至化敌为友，甚至和不是真心喜欢的人成家，有些时候，也会让很多很好的关系破裂。感情是无价的，纯洁的友谊和爱情最可贵的，但却因为物质和利益被很多人抛弃，真是世风日下，人们的价值观都变成这样了吗？拜金主义者是我最讨厌的人之一，眼里只有金钱的人，我一点也不想认识。</p><p>// todo</p><h1 id="其他一些乱七八糟的想法："><a href="#其他一些乱七八糟的想法：" class="headerlink" title="其他一些乱七八糟的想法："></a>其他一些乱七八糟的想法：</h1><ul><li>电影中，他们可以面对面，一起吃美食，一起看风景，一起唱歌，但没有抱着手机不放的画面，而现实中这一幕大概会是最多的。不在家时爸妈一直在微信说想我了想我了，我说这不是能视频能聊天吗，他们说要面对面才好，可是放假回到家没多久，他们都会拿着手机刷刷刷，我有时候真的很讨厌手机把大家仿佛隔开了一样，要是在多年前没有智能手机，大家都能面对面、面对大自然、面对生活该多好，可是我自己也离不开手机了</li><li><img src="/img/beihexiedehua.jpg" style="zoom:25%;"></li></ul><p>再看一遍真的是正确的决定，因为一些画面台词和声音都被和谐掉了，不过也算是社会主义特色了hhh，还有就是机缘巧合下能看到这个字幕做的用心又没广告水印的版本，很幸运</p><ul><li><img src="/img/wudianxaiban.jpg" style="zoom:25%;"></li></ul><img src="/img/gongzuo5nian.jpg" style="zoom:25%;"><p>公司招人经典套路以及画饼经典套路。国内虚假宣传司空见惯了，在社会压力全球第一的日本，就更不用说。生活和工作，真的很难平衡呢。今天出门看电影走在路上，阳光、草坪、鲜花、温暖、时间变得缓慢，这种感觉真舒服，可是再过一天，又是新的一周重复的工作日。不过，这样的日子少才显得更加珍贵吧，就像大学时有那么多时间却没有珍惜。</p><ul><li><img src="/img/mamudefanying.jpg" style="zoom:25%;"></li></ul><p>是不是相处久了，新鲜感和热情变平淡后，人就会变得失去耐心和浪漫，甚至对那些有重要意义的往事和物品都没有了感觉呢。像我这样恋旧的人，如果得知这家店关门，肯定会难过一阵子吧，不过当局者迷，真心希望多年后我不要变成自己讨厌的样子🙏🏻。</p><ul><li><p>出现了很多场景中人们穿着西装皮鞋，大概在日本和一些地方，西装代表着”有正式工作”，代表着成熟和步入社会。尤其是男主找工作的时候，突然换上西装给我感觉如同换了一个人，但多了份严肃少了份亲切感。在我眼里，西装和囚服无异，都是现代社会对人的禁锢和束缚，我一点也不觉得西装很帅，穿上西装就代表着接受了社会的制约，代表着失去了个性、自我和自由，成为人群中不再独特的那一个。人生而自由，为什么会有”正式场合一定要穿西装”这种规定呢？在校招线下面试时看到很多人租皮鞋租衬衫租西装，打扮的似乎成熟但却油腻，我暗自下决心无论是面试还是以后工作，我都只穿自己的衣服。(可能我有些偏激了，也有很多人真心喜欢西装，我只是表达一下自己的不喜欢，毕竟事物的喜欢与否因人而异~</p></li><li><p>我们是应该找相似的爱好，还是相同的价值观，其实电影已经给出了结果。男主女主相遇时因为相同的爱好和生活习惯而觉得对方很特别，与自己完美契合，而经历了这一切后却发现爱好逐渐被生活方式所冲淡，暴露出来的是截然不同的价值观人生观；并且在最后，他们最后一次吃饭，在那个相遇的故事开始的地方，邻桌上演了似曾相识的一幕，才恍然大悟：原来相同的爱好比比皆是，我们并不特殊。也恍然大悟：相同的三观以及相互为对方考虑为对方改变的心，才是更重要的。</p></li><li><p>花束般的恋爱，大概就是上述这样有着表面上相同的爱好和话题，但却只能随着时间逐渐凋零的悲剧吧，而它在现实中却处处都在发生。。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 兴趣 </category>
          
          <category> 观影 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 观影 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>零食收藏夹</title>
      <link href="posts/8e207dc6/"/>
      <url>posts/8e207dc6/</url>
      
        <content type="html"><![CDATA[<h1 id="零食收藏夹"><a href="#零食收藏夹" class="headerlink" title="零食收藏夹"></a>零食收藏夹</h1><blockquote><p>慢慢更ing…很多都没图，到时候找点店铺的图好了</p></blockquote><h2 id="一、坚果"><a href="#一、坚果" class="headerlink" title="一、坚果"></a>一、坚果</h2><h3 id="1-良品铺子每日坚果"><a href="#1-良品铺子每日坚果" class="headerlink" title="1.良品铺子每日坚果"></a>1.良品铺子每日坚果</h3><h3 id=""><a href="#" class="headerlink" title=""></a></h3><h2 id="二、肉"><a href="#二、肉" class="headerlink" title="二、肉"></a>二、肉</h2><h3 id="1-肌肉小王子鸡胸肉"><a href="#1-肌肉小王子鸡胸肉" class="headerlink" title="1.肌肉小王子鸡胸肉"></a>1.肌肉小王子鸡胸肉</h3><h3 id="2-阿诺施瓦辛戈鸡胸肉"><a href="#2-阿诺施瓦辛戈鸡胸肉" class="headerlink" title="2.阿诺施瓦辛戈鸡胸肉"></a>2.阿诺施瓦辛戈鸡胸肉</h3><h3 id="3-靖江猪肉铺"><a href="#3-靖江猪肉铺" class="headerlink" title="3.靖江猪肉铺"></a>3.靖江猪肉铺</h3><h2 id="三、豆制品"><a href="#三、豆制品" class="headerlink" title="三、豆制品"></a>三、豆制品</h2><h3 id="1-肌肉小王子素肉"><a href="#1-肌肉小王子素肉" class="headerlink" title="1.肌肉小王子素肉"></a>1.肌肉小王子素肉</h3><h2 id="四、辣🌶"><a href="#四、辣🌶" class="headerlink" title="四、辣🌶"></a>四、辣🌶</h2><h3 id="1-曲靖麻辣土豆条"><a href="#1-曲靖麻辣土豆条" class="headerlink" title="1.曲靖麻辣土豆条"></a>1.曲靖麻辣土豆条</h3><h3 id="2-卫龙魔芋爽"><a href="#2-卫龙魔芋爽" class="headerlink" title="2.卫龙魔芋爽"></a>2.卫龙魔芋爽</h3><h2 id="五、喝的"><a href="#五、喝的" class="headerlink" title="五、喝的"></a>五、喝的</h2><h3 id="1-德亚脱脂牛奶"><a href="#1-德亚脱脂牛奶" class="headerlink" title="1.德亚脱脂牛奶"></a>1.德亚脱脂牛奶</h3><h3 id="2-布兰兔的茶"><a href="#2-布兰兔的茶" class="headerlink" title="2.布兰兔的茶"></a>2.布兰兔的茶</h3><h3 id="3-干柠檬片"><a href="#3-干柠檬片" class="headerlink" title="3.干柠檬片"></a>3.干柠檬片</h3><h3 id="4-苦荞茶"><a href="#4-苦荞茶" class="headerlink" title="4.苦荞茶"></a>4.苦荞茶</h3><h3 id="5-子俊堂菊花枸杞决明子金银花淡竹叶甘草菊花茶-我可真养生"><a href="#5-子俊堂菊花枸杞决明子金银花淡竹叶甘草菊花茶-我可真养生" class="headerlink" title="5.子俊堂菊花枸杞决明子金银花淡竹叶甘草菊花茶(我可真养生)"></a>5.子俊堂菊花枸杞决明子金银花淡竹叶甘草菊花茶(我可真养生)</h3><h3 id="6-alra阿尔乐纯牛奶"><a href="#6-alra阿尔乐纯牛奶" class="headerlink" title="6.alra阿尔乐纯牛奶"></a>6.alra阿尔乐纯牛奶</h3><h3 id="7-欧亚纯牛奶"><a href="#7-欧亚纯牛奶" class="headerlink" title="7.欧亚纯牛奶"></a>7.欧亚纯牛奶</h3><h2 id="六、甜🎂"><a href="#六、甜🎂" class="headerlink" title="六、甜🎂"></a>六、甜🎂</h2><h3 id="1-泸溪河桂花糕"><a href="#1-泸溪河桂花糕" class="headerlink" title="1.泸溪河桂花糕"></a>1.泸溪河桂花糕</h3><h2 id="七、面"><a href="#七、面" class="headerlink" title="七、面"></a>七、面</h2><h3 id="1-北海道海盐饼干"><a href="#1-北海道海盐饼干" class="headerlink" title="1.北海道海盐饼干"></a>1.北海道海盐饼干</h3>]]></content>
      
      
      <categories>
          
          <category> 兴趣 </category>
          
          <category> 干饭 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 吃吃吃 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>🔒关于长大和成熟</title>
      <link href="posts/55c1fb25/"/>
      <url>posts/55c1fb25/</url>
      
        <content type="html"><![CDATA[<h1 id="关于长大和成熟"><a href="#关于长大和成熟" class="headerlink" title="关于长大和成熟"></a>关于长大和成熟</h1><blockquote><p>长大很容易，很轻松。而成熟要经历很多，的痛苦。</p></blockquote><p>曾经觉得写很多文字来抒发内心感想很有意义，但那只是自我满足，现在我开始讨厌写长篇的文字，我意识到即使是会考虑别人感受的人也不会想看这样的东西，那些我自认为的肺腑之言反而会让别人感到厌恶，我讨厌被讨厌的感觉，所以不想再写了。</p><p>今天的经历让我的观念转变了很多，就记录一次吧，尽量简洁点少些细节描述。</p><h2 id="before"><a href="#before" class="headerlink" title="@before"></a>@before</h2><p>8月17晚上8点iphone13首发，我叫了大学室友和现在室友佳佳一起抢，因为pdd比京东便宜500并且京东的ac+对我来说用处不大，故一起抢pdd。结果是，我们中只有佳佳抢到了，他付了款我转了账坐等发货，一切似乎都很顺利。</p><p>可是，日常催促下，还是到了9月30号标明的最后一天还是没有发货的动静。室友已经回家了，我借了他的号晚上和客服理论，还加了个pdd买13的群，群友说超期发货会赔偿300的优惠券，虽然我并不想要，我只想要我该有的就够了。</p><p>果然，超期了还是没发货，拿到了300优惠券。群友在说退款可以再给500优惠券。虽然我还是不想要，我只想要快点发货，可是客服说预计到10月中旬后了(也可能再拖)。其实pdd卖的便宜还有另一个原因，就是有很多是后封机，别人退换的机子在华强北重新包装后发货。</p><p>过了两天晚上和家里视频，我爸问一个开手机店的朋友说，pdd的店铺是有货的只不过刚发售都拿出去加价卖了，到了10月后旬货多了价格降下来才会发，并且有很多是后封的，不如退了等到10月底正规渠道买。三四利弊后我觉定还是退了。</p><p>几经波折，在用强硬话语和12315的坚强后盾支撑下，与pdd的套路对抗作战成功，终于拿到了500块的券(群友有很多没拿到的)。我找了很久不知道买什么用掉它，给家里说有什么需要的我可以刚好用这个买，但是也没有需要的。室友的号那边一登录我这就掉线，因为他回家我就一直没再登了。</p><h2 id="这件事的开始"><a href="#这件事的开始" class="headerlink" title="这件事的开始"></a>这件事的开始</h2><p>今天早上起来，闲鱼还是没人买，想看看之前用300买的鞋发货了没，问佳佳要验证码登录，可是他平时都是直接给我验证码的，这次一反常态给我截图，我意识到他不想让我等，那不就是想独吞优惠券。我直接说让我上号优惠券还没用，他装作不知道问我什么优惠券 ，我说没发货补偿的500，他说已经用了。我当场黑人问号。</p><p>他说是看到审核优惠券时的信息是：因为信誉良好，退款补偿了优惠券。咬定说是因为账号信誉良好才给的，应该算他的，要不给我100吧：</p><p><img src="/img/image-20211005121222518.png" style="zoom:80%;"><img src="/img/yishiyuse.jpg" style="zoom:10%;"></p><p>站不住脚的理由和毫无关系的例子都成为了明抢的借口，</p><img src="/img/image-20211005121646753.png" style="zoom:67%;"><p>我很不理解，为什么刚毕业的人看到一点利益就拼命想往自己钱包里塞，甚至不惜相处这么久的关系。谈到钱，他就像变了一个人，让我很诧异。<br>社会就是这样的吗？成年人眼中就只剩下无尽的金钱利禄，所有的友谊真诚都是不堪一击随时丢掉的，我开始害怕，我最怕的事情就是今后没有真正知心的朋友了，都是因为金钱利益而往来的酒肉之友。<br>我一瞬间想了很多，我发现事实永远也不是理想中的那样好，人们都很现实，他们不看重感情而只在乎金钱，可以因为几百块钱就变了一个人，而我的想法与这个世界格格不入，</p><p>我想温柔善待每一个人，现实中大多数人并不会这样。我想和我信任的人诉说真心话分享自己的真情实感，可却得不到信任被讨厌。我想结识交心的朋友不谈金钱不在乎物质，可是大部分人都对金钱物质是那么的看重。我想活的简单快乐，事实却把我的信心一点点在磨灭。</p><p>是我的期望太理想，人类又是如此的复杂，也是我太幼稚，没有成熟强大的内心去看清和接受这个世界的现实。</p><hr><p>但是反思一下自己，换位思考一下对方，这一切都合理：</p><ul><li>我不喜欢谈钱伤感情，却也做不到500块一笑置之，我从小和爷爷奶奶长大，他们老一辈的观念让我深知血汗钱的来之不易，让我学会珍惜而不是大手大脚，现在虽然工作有收入了，也虽然我想不去看重物质，可我做不到，我和客服理论好几天的劳动成果不能这么拱手相让，我的心里不平衡。</li><li>他帮我抢，借了我号，确实没有他就没有这块蛋糕，正常人看到了近在眼前的利益有什么理由不去伸手呢？另一方面，人的欲望是无穷无尽的，一定会想给自己多得一点，找一切有可能的理由来为自己支撑。动动手指头就能多拿几百块谁能忍住呢？虽然他看起来不在乎友情，他做的已经算心慈手软了，我认为，也许换成另一个人，可能会因此撕破脸皮吧。我理解他，所以这些都无可厚非。</li></ul><h2 id="这件事的结束"><a href="#这件事的结束" class="headerlink" title="这件事的结束"></a>这件事的结束</h2><p>感谢这一切。<br>我一开始很害怕，因为我来到无锡后身边就没有几个朋友，每天都能说说话让我不那么孤独的，现在就只有包括佳佳在内telegram小群的群友4人了。<br>我刚刚经历了失去一个朋友，是仅有的说过真心话的人之一，还是要天天见到进而想起进而开始责怪自己的😞。<br>如果这次和佳佳关系因此破裂，那我真的会每天都在痛苦中度过，在公司、在家里。往远地想想，我很害怕这辈子都没有知心的朋友，孤独终老，满怀遗憾😞。</p><p>我选择了退让，现在很感谢自己做了正确的决定，我终于不是把所有事都处理的越来越糟的人了。<strong>虽然失去了金钱，但是换来了一个朋友和我的成长，这就是最大的收获</strong>，感谢一切。</p><hr><p>其实人之初性本善是对的，每个人都是善良的，只要不被金钱和情绪蒙蔽双眼，只要我们的理性还在。<br>我们的关系就这样迅速恢复了，我能感觉到我们彼此都相互理解，只是谁都不愿意先让步罢了。事情的解决最终要的就是相互理解，而解决的关键还是要在于退让。</p><p>事情的开始和经过很让我揪心，但结局又顺利和好，要是另一件事也能如此该多好。</p><img src="/img/image-20211005141235983.png" style="zoom:67%;"><p>很多事我都没有经历过，所以才这么多愁善感吧，当有一天我也能扛起一个家庭拉着两辆车的时候，当我背负着责任与阅历也看清楚生活的真相的时候，再回头看我曾经的感慨万千，会不会欣慰地笑一笑：”这些，都是我成长路上的垫脚石”呢</p><img src="/img/image-20211005141723250.png" style="zoom:67%;"><p>金钱物质是万恶之源，是让人们趋之若鹜让人心不再单纯的东西，如果世界可以富足不再有金钱作价值衡量的标准，一定很美好吧。</p><p>可是，我看清了这些，却摆脱不了，生存还是要继续的，金钱物质也是离不开的。就像现在没房没车的我，又哪里有自信去想脱单什么的呢，我只能努力工作，和每一个打工人一样，所幸的是，我喜欢现在的工作，感激这份命运的馈赠，我不该再有对命运的抱怨了，向前看，好好生活吧。</p><h2 id="after"><a href="#after" class="headerlink" title="@after"></a>@after</h2><blockquote><p>世界上只有一种英雄主义，就是看清生活的真相后，依然热爱生活。</p></blockquote><p>如果我刚刚看清了这冰山一角，就开始自怨自艾，抱怨现实与理想的差异。这是懦弱的行为，世界怎么可能因为我们而改变，人性也始终是不会变的，<strong>要长大和成熟，只能去改变自己</strong>，<br>大多数人会选择去融入这个世界，做大家认为是正确的事情：功名利禄、金钱物质、工作&gt;生活、重财轻友…，</p><p>但</p><p>我觉得我最后的倔强就是，改变不了这事实，我会改变自己，去热爱这个千疮百孔的不完美世界，但我绝不选择同流合污，我要去看清这个世界也看清自己。</p><p>人生还有短短几十年了，要珍惜的是生命、生活、人与人之间的羁绊，而不是被物质蒙蔽双眼将这一生都马不停蹄地走在追逐错误价值的路上。即使没有人理解，即使会让自己受伤，即使只若孤芳自赏。做一股清流与众不同，很难😶可能在古时我就是那种隐居的人。在现代，我又能隐藏什么呢，隐藏自己的万千感慨，微笑面对每一个人吧。</p><p>经历过才能变的成熟，成为英雄的路上，经历很多也在所难免，未来的路还有很长，希望我能不忘初心地坚持下去，热爱生活热爱这一切<br>(●’◡’●)</p>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
          <category> 想法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>🔒仍然仍然</title>
      <link href="posts/73e10e1f/"/>
      <url>posts/73e10e1f/</url>
      
        <content type="html"><![CDATA[<h1 id="仍然仍然"><a href="#仍然仍然" class="headerlink" title="仍然仍然"></a>仍然仍然</h1><p>我到底是怎么了<br>午睡睡着前思想又转了一圈到9月的事上<br>那些负面情绪又一次卷土重来<br>通过眼罩+冥想我终于入睡<br>可梦中，还是不争气地梦到了她</p><p>回忆起来，我认识的每个女生<br>最终多多少少都会让我难过<br>可能是单身太久，我遇到谁都以为是我的命中注定，有趣的无趣的、喜欢的不喜欢的、身边的远方的、没表达好感的表达过的。<br>可结局都不是令人开心的</p><p>这样的我怎么可能和异性能成为朋友啊<br>虽然聊天记录没有了，很多话我还记得清楚<br>第一次哭的那天晚上她说过:<br>“唉 可能我们不适合做朋友吧 但总有人适合的”</p><p>她这样性格温柔很有耐心的人，都因为我而生气没有耐心了<br>那这个世界上，大概不会有女生能适合和我做朋友了<br>敏感又脆弱的性格，就是我这辈子最大的遗憾吧😔</p><p>和男生我总是可以很自然地相处<br>即使是关系最好的大学室友<br>两人也是随机开始随机回复觉得很自然<br>和女生 我却潜意识里特别的在意这些<br>对方长时间不会或是只回很短，我会认为对方讨厌我了，我会想知道为什么<br>记得大一暑假也是唯一一次追女生，也是类似的情况，我喜欢分享生活，可是对方却越来越敷衍，我忍不住还是问了，她说了我至今没忘的话:<br>“别人就不能有自己的生活，自己的事情吗”<br>“谁能一天到晚抱着手机和你聊天”<br>我是多么的卑微和自讨没趣</p><p>归根结底<br>是我抱有希望，所以会失望<br>可我是多么希望有一个理解我的人和我共同生活下去啊<br>我喜欢考虑别人的感受，却从来看不出别人对我的态度，是善良的敷衍还是真心的喜欢<br>我去分享生活时总是幻想着别人对我是喜欢，别人没有及时回消息时我总是幻想着别人对我是讨厌。<br>我真是个奇怪的人，我还有救吗？</p>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
          <category> 想法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pr做第一个视频小记录</title>
      <link href="posts/eba7cb24/"/>
      <url>posts/eba7cb24/</url>
      
        <content type="html"><![CDATA[<h1 id="pr做第一个视频小记录"><a href="#pr做第一个视频小记录" class="headerlink" title="pr做第一个视频小记录"></a>pr做第一个视频小记录</h1><p>现学现用之pr剪辑+换声源+字幕</p><blockquote><p>这个算是真正意义上的剪辑了，虽说还是入门水平，不过能学些新鲜的技能感觉很棒，国庆的前两天不算虚度了~<br>这首RPG是<a href="https://www.bilibili.com/bangumi/media/md15072/">蜡笔小新 超级美味B级美食大逃亡</a>的主题曲，原版就很好听，在网易云上被日推了LeftyHandCream的翻唱版，太喜欢了，去油管找原版视频，结果没有mv只有个静态的画面。。<br>失望带来希望，那么我就用这个原版的mv配上翻唱版的音频，来实现我的愿望吧。整个过程中遇到了很多问题，<strong>视频音频的下载、音画不同步、两个版本的间奏不一样总时长也不一样、切换两个音源时的过渡、音量控制、网易云歌词提取、字幕格式转换和格式修复</strong>，学到很多，这不得记录一下🥳</p></blockquote><h2 id="1-音视频下载"><a href="#1-音视频下载" class="headerlink" title="1.音视频下载"></a>1.音视频下载</h2><p>这个可老有经验了😎并且方法有很多，比如youtube下载插件、手机客户端缓存然后去data里拿、用b站下载脚本。</p><p>这里由于youtube原版才720p，而b站有人发了处理过的1080p 60fps的版本，我就直接用<a href="https://www.bilibili.com/video/BV1bJ411z7HQ">这个</a>了，用上祖传的bilibili evolved脚本，这里选最高画质，格式为<code>DASH</code>原因是只支持flv和DASH两种格式，flv在pr2020是不支持直接编辑的，并且DASH是音频视频分开下载的，反而更方便剪辑：</p><img src="/img/image-20211002210132506.png" style="zoom:50%;"><p>原版视频音频的文件就搞定了：</p><img src="/img/image-20211002210524700.png" style="zoom:67%;"><p>翻唱版呢，当然是无损更好，使用<a href="http://tool.liumingye.cn/music/?page=audioPage&amp;type=YQB&amp;name=RPG%20Lefty">MyFreeMP3</a>即可：</p><img src="/img/image-20211002210821531.png" style="zoom: 50%;"><blockquote><p>后面还用到了印尼宽带的背景音乐”叮”作为音频的过渡，获取方式也是同上。</p></blockquote><h2 id="2-剪辑适配和过渡"><a href="#2-剪辑适配和过渡" class="headerlink" title="2.剪辑适配和过渡"></a>2.剪辑适配和过渡</h2><p>这里是遇到的第一个难点，原版的歌在<strong>1:37</strong>时是有一段30s的间奏的，但是翻唱版把这段间奏去掉了，所以直接用翻唱版的音频后半段音画就完全不一致了，还有另一个小问题是翻唱版的伴奏是重制的，刚开始的伴奏到开唱时间也不同，否则嘴型对不上，强迫症应该会觉得难受，需要调整一下。</p><h3 id="先解决小问题："><a href="#先解决小问题：" class="headerlink" title="先解决小问题："></a>先解决小问题：</h3><p>经过反复尝试，找到了时间差，翻唱比原版的慢一点，将翻唱的起始位置移动到了新的坐标：</p><pre class="line-numbers language-position" data-language="position"><code class="language-position">00;00;00;20<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="再解决大问题："><a href="#再解决大问题：" class="headerlink" title="再解决大问题："></a>再解决大问题：</h3><p>反复尝试，一点点调整，A1轨道是翻唱，A2是原唱，在这里紫色的方框部分左边是翻唱第一段最后一句接下来的短暂伴奏，右边就直接开始第二段了，而红色方框是原唱这里和间奏的衔接部分。</p><img src="/img/image-20211002212020546.png" style="zoom:67%;"><p>视频截断会很难看而且间奏部分不能没有，那么就只能把翻唱剪开，后半部分移到和原唱第二部分一样的位置，中间这段间奏使用原唱的来代替，虽然说起来容易，但是这里费了最多的时间，导致我晚饭都没吃再加上字幕一直弄到了晚上8点😁，一口气做完的感觉针布戳。</p><p>结果是，衔接部分极其难搞，怎么听都很突兀，我想到了转场音效，搜了很多也不好，灵机一动，印尼宽带的”叮”是不是可以用一下，我下了个素材剪出来这个叮放了上去，然后调两段bgm的音量，尴尬而不失礼貌地转场了，还是不够顺滑:</p><p><img src="/img/image-20211002213249115.png"></p><p>后面的衔接也是类似的处理。</p><h2 id="3-网易云歌词提取、lrc转srt格式"><a href="#3-网易云歌词提取、lrc转srt格式" class="headerlink" title="3.网易云歌词提取、lrc转srt格式"></a>3.网易云歌词提取、lrc转srt格式</h2><p>找到了一个<a href="https://github.com/GAATTC0/163MusicLyrics">网易云lrc歌词提取工具</a>，然后网易云分享歌曲链接<a href="http://music.163.com/song?id=26329928%EF%BC%8C%E6%8B%BF%E5%88%B0%E6%AD%8C%E6%9B%B2id%EF%BC%8C%E5%B0%B1%E5%8F%AF%E4%BB%A5%E6%96%B9%E4%BE%BF%E5%9C%B0%E4%B8%8B%E8%BD%BDlrc%E6%A0%BC%E5%BC%8F%E6%AD%8C%E8%AF%8D%E4%BA%86%EF%BC%9A">http://music.163.com/song?id=26329928，拿到歌曲id，就可以方便地下载lrc格式歌词了：</a></p><img src="/img/image-20211002214130315.png" style="zoom:67%;"><p>选择<code>合并歌词</code>，原文译文我全都要.jpg，然后下面选<code>UTF-8-BOM</code>，这个截图截错了😑</p><p>保存了lrc歌词，但是pr只支持srt格式的，我们要想办法去转格式，虽然说手动也可以，但是，没有但是，就是懒XD</p><p>有幸几秒钟就找到了一个<del>好用</del>(不确定)的<a href="http://www.lrccon.com/convert.php">在线转换工具</a>：</p><img src="/img/image-20211002214638908.png" style="zoom:67%;"><p>不清楚是不是好用，因为一大堆问题，看下一章吧</p><h2 id="4-字幕格式问题处理"><a href="#4-字幕格式问题处理" class="headerlink" title="4.字幕格式问题处理"></a>4.字幕格式问题处理</h2><p>直接导入素材，发现文件格式有问题：</p><img src="/img/Snipaste_2021-10-02_20-42-37.png" style="zoom:67%;"><p>网上找了找<a href="https://www.zhihu.com/question/310923147">前人的经验</a>，发现可能的问题有很多：</p><ul><li>SRT字幕文件编码不是UTF-8或ANSI(改成了UTF-8-BOM)</li><li>SRT字幕文件第一个字幕行前面，有一个或多个空行(排除)</li><li><font color="red">第一个时间轴是00:00:00,000 –&gt; 00:00:00,000</font>(改成了001,这个是主要原因)</li><li>文件太大(排除，这个回答就不专业，差评)</li></ul><p>然后就可以成功导入拖到轨道中了，随之而来的又是一个新问题，</p><img src="/img/image-20211002220454322.png" style="zoom:67%;"><p>文件格式看起来还是不对，从第二个开始坐标就跑到了字幕内容的位置，而后面的坐标全乱了导致字幕不显示。<br>研究了一会发现原来是有一些片段是空内容，pr读取的时候会跳过空行读下一行，进而读取了坐标，导致之后的坐标都乱了：</p><img src="/img/Snipaste_2021-10-02_20-42-04.png" style="zoom:67%;"><p>后面还有很多同样的问题，我把空行全都换成了”~”，美丽地解决了这个问题。</p><p><img src="/img/image-20211002221126236.png"></p><p>最后一个问题是原文和译文在同一行，很难看而且不符合我们的阅读习惯，加个换行符就好了，再改改字幕的字体、大小、背景颜色、背景透明度等。<br>至此，第一个视频就宣告竣工了✌完结撒花❀🎉🎊🎆🎇💐🌸🏵🌹🌺🌻🌼🌷</p><h2 id="5-成果"><a href="#5-成果" class="headerlink" title="5.成果"></a>5.成果</h2><p><a href="https://www.bilibili.com/video/BV16R4y1p7Gs">传送门</a></p>]]></content>
      
      
      <categories>
          
          <category> 兴趣 </category>
          
          <category> UP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pr </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>windows查看端口占用的进程</title>
      <link href="posts/ab7da29b/"/>
      <url>posts/ab7da29b/</url>
      
        <content type="html"><![CDATA[<h1 id="windows查看端口占用的进程"><a href="#windows查看端口占用的进程" class="headerlink" title="windows查看端口占用的进程"></a>windows查看端口占用的进程</h1><h2 id="情景"><a href="#情景" class="headerlink" title="情景"></a>情景</h2><p>在启动tomcat时，默认绑定的JMX port端口是1099，但是有时候这个端口会被其他进程占用，导致启动失败，</p><p><img src="/img/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_16328820144688.png"></p><p>看看异常信息：</p><p><img src="/img/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_16328820765842.png"></p><p>端口1099被占用，现在的任务就是找出这个占用端口的罪魁祸首，将其消灭。</p><h2 id="查看端口"><a href="#查看端口" class="headerlink" title="查看端口"></a>查看端口</h2><p>首先打开windows的命令行，这个命令可以查看当前的所有端口使用情况以及进程id信息：</p><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">netstat -ano<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>但是这样还是很不方便，因为太多了，还有一个精准查找的方法：</p><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">netstat -ano|findstr "&lt;端口号&gt;"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/img/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_16328824758791.png"></p><p>这样以来，就可以找出占用了1099这个端口的进程id是<code>17180</code>。</p><h2 id="查找进程"><a href="#查找进程" class="headerlink" title="查找进程"></a>查找进程</h2><p>打开windows的资源管理器，详细信息，按进程id排序然后手动查找即可：</p><p><img src="/img/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_16328825646822.png"></p><p>这样就找到了进程，<font color="#91501c">雷蛇，原来是你小子</font>😅！</p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><h3 id="1-唯我独尊"><a href="#1-唯我独尊" class="headerlink" title="1.唯我独尊"></a>1.唯我独尊</h3><p>接着上一步，直接在任务管理器和中杀掉这个进程即可，为什么要在资源管理器中先看看呢，因为不敢乱杀~</p><h3 id="2-斩草除根"><a href="#2-斩草除根" class="headerlink" title="2.斩草除根"></a>2.斩草除根</h3><p>雷蛇驱动而已，不要也罢，不如直接——：</p><p><img src="/img/image-20210929105627879.png"></p><h3 id="3-以退为进"><a href="#3-以退为进" class="headerlink" title="3.以退为进"></a>3.以退为进</h3><p>还有一个友好型的方法，就是修改一下tomcat的启动端口，字啊这里改成一个不会被占用的即可(虽然是这么说，但是还是可能被占用233)：</p><img src="/img/image-20210929110713074.png" style="zoom:67%;">]]></content>
      
      
      <categories>
          
          <category> bug </category>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> bug </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IDEA从入门到精通</title>
      <link href="posts/42dd4c/"/>
      <url>posts/42dd4c/</url>
      
        <content type="html"><![CDATA[<h1 id="IDEA从入门到精通"><a href="#IDEA从入门到精通" class="headerlink" title="IDEA从入门到精通"></a>IDEA从入门到精通</h1><blockquote><p>还在更新中…</p></blockquote><h2 id="一、常规篇"><a href="#一、常规篇" class="headerlink" title="一、常规篇"></a>一、常规篇</h2><h3 id="1-字体布局"><a href="#1-字体布局" class="headerlink" title="1.字体布局"></a>1.字体布局</h3><h4 id="①编译器字体"><a href="#①编译器字体" class="headerlink" title="①编译器字体"></a>①编译器字体</h4><p><code>Settings -&gt; Appearance&amp;Behavior -&gt; Appearance</code>:</p><img src="/img/image-20210928102636561.png" style="zoom: 67%;"> <h4 id="②代码字体"><a href="#②代码字体" class="headerlink" title="②代码字体"></a>②代码字体</h4><p><code>Settings -&gt; Editor -&gt; Font</code>:</p><img src="/img/image-20210928102941315.png" style="zoom:67%;"><p>consolas, yyds.</p><h3 id="2-折叠中间包"><a href="#2-折叠中间包" class="headerlink" title="2.折叠中间包"></a>2.折叠中间包</h3><p>当包路径很多时，中间可能会有很多的空包，这样要手动点开每一个就很麻烦，compact可让这些空的包一次性展开为一个包的样子，报名之间用”.”分隔，既方便又美观：</p><img src="/img/image-20210928103454360.png" style="zoom:67%;"><h3 id="3-Tab数量控制"><a href="#3-Tab数量控制" class="headerlink" title="3.Tab数量控制"></a>3.Tab数量控制</h3><p>idea的默认tab数量是有限制的，一行显示满了再打开新的tab就会折叠，超过数量限制还会关闭旧的tab，这样非常不便于调试和查看，所偶一将其修改为多行显示：</p><p><code>Settings -&gt; Editor -&gt; General -&gt; Editor Tabs</code>:</p><p><img src="/img/image-20210928110635358.png"></p><p>先关闭<code>Show tabs in one row</code>,然后下面有一个关闭策略：</p><p><img src="/img/image-20210928110758987.png"></p><p>把这个Tab limit的数值调大亿点即可，这样以来就可以多行显示了。</p><h3 id="4-防止自动将多个import替换为import"><a href="#4-防止自动将多个import替换为import" class="headerlink" title="4.防止自动将多个import替换为import *"></a>4.防止自动将多个import替换为import *</h3><p>idea在一些情况下会将同一个包中的多个import语句合为一条<code>import *</code>，但是在很多代码规范里这是不允许的，将其设置一下不去自动替换import，</p><p><code>Settings -&gt; Editor -&gt; Code Style -&gt; Java</code>：</p><img src="/img/image-20210928111349638.png" style="zoom:67%;"><p>将下面这两个替换策略的值调大亿点即可。</p><h3 id="5-自动导包和删除"><a href="#5-自动导包和删除" class="headerlink" title="5.自动导包和删除"></a>5.自动导包和删除</h3><p><code>Settings -&gt; Editor -&gt; General -&gt; Auto Import -&gt; Java</code>：</p><p><img src="/img/image-20211007111153595.png" alt="image-20211007111153595"></p><p>选择自动将粘贴的代码中的类import、自动import类名不冲突的类、自动去掉无效的import。</p><h3 id="6-File-Header"><a href="#6-File-Header" class="headerlink" title="6.File Header"></a>6.File Header</h3><p><code>Settings -&gt; Editor -&gt; File and Code Templates</code>：</p><p>右侧添加一个File Header，这样新建一个类的时候会自动根据配置在类的上方添加注释信息，其中还可以定义一些环境变量，如：</p><p>{DATE}、{TIME}、{USER}、{PACKEGE_NAME}等。</p><img src="/img/image-20210928113902841.png" style="zoom:50%;"><h3 id="7-比较不同"><a href="#7-比较不同" class="headerlink" title="7.比较不同"></a>7.比较不同</h3><p>这个文档比较功能比word那些的好用多了，可以直接在某个文件的任意位置右键选择<code>Compare With Clipboard</code>，就可以将其和剪贴板中的文字进行比较了，并且非常详细和美观，当然前提时要先复制一份要比较的代码，另外，还可以选中一段代码进行比较，这个也很方便：</p><p><img src="/img/image-20210929141513924.png"></p><p>还有一个是不用复制的比较方法，对整个文件进行对比，在某个文件右键选择<code>Compare With</code>然后选择另一个文件即可。</p><h3 id="8-提示符忽略大小写"><a href="#8-提示符忽略大小写" class="headerlink" title="8.提示符忽略大小写"></a>8.提示符忽略大小写</h3><p>如果觉得大小写来回切换很麻烦，那么可以设置忽略大小写，</p><p><code>File –&gt; settings –&gt; Editor –&gt; General -&gt; Code Completion</code>：</p><p><img src="/img/image-20211007105913688.png"></p><p>将Match case取消勾选即可，若如此做，首字母大小写不同的字符都会被用作提示了，但是感觉也带来一些问题，就是精度会降低，毕竟参与提示的字符会变多，就像打字一样，提示的词汇太多反而不好找了。</p><h3 id="9-背景图"><a href="#9-背景图" class="headerlink" title="9.背景图"></a>9.背景图</h3><p><code>Settings -&gt; Appearance&amp;Behavior -&gt; Appearance -&gt; UI Options -&gt; Background Image</code></p><h3 id="10-ide内存占用"><a href="#10-ide内存占用" class="headerlink" title="10.ide内存占用"></a>10.ide内存占用</h3><p>有时编辑大文件会卡顿和提示”low memory”，默认Xmx时1773M，可以手动设置一下，<code>navi -&gt; Help -&gt; Edit Custom VM Options</code>:</p><img src="/img/image-20220303195925709.png" style="zoom: 50%;"><p><strong>适当</strong>调整一下，如：</p><p><img src="/img/image-20220303200140504.png"></p><h3 id="11-过长自动换行"><a href="#11-过长自动换行" class="headerlink" title="11.过长自动换行"></a>11.过长自动换行</h3><p><code>Settings -&gt; Editor -&gt; Code Style</code>：</p><img src="/img/image-20220422101315769.png" style="zoom:67%;"><h3 id="12-import格式"><a href="#12-import格式" class="headerlink" title="12.import格式"></a>12.import格式</h3><p><code>Settings -&gt; Editor -&gt; Code Style -&gt; Java-&gt; imports</code>：</p><p>import layout:</p><p>这里可以自定义import的格式，可以将自定义的包名添加规则格式化时自动移到指定位置，且可以在指定包名之间添加空行，还有静态引用单独一个区域等。</p><h3 id="13-生成serialVersionUID"><a href="#13-生成serialVersionUID" class="headerlink" title="13.生成serialVersionUID"></a>13.生成serialVersionUID</h3><p><code>Settings -&gt; Editor -&gt; Inspections -&gt; Serialiation issues</code>：</p><p>勾选Serializable class without ‘serialVersionUID’，即可使用快捷修复插入。</p><h2 id="二、插件篇"><a href="#二、插件篇" class="headerlink" title="二、插件篇"></a>二、插件篇</h2><h3 id="1-Translation"><a href="#1-Translation" class="headerlink" title="1.Translation"></a>1.Translation</h3><p><img src="/img/image-20210928104018440.png"></p><p>划线翻译、文档翻译、翻译并替换，还是很好用的。支持google、有道、百度翻译，但是综合来看还是google更准确一些，就是时常会有一些网络问题，可以在设置里勾选使用tanslate.google.com，</p><p><code>Settings -&gt; Tools -&gt; Translation</code>：</p><p><img src="/img/image-20210928141415379.png"></p><h3 id="2-Rainbow-Brackets"><a href="#2-Rainbow-Brackets" class="headerlink" title="2.Rainbow  Brackets"></a>2.Rainbow  Brackets</h3><p><img src="/img/image-20210928105851220.png"></p><p>对比了无数主题，发现还是idea自带的darcula主题看着舒服，但是缺点是高亮的太少了，一大堆代码大部分都是灰色的，看起来很费劲，所以包括括号什么的，使用这个彩虹括号插件就可以让界面更美观、代码结构更清晰，就不上图了，体验过的都说好。</p><h3 id="3-Nyan-Progress-Bar"><a href="#3-Nyan-Progress-Bar" class="headerlink" title="3.Nyan Progress Bar"></a>3.Nyan Progress Bar</h3><p><img src="/img/image-20210928105905553.png"></p><p>让进度条变成彩虹猫，本来枯燥缓慢的进度条好像变得更快了呢！</p><h3 id="4-IDE-Eval-Reset"><a href="#4-IDE-Eval-Reset" class="headerlink" title="4.IDE Eval Reset"></a>4.IDE Eval Reset</h3><p><img src="/img/image-20210928105918726.png"></p><p><a href="https://gaattc.lanzoui.com/iMkxyulpvda">下载传送门</a></p><p>这是一个无限试用idea的破解插件，之前一直是用的lookdiv的激活码，但是现在jetbrains查的严不好用了，建议还是用这个一劳永逸。</p><p><strong>使用方法：</strong></p><ol><li>首先，下载破解插件压缩包，将其放在一个安全的路径，<font color="red">插件安装后不要移动和删除，也不能更新IDEA</font>，否则破解插件会失效；</li><li>新建一个项目，将压缩包直接拖进编译器，然后重启编译器；</li><li>重新启动后在顶部的导航栏<code>help</code>中，最后一行会出现一个<code>Eval Reset</code>选项，打开后右下角有一个<img src="/img/image-20210928140810450.png">选项，勾选之，这样就会在每次重启前自动重置试用期限了。</li></ol><blockquote><p>code with me功能还不能试用，查看会发现没有激活，但是令人惊喜的是没激活也可以直接使用233</p></blockquote><h3 id="5-Code-With-Me"><a href="#5-Code-With-Me" class="headerlink" title="5.Code With Me"></a>5.Code With Me</h3><p>这个应该算是一个官方插件，在2021的新版本是集成在IDE中的，根据第四条，可以直接使用这个强大的功能。</p><p>使用方法：</p><p><img src="/img/image-20211009151210902.png"></p><p>首先点击右上角的code with me图标或者按<code>ctrl+shift+y</code>呼出这个选项界面，</p><p>然后选择第一个<code>enable access and copy invitation link</code>为邀请别人来协同编辑你本地的代码，在这之前可以进行一些权限的设置：</p><img src="/img/image-20211009151449766.png" style="zoom: 67%;"><p>第二个选项是随时可以配置(有人加入协同编辑或没有时)其他人的权限的配置。</p><p>第三个是输入别人分享的邀请链接来加入别人的代码协同编辑，其实也可以浏览器直接打开链接就行。</p><blockquote><p>这个插件比远程控制的好处在于可以异步编辑代码，并且可以随时看到对方在编辑什么位置，也可以强制让别人的视角跟着你的位置，另外，可以很多个人同事编辑。</p></blockquote><h3 id="6-SequenceDiagram"><a href="#6-SequenceDiagram" class="headerlink" title="6.SequenceDiagram"></a>6.SequenceDiagram</h3><p>一键生成时序图的插件，右键或者点击右上角的图标即可。</p><h2 id="三、VCS篇"><a href="#三、VCS篇" class="headerlink" title="三、VCS篇"></a>三、VCS篇</h2><h3 id="1-IDEA使用git操作缓慢的解决方法"><a href="#1-IDEA使用git操作缓慢的解决方法" class="headerlink" title="1.IDEA使用git操作缓慢的解决方法"></a>1.IDEA使用git操作缓慢的解决方法</h3><p>有时候idea使用git的一些操作变得非常慢，比如Update Project、Annotate with Git Blame、commit、查看本地的change list等。</p><p>但是有时候这不是网络问题，因为此时此刻使用命令行或者其他的客户端都很快，虽然这个问题原因还不明，但是解决方法很简单，</p><p>找到idea的安装目录下的bin目录：</p><pre class="line-numbers language-dir" data-language="dir"><code class="language-dir">%IDEA_HOME%\bin<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>有一个<strong>runnerw.exe</strong>文件，将其删除即可。并且对于idea的正常使用没有任何影响。</p><h3 id="2-commit设置"><a href="#2-commit设置" class="headerlink" title="2.commit设置"></a>2.commit设置</h3><p>在idea已经enable VCS后，左侧边栏会有一个commit工具栏，这里是我们经常用来提交代码的地方，在comment输入框的上方有一个commit设置，或者在设置里进入，</p><p><code>Settings -&gt; Version Control-&gt; Commit</code>：</p><img src="/img/image-20210928112721237.png" style="zoom:67%;"><h4 id="①Reformat-code"><a href="#①Reformat-code" class="headerlink" title="①Reformat code"></a>①Reformat code</h4><p>格式化代码，这个建议勾选上，在提交时自动将代码格式化，防止平时的遗漏。</p><h4 id="②Rearrange-code"><a href="#②Rearrange-code" class="headerlink" title="②Rearrange code"></a>②Rearrange code</h4><p>这个选项的功能是在提交时将代码结构规范，将类中的成员变量定义移动到方法的上方去，当然一般来说是用不到的。</p><h4 id="③Optimize-imports"><a href="#③Optimize-imports" class="headerlink" title="③Optimize imports"></a>③Optimize imports</h4><p>去掉没有用到的import，建议勾选。</p><h4 id="④Analyze-code"><a href="#④Analyze-code" class="headerlink" title="④Analyze code"></a>④Analyze code</h4><p>检查代码中的warning和error，也没啥用，比较费时间，如果有把握提交的代码没有编译问题就可以去掉了(不过我为了保险起见还是打开了这个选项</p><h4 id="⑤Check-TODO"><a href="#⑤Check-TODO" class="headerlink" title="⑤Check TODO"></a>⑤Check TODO</h4><p>检查todo标记。</p><h4 id="⑥Cleanup"><a href="#⑥Cleanup" class="headerlink" title="⑥Cleanup"></a>⑥Cleanup</h4><p>// 未知功能，但是根据一些<a href="https://blog.csdn.net/weixin_48910529/article/details/119171822">别人的经验</a>来看，还是别用为好</p><h4 id="⑦Run-Tests"><a href="#⑦Run-Tests" class="headerlink" title="⑦Run Tests"></a>⑦Run Tests</h4><p>运行测试。</p><h4 id="⑧Update-copyright"><a href="#⑧Update-copyright" class="headerlink" title="⑧Update copyright"></a>⑧Update copyright</h4><p>// 暂时还没用过</p><h3 id="3-新建文件自动add"><a href="#3-新建文件自动add" class="headerlink" title="3.新建文件自动add"></a>3.新建文件自动add</h3><p><code>Settings -&gt; Version Control -&gt; Confirmation</code>：</p><p><img src="/img/image-20210928135302888.png"></p><p>选择Add silently即可在新建文件时自动add了。</p><h3 id="4-shelve"><a href="#4-shelve" class="headerlink" title="4.shelve"></a>4.shelve</h3><p>在idea左侧的commit栏中，有一个shelve选项，可以在changelist中选择任意数量的文件，然后选择shelve silently，</p><p>就可以将这些改变储存起来，类似于stash操作，然年在右侧的shelf栏中就会多出来你储存的更改，可以随时选择unshelve进行恢复(这里的恢复相当于stash的apply操作而不是pop，也就是说不会因为恢复而删除这个存储)，也可以重命名和删除等操作，总体来说比stash方便很多。</p><p><img src="/img/image-20210928150918644.png"></p><h3 id="5-Change-List"><a href="#5-Change-List" class="headerlink" title="5.Change List"></a>5.Change List</h3><p>其实有时候使用stash或者使用shelve来贮存更改，还是有时候不够实用，因为没法细腻精确地控制更改，尤其是在同一个文件中需要区分的情况。此时，changelist的功能就显得非常实用了。</p><p>在修改了的地方点击即可看到代码的变化，这里就能看到changelist，可以手动将这处更改添加到一个新的changelist中，所有的修改默认是在一个默认的changelist中的，即Default Changelist。</p><p><img src="/img/image-20210929135603293.png"></p><p>另一个要用到的地方是在左侧导航栏的commit中：</p><p><img src="/img/image-20210929140143223.png"></p><p>这里就可以看到所有的changelist了，还有一个小用处就是可以把不想提交的change隔离掉，比如这里我修改了很多pom配置，但是不能提交它们，就把它们都放到了一个changelist中，改名为ignore，顾名思义，又很方便。</p><p>右键某一个changelist中的文件时，还可以选择将其回滚或者移动到其他的changelist中。</p><p>提交代码的时候直接点击对应的changelist即可全选其中的所有的修改，不会影响其他的changelist，并且提交之后对应的changelist就会消失。</p><blockquote><p>养成使用changelist的习惯，再也不用担心同时做好几个任务会混乱了~</p></blockquote><h3 id="6-Annotate-With-git-Blame"><a href="#6-Annotate-With-git-Blame" class="headerlink" title="6.Annotate With git Blame"></a>6.Annotate With git Blame</h3><p>在文件内右键选择git或者在行号栏右键都可以找到这个选项，打开后，在行号栏会展示每一行最后的修改者，<del>可以用来确认是谁的bug</del>，还有对应的日期，很方便，然后再次勾选可以关闭：</p><p><img src="/img/image-20210929150837634.png"></p><h3 id="7-远端创建新分支本地切换分支时不显示"><a href="#7-远端创建新分支本地切换分支时不显示" class="headerlink" title="7.远端创建新分支本地切换分支时不显示"></a>7.远端创建新分支本地切换分支时不显示</h3><p><a href="https://blog.51cto.com/u_15345018/3653958">参考</a></p><p>执行一次git fetch即可显示。</p><h2 id="四、MVN篇"><a href="#四、MVN篇" class="headerlink" title="四、MVN篇"></a>四、MVN篇</h2><h3 id="1-maven配置文件和本地仓库配置"><a href="#1-maven配置文件和本地仓库配置" class="headerlink" title="1.maven配置文件和本地仓库配置"></a>1.maven配置文件和本地仓库配置</h3><p><code>Settings -&gt; Build,Execution,Deployment -&gt; Build Tools -&gt; Maven</code>：</p><p><img src="/img/image-20210930162301698.png"></p><p>这里的配置文件虽然看上去是可以覆盖自定义路径的，但是idea有时候有bug，会自己又改回去，所以建议还是直接修改他这个默认的settings.xml文件，然后将其中的本地仓库的配置修改为本地需要的路径，重新打开设置即可看到第二个仓库配置已经更新为了刚刚修改的配置了。</p><h3 id="2-执行maven脚本"><a href="#2-执行maven脚本" class="headerlink" title="2.执行maven脚本"></a>2.执行maven脚本</h3><p>在Run/Debug Configurations中，添加一个maven执行配置，</p><img src="/img/image-20210930161526701.png" style="zoom:67%;"><p>配置好Working Directory和Command line，这里就是maven的执行脚本，比如一般先执行clean再执行package。</p><p>有时候编译会出问题，可以添加一个只执行clean的，在编译之前先清空class文件，防止出现一些”找不到符号”之类的问题。</p><h3 id="3-maven-reimport后language-level变化"><a href="#3-maven-reimport后language-level变化" class="headerlink" title="3.maven reimport后language level变化"></a>3.maven reimport后language level变化</h3><blockquote><p>Module ‘xxx’ is imported from Maven. Any changes made in its configuration may be lost after reimporting</p></blockquote><p><img src="/img/language_level_mvn.png"></p><p>上述情况，pom中加入如下配置即可：</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!-- ensure jdk 1.8--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.maven.plugins<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>maven-compiler-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.8.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span><span class="token punctuation">&gt;</span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>source</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>target</span><span class="token punctuation">&gt;</span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>target</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>encoding</span><span class="token punctuation">&gt;</span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>encoding</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="五、调试篇"><a href="#五、调试篇" class="headerlink" title="五、调试篇"></a>五、调试篇</h2><h3 id="1-远程调试"><a href="#1-远程调试" class="headerlink" title="1.远程调试"></a>1.远程调试</h3><p>在Run/Debug Configurations中，添加一个Remote JVM Debug，并填写ip和调试端口：</p><p><img src="/img/image-20211015155455247.png"></p><p>然后在远程的启动参数增加下面生成的命令，启动远程的项目和idea的调试就可以远程调试了。</p><h3 id="2-各种断点"><a href="#2-各种断点" class="headerlink" title="2.各种断点"></a>2.各种断点</h3><p>①普通断点</p><p><img src="/img/image-20211018100708638.png"></p><p>②非启用状态的断点</p><p>右键断点，取消勾选<code>Enabled</code>即可保留断点的位置，但是将其设置为不启用的状态：</p><p><img src="/img/image-20211018100858431.png"></p><p>③不阻塞的断点</p><p>右键取消勾选<code>Suspend</code>,这样经过断点时不会阻塞线程：</p><p><img src="/img/image-20211018101043821.png"></p><p>④带条件的断点</p><p>在3.中详细说明：</p><p><img src="/img/image-20211018101204346.png"></p><p>⑤禁用的断点</p><p>在左侧任务栏中选择<code>Mute Breakpoints</code>,就可以将所有的断点禁用：</p><p><img src="/img/image-20211018101401990.png"></p><p>这样所有的断点位置保留，但是会变成灰色并且不阻塞线程：</p><p><img src="/img/image-20211018101529033.png"></p><p>⑥异常断点</p><p>这个断点的作用是，当进程遇到被设置的特定异常时，会停留在发生异常的那一行。设置方法是ctrl+shift+F8，然后点击添加一个断点，选择<code>Java Exception Breakpoints</code>,然后选择一个异常即可：</p><p><img src="/img/image-20211018135933154.png"></p><h3 id="3-断点条件设置"><a href="#3-断点条件设置" class="headerlink" title="3.断点条件设置"></a>3.断点条件设置</h3><p>断点有时在循环或者递归等情况下，调试到想要的步骤会比较麻烦和费事，可以使用断点的条件功能，在断点上打开设置，比如下面的例子：</p><p>现在想在100次的循环种调试第99次，手动调会很慢，况且这还是最简单的情况，</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">example</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>现在可以在循环内部打上断点，设置一个条件：</p><img src="/img/image-20211015160559840.png" style="zoom:67%;"><p>这样就可以只在i为99时生效了，一个F9就可以解决很麻烦的问题。当然这是一个很强大的功能，可以写复杂的表达式来灵活运用。</p><h3 id="4-断点线程设置"><a href="#4-断点线程设置" class="headerlink" title="4.断点线程设置"></a>4.断点线程设置</h3><p>断点上右键设置里，有一个Suspend项，后面有两个选项，分别是<code>All</code>、<code>Thread</code>,代表了阻塞所有线程和只阻塞当前线程，这样在多线程环境下可以根据情况避免阻塞所有线程。</p><h3 id="5-watches"><a href="#5-watches" class="headerlink" title="5.watches"></a>5.watches</h3><p>在调试时的variables中选择想要查看的变量右键选择<code>Add to Watches</code>,或者直接拖入右侧的watches框中，可以方便查看。</p><h3 id="6-evaluate计算表达式"><a href="#6-evaluate计算表达式" class="headerlink" title="6.evaluate计算表达式"></a>6.evaluate计算表达式</h3><p>右键选择一段代码，或者alt+F8，或者点击调试界面的计算器图标，可以独立于原本的代码进行一些表达式的计算，用来判断当前的状态或者查看变量或者预判后面的代码等。</p><p>注意：这里能计算的代码必须是当前调试到的位置状态上的(比如当前行之前还没声明的代码时不能计算的)。</p><h3 id="7-stream图形化工具"><a href="#7-stream图形化工具" class="headerlink" title="7.stream图形化工具"></a>7.stream图形化工具</h3><p>在调试stream时，可以对复杂的stream进行一个图形化展示，用来直观的查看stream的过程和结果：</p><p>调试到某个stream时，点击<code>evaluate</code>旁边的<code>Trace Current Stream Chain</code>即可，可以选择分开来看，也可以把所有操作合起来看</p><img src="/img/image-20211018114909599.png" style="zoom:50%;"><h3 id="8-强制抛异常"><a href="#8-强制抛异常" class="headerlink" title="8.强制抛异常"></a>8.强制抛异常</h3><p>在栈帧上右键可以选择<code>Throw Exception</code>，然后输入异常的表达式比如”new RuntimeException”即可。</p><h3 id="9-强制返回-自定义返回值"><a href="#9-强制返回-自定义返回值" class="headerlink" title="9.强制返回(自定义返回值)"></a>9.强制返回(自定义返回值)</h3><p>和强制抛异常类似，栈帧右键选择<code>Force Return</code>，如果是有返回值的方法，还需要输入一个表达式，即返回值。</p><h2 id="六、标记篇"><a href="#六、标记篇" class="headerlink" title="六、标记篇"></a>六、标记篇</h2><h3 id="1-Favorites"><a href="#1-Favorites" class="headerlink" title="1.Favorites"></a>1.Favorites</h3><p>这个相当于是浏览器的书签栏，使用方法：</p><p>右键tab标签，然后选择<code>add to favorites</code>添加所选的tab到收藏夹或者选择<code>add all tofavorites</code>添加当前打开的所有tab到收藏夹。<br>然后在关闭了想迅速找到收藏的tab时，点击左下角的<code>favorites</code>工具栏即可，并且支持对收藏夹进行改名、批量删除等。<br>另外，下面的<code>bookmark</code>和断点也是在这里都可以找到的。</p><h3 id="2-Bookmark和Mnemonic-Bookmark"><a href="#2-Bookmark和Mnemonic-Bookmark" class="headerlink" title="2.Bookmark和Mnemonic Bookmark"></a>2.Bookmark和Mnemonic Bookmark</h3><p>这个和favorite类似，区别是刚才的收藏夹的目标是tab，其实也就是类，而bookmark则更精细一点，目标是行，类似于断点。使用方法：</p><p>在需要标记的行的行号栏上右键选择<code>add bookmark</code>或者按F11即可添加书签。<br>再次点击可以选择进行编辑描述或者删除或者改为Mnemonic Bookmark：</p><p><img src="/img/image-20211009152846672.png"></p><p>这个书签的描述默认是这行代码，展示的时候是在点击左下角的<code>favorites</code>工具栏时，里面会列举每一个书签的描述，为了方便区分和查找可以编辑一下描述。</p><p>Mnemonic Bookmark是普通书签的一种，即在普通书签的基础上增加了一个可选的26个字符+10个数字的标识，每种不能重复。</p><h2 id="七、快捷键-todo"><a href="#七、快捷键-todo" class="headerlink" title="七、快捷键  // todo"></a>七、快捷键  // todo</h2><p>使用快捷键可以大大提高使用效率。</p><h2 id="1"><a href="#1" class="headerlink" title="1."></a>1.</h2><h2 id="八、其他"><a href="#八、其他" class="headerlink" title="八、其他"></a>八、其他</h2><h3 id="1-tomcat启动日志中文编码错误"><a href="#1-tomcat启动日志中文编码错误" class="headerlink" title="1.tomcat启动日志中文编码错误"></a>1.tomcat启动日志中文编码错误</h3><p>淇℃伅 应该是启动时看到最多的字眼了，可以修改配置来修复中文编码错误的问题，找到<code>logging.properties</code>配置文件：</p><pre class="line-numbers language-dir" data-language="dir"><code class="language-dir">%TOMCAT_HOME%\conf\logging.properties<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>修改以下键的值为GBK即可：</p><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token attr-name">1catalina.org.apache.juli.AsyncFileHandler.encoding</span> <span class="token punctuation">=</span> <span class="token attr-value">GBK</span><span class="token attr-name">java.util.logging.ConsoleHandler.encoding</span> <span class="token punctuation">=</span> <span class="token attr-value">GBK</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="2-修改idea的配置文件路径"><a href="#2-修改idea的配置文件路径" class="headerlink" title="2.修改idea的配置文件路径"></a>2.修改idea的配置文件路径</h3><blockquote><p>参考<a href="https://intellij-support.jetbrains.com/hc/en-us/articles/207240985-Changing-IDE-default-directories-used-for-config-plugins-and-caches-storage">官方说明</a></p></blockquote><p>idea默认的存储位置在C盘，如：</p><pre class="line-numbers language-dir" data-language="dir"><code class="language-dir">C:\Users\{userName}\AppData\Local\JetBrains\IntelliJIdea2021.2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>像我这种C盘分区分小了的，想要修改以腾出空间，可以对idea的配置进行修改。</p><p>将上面目录中的所有文件复制到想要迁移的新目录中,也可以不复制，直接新建目录：<font color="red">记为{custom_dir}</font>，然后修改对应的<code>IDE_HOME\bin\idea.properties</code>中的配置：</p><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token comment">#---------------------------------------------------------------------</span><span class="token comment"># Uncomment this option if you want to customize a path to the settings directory.</span><span class="token comment">#---------------------------------------------------------------------</span><span class="token attr-name">idea.config.path</span><span class="token punctuation">=</span><span class="token attr-value">{custom_dir}/settings_custom</span><span class="token comment">#---------------------------------------------------------------------</span><span class="token comment"># Uncomment this option if you want to customize a path to the caches directory.</span><span class="token comment">#---------------------------------------------------------------------</span><span class="token attr-name">idea.system.path</span><span class="token punctuation">=</span><span class="token attr-value">{custom_dir}/system_custom</span><span class="token comment">#---------------------------------------------------------------------</span><span class="token comment"># Uncomment this option if you want to customize a path to the user-installed plugins directory.</span><span class="token comment">#---------------------------------------------------------------------</span><span class="token attr-name">idea.plugins.path</span><span class="token punctuation">=</span><span class="token attr-value">{custom_dir}/plugins_custom</span><span class="token comment">#---------------------------------------------------------------------</span><span class="token comment"># Uncomment this option if you want to customize a path to the logs directory.</span><span class="token comment">#---------------------------------------------------------------------</span><span class="token attr-name">idea.log.path</span><span class="token punctuation">=</span><span class="token attr-value">{custom_dir}/log</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>打开idea等待更新缓存即可。</p>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
          <category> 分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分享 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IDEA编译找不到符号的常见解决方法</title>
      <link href="posts/e9adbdf0/"/>
      <url>posts/e9adbdf0/</url>
      
        <content type="html"><![CDATA[<h1 id="IDEA编译找不到符号的常见解决方法"><a href="#IDEA编译找不到符号的常见解决方法" class="headerlink" title="IDEA编译找不到符号的常见解决方法"></a>IDEA编译找不到符号的常见解决方法</h1><h2 id="1-清空target重新编译"><a href="#1-清空target重新编译" class="headerlink" title="1.清空target重新编译"></a>1.清空target重新编译</h2><p>在Project Structure -&gt; Modules设置中找到编译路径，将其中的class文件都删除掉，再重新编译</p><p><img src="/img/image-20210901190144197.png"></p><h2 id="2-⭐用maven脚本更方便地清空编译文件"><a href="#2-⭐用maven脚本更方便地清空编译文件" class="headerlink" title="2.⭐用maven脚本更方便地清空编译文件"></a>2.⭐用maven脚本更方便地清空编译文件</h2><p>在Run/Debug Configurations中添加一个maven脚本，设置工作目录为工程的根目录，命令行写<code>clean</code>即可。</p><img src="/img/image-20210901190449899.png" style="zoom: 67%;"><h2 id="3-清除缓存再重新编译"><a href="#3-清除缓存再重新编译" class="headerlink" title="3.清除缓存再重新编译"></a>3.清除缓存再重新编译</h2><p>上方导航栏 -&gt; File -&gt; invalidate caches：</p><p><img src="/img/image-20210901191009796.png"></p><h2 id="4-统一编码格式"><a href="#4-统一编码格式" class="headerlink" title="4.统一编码格式"></a>4.统一编码格式</h2><p>在设置 -&gt; Editor -&gt; File Encodings中，设置编码格式统一：</p><p><img src="/img/image-20210901191226473.png"></p><h2 id="5-否则"><a href="#5-否则" class="headerlink" title="5.否则"></a>5.否则</h2><p>那可能就是没拉最新的代码吧，或者没更新依赖，都试试基本就可以解决了。</p>]]></content>
      
      
      <categories>
          
          <category> bug </category>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> bug </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git在日常工作中的操作:stash、reset、reverse、rebase、patch</title>
      <link href="posts/44ee9398/"/>
      <url>posts/44ee9398/</url>
      
        <content type="html"><![CDATA[<h1 id="git在日常工作中的操作-stash、reset、reverse、rebase、patch"><a href="#git在日常工作中的操作-stash、reset、reverse、rebase、patch" class="headerlink" title="git在日常工作中的操作:stash、reset、reverse、rebase、patch"></a>git在日常工作中的操作:stash、reset、reverse、rebase、patch</h1><blockquote><p>到现在已经工作了一个月了，虽然说提交的代码量和pr屈指可数，但还是发现曾经学的git的基本clone、add、commit、pull、push操作不够用了。<br>因为涉及到分支、多任务代码混乱、错误提交回滚等，现学现用不是长久之计，将它们总结整合和记录下来吧~</p></blockquote><p>其实git还是有很多其他功能的，比如<code>charry pick</code>、<code>rebase</code>等，我还没有用到过，以后有机会补上。</p><h2 id="stash"><a href="#stash" class="headerlink" title="stash"></a>stash</h2><blockquote><p>使用场景：在一个开发任务还没有完成的时候，突然来了一个紧急bug任务要改代码。此时就会有两份修改，若要提交修改bug的代码，开发的未完成代码也会一起提交上去，那么怎么才能备份之前的半成品修改，恢复到一个干净状态来改bug呢？</p></blockquote><p>这种情况就可以使用到git的功能stash(储藏)了。<font color="red">前提是要储藏的修改还没有被commit，</font>也就是说储藏是针对于本地工作目录(working dir)和暂存区(index)的修改的。</p><h3 id="1-储藏"><a href="#1-储藏" class="headerlink" title="1.储藏"></a>1.储藏</h3><p><strong>命令行操作：</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> stash<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>建议stash的时候加上类似commit时的message用于记录信息，所以一般使用可以是这样：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> stash save <span class="token string">"message"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>IDEA操作：</strong></p><p>直接右键<code>git -&gt; stash changes</code>或者在导航栏处找到<code>stash changes</code>，</p><img src="/img/image-20210810141926061.png" style="zoom: 67%;"><p>然后：</p><img src="/img/image-20210810142453927.png" style="zoom: 80%;"><p>注意的是这个keep index选项，一般是不选的，它的意义是只储存工作目录的更改而不储存暂存区的更改，一般我记得idea设置了自动add的，所以一般都是在咋暂存区的，有特殊需要也可以根据实际情况选择。</p><h3 id="2-查看储存"><a href="#2-查看储存" class="headerlink" title="2.查看储存"></a>2.查看储存</h3><p><strong>命令行操作：</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> stash list<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>结果类似下面这样，上面是最新的，类似于栈的结构：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">stash@<span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span>: On <span class="token number">5.1</span>: test_stashstash@<span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">}</span>: On <span class="token number">5.1</span>: <span class="token builtin class-name">test</span>stash@<span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">}</span>: On <span class="token number">5.1</span>: selfCricle<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>IDEA操作：</strong></p><p>和第一步一样的地方，选择UnStash changes，出现如下界面：</p><img src="/img/image-20210810143721633.png" style="zoom: 80%;"><p>能看到stash的列表以及message。这里面有几个选项：</p><ul><li>view是查看选中的stash的详情，具体到哪个文件的哪个修改，和merge时一样。</li><li>drop是删除此条stash</li><li>clear是删除本仓库的所有stash</li><li>pop stash选项是类似于出栈操作，即恢复后将备份删除掉，不选的话就相当于只是应用更改，stash会仍然存在</li><li>reinstate index选项：如果不选的话这个stash是恢复到工作目录的，选了就相当于是又给这些修改执行了一次add</li></ul><h3 id="3-恢复"><a href="#3-恢复" class="headerlink" title="3.恢复"></a>3.恢复</h3><p><strong>命令行操作：</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 查看stash list时可以发现，每个stash都有一个序号格式为stash@{num}，建议恢复时按照此格式：</span><span class="token function">git</span> stash pop stash@<span class="token punctuation">{</span>num<span class="token punctuation">}</span><span class="token function">git</span> stash apply stash@<span class="token punctuation">{</span>num<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>当然了，IDEA里的图形化界面方便太多了，具体使用见第二节已经写过了</p><h3 id="4-删除"><a href="#4-删除" class="headerlink" title="4.删除"></a>4.删除</h3><p><strong>命令行操作：</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> stash drop stash@<span class="token punctuation">{</span>num<span class="token punctuation">}</span><span class="token function">git</span> stash <span class="token function">clear</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="reset"><a href="#reset" class="headerlink" title="reset"></a>reset</h2><blockquote><p>使用场景：经常有人提交几个模块的代码pr，一些已经合并了一些还没合，在这期间我如果拉了代码就很可能产生依赖缺失等问题，但我等不及他合并就要本地先能编译起来，此时就需要回滚操作了，reset就可以将本地的代码和任意一次历史提交同步，我愿称之为神器~</p></blockquote><p><strong>IDEA操作：</strong></p><img src="/img/image-20210810151631563.png" style="zoom:80%;"><p>这里的reset type有三种，都是恢复到某一次commit，但是对于本地的修改范围不同：</p><ul><li>mixed：只恢复暂存区不恢复工作目录</li><li>soft：虽然恢复到指定的commit版本，但是不恢复本地工作目录和暂存区</li><li>hard：两者都恢复，也就是说在这个版本之后的本地修改都会被清除</li></ul><p>(我自己这种情况，没改什么东西，就直接hard了简单粗暴)</p><p>另外，To Commit默认是HEAD即最新的commit，也可以填上需要恢复到的commit的前8位SHA即commit_id。</p><p><strong>命令行操作：</strong></p><p>idea太好用了，所以命令行还没看过，以后有需要补上。</p><h2 id="reverse"><a href="#reverse" class="headerlink" title="reverse"></a>reverse</h2><blockquote><p>使用场景：commit有问题或者commit错了，需要撤回(虽然不一定是真的撤回了)</p></blockquote><p>在IDEA或者sourcetree都可以很方便地查看和执行撤回操作。在IDEA的git log界面或者sourcetree的history界面，选择一个commit，右键选择<code>reverse commit</code>或者<code>revert commit</code>名字不一样其实是一样的。</p><p>这个操作的原理是提交一次新的commit来将需要reverse的那个commit里的修改恢复掉。比较适合于已经不小心push了的commit，当然多提交一次不好看。</p><p>也可以使用命令行：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> revert <span class="token operator">&lt;</span>commit_id<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="undo"><a href="#undo" class="headerlink" title="undo"></a>undo</h3><p><font color="red">而如果要撤回的commit还没有push，可以使用IDEA的undo commit.</font></p><p>undo commit的原理是清除掉本地的commit记录，然后恢复这次commit所修改的内容。</p><p><strong>两种操作回滚commit后都要push才能在远端生效。</strong></p><h2 id="rebase"><a href="#rebase" class="headerlink" title="rebase"></a>rebase</h2><p>还没有用到过，算是一个todo先留着。</p><h2 id="patch"><a href="#patch" class="headerlink" title="patch"></a>patch</h2><blockquote><p>应用场景：生成一个patch补丁文件，记录了一些修改信息，可以用于给别人方便使用或者自己备份。</p></blockquote><h3 id="生成patch"><a href="#生成patch" class="headerlink" title="生成patch"></a>生成patch</h3><p><strong>命令行：</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 生成从当前commit往前n个commit的patch文件，有几个commit就会生成几个.patch文件，并且默认文件名从最早提交的commit 0001编号</span><span class="token function">git</span> format-patch -n<span class="token comment"># 生成从指定commit_id(包含该commit)往前n个commit的patch文件</span><span class="token function">git</span> format-patch commit_id -n<span class="token comment"># 单独生成某个commit的patch</span><span class="token function">git</span> format-patch commit_id -1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>IDEA或者sourcetree：</strong></p><p><img src="/img/image-20210810162347763.png"></p><h3 id="使用patch"><a href="#使用patch" class="headerlink" title="使用patch"></a>使用patch</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 检查patch文件</span><span class="token function">git</span> apply --stat xxx.patch<span class="token comment"># 检查能否应用成功</span><span class="token function">git</span> apply --check xxx.patch<span class="token comment"># 应用patch</span><span class="token function">git</span> apply xxx.patch<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java8特性之Optional</title>
      <link href="posts/d5c1462e/"/>
      <url>posts/d5c1462e/</url>
      
        <content type="html"><![CDATA[<p>java8特性之Optional</p><blockquote><p>Optional类主要是为了解决空指针异常，不需要在代码中显示地进行判空等</p></blockquote><h2 id="1-Optional的创建"><a href="#1-Optional的创建" class="headerlink" title="1.Optional的创建"></a>1.Optional的创建</h2><p>Optional类提供了三种静态方法：</p><h3 id="1-empty"><a href="#1-empty" class="headerlink" title="1.empty()"></a>1.empty()</h3><p>创建一个空的Optional：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> empty <span class="token operator">=</span> <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-of"><a href="#2-of" class="headerlink" title="2.of()"></a>2.of()</h3><p>为非null的值创建一个Optional,特殊地，参数为null时会抛出NullPointerException:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> optional <span class="token operator">=</span> <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 将造成空指针异常</span><span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> exception <span class="token operator">=</span> <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="3-ofNullable"><a href="#3-ofNullable" class="headerlink" title="3.ofNullable()"></a>3.ofNullable()</h3><p>创建一个可为null的Optional:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 将返回一个empty的Optional对象</span><span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> optional <span class="token operator">=</span> <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="2-Optional的判空"><a href="#2-Optional的判空" class="headerlink" title="2.Optional的判空"></a>2.Optional的判空</h2><p>isPresent()方法，optional有值则返回true，为空则返回false：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> optional <span class="token operator">=</span> <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> optional1 <span class="token operator">=</span> <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>optional<span class="token punctuation">.</span><span class="token function">isPresent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>optional1<span class="token punctuation">.</span><span class="token function">isPresent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>结果是：true false</p><h2 id="3-Optional的转换"><a href="#3-Optional的转换" class="headerlink" title="3.Optional的转换"></a>3.Optional的转换</h2><h3 id="1-filter-Predicate-lt-super-T-gt-predicate"><a href="#1-filter-Predicate-lt-super-T-gt-predicate" class="headerlink" title="1.filter(Predicate<? super T> predicate)"></a>1.filter(Predicate&lt;? super T&gt; predicate)</h3><p>传入一个predicate条件，如果原optional的值为空或者满足predicate条件，则返回原optional，非空且不满足predicate则返回空optional，例如：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> o <span class="token operator">=</span> <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>s <span class="token operator">-&gt;</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> o1 <span class="token operator">=</span> <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>s <span class="token operator">-&gt;</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> o2 <span class="token operator">=</span> <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"111"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>s <span class="token operator">-&gt;</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>o1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>o2<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果是：<br>Optional.empty<br>Optional.empty<br>Optional[111]</p><h3 id="2-map-Function-lt-super-T-extends-U-gt-mapper"><a href="#2-map-Function-lt-super-T-extends-U-gt-mapper" class="headerlink" title="2. map(Function<? super T, ? extends U> mapper)"></a>2. map(Function&lt;? super T, ? extends U&gt; mapper)</h3><p>传入一个操作函数，若原optional为空，则直接返回一个空optional，否则返回一个Optional.ofNullable(mapper.apply(value))，即对值进行操作之后的新optional并且允许为空：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>a <span class="token operator">-&gt;</span> a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>a <span class="token operator">-&gt;</span> a <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>a <span class="token operator">-&gt;</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>结果是：<br>Optional.empty<br>Optional[2]<br>Optional.empty</p><h3 id="3-flatMap-Function-lt-super-T-Optional-lt-U-gt-gt-mapper"><a href="#3-flatMap-Function-lt-super-T-Optional-lt-U-gt-gt-mapper" class="headerlink" title="3.flatMap(Function<? super T, Optional<U>> mapper)"></a>3.flatMap(Function&lt;? super T, Optional&lt;U&gt;&gt; mapper)</h3><p>与map的区别是flatMap的参数mapper的返回值必须是optional，例如：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span>a <span class="token operator">-&gt;</span> <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>a <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>结果是：Optional[2]</p><h3 id="4-ifPresent-Consumer-lt-super-T-gt-consumer"><a href="#4-ifPresent-Consumer-lt-super-T-gt-consumer" class="headerlink" title="4.ifPresent(Consumer<? super T> consumer)"></a>4.ifPresent(Consumer&lt;? super T&gt; consumer)</h3><p>传入一个Consumer参数，如果值存在，则执行之，无返回值，例如:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ifPresent</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ifPresent</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>结果是：1</p><h2 id="4-Optional值的获取"><a href="#4-Optional值的获取" class="headerlink" title="4.Optional值的获取"></a>4.Optional值的获取</h2><h3 id="1-get"><a href="#1-get" class="headerlink" title="1.get()"></a>1.get()</h3><p>如果optional有值则返回值，为空则抛出NoSuchElementException</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Integer</span> i <span class="token operator">=</span> <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 此方法将抛出异常</span><span class="token class-name">Object</span> exception <span class="token operator">=</span> <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="2-orElse-T-other"><a href="#2-orElse-T-other" class="headerlink" title="2.orElse(T other)"></a>2.orElse(T other)</h3><p>如果optional有值则返回值，为空则返回传入的参数，例如：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>结果是：12</p><h3 id="3-orElseGet-Supplier-lt-extends-T-gt-other"><a href="#3-orElseGet-Supplier-lt-extends-T-gt-other" class="headerlink" title="3.orElseGet(Supplier<? extends T> other)"></a>3.orElseGet(Supplier&lt;? extends T&gt; other)</h3><p>与orElse的区别是传入的参数为一个Supplier接口的实现来生成一个值，例如：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orElseGet</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token operator">::</span><span class="token function">random</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orElseGet</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token operator">::</span><span class="token function">random</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>结果是:1.0 0.832628831775226(随机数)</p><h3 id="4-orElseThrow-Supplier-lt-extends-X-gt-exceptionSupplier"><a href="#4-orElseThrow-Supplier-lt-extends-X-gt-exceptionSupplier" class="headerlink" title="4.orElseThrow(Supplier<? extends X> exceptionSupplier)"></a>4.orElseThrow(Supplier&lt;? extends X&gt; exceptionSupplier)</h3><p>如果optional有值则返回值，为空则抛出异常</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orElseThrow</span><span class="token punctuation">(</span><span class="token class-name">RuntimeException</span><span class="token operator">::</span><span class="token keyword">new</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 此方法将抛出异常</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orElseThrow</span><span class="token punctuation">(</span><span class="token class-name">RuntimeException</span><span class="token operator">::</span><span class="token keyword">new</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java8特性之Stream</title>
      <link href="posts/1e79e935/"/>
      <url>posts/1e79e935/</url>
      
        <content type="html"><![CDATA[<h1 id="java8特性之stream"><a href="#java8特性之stream" class="headerlink" title="java8特性之stream"></a>java8特性之stream</h1><blockquote><p>Stream 是用函数式编程方式在集合类上进行复杂操作的工具，其集成了Java 8中的众多新特性之一的聚合操作，开发者可以更容易地使用Lambda表达式，并且更方便地实现对集合的查找、遍历、过滤以及常见计算等操作。</p></blockquote><h2 id="1-Stream的方法"><a href="#1-Stream的方法" class="headerlink" title="1.Stream的方法"></a>1.Stream的方法</h2><p>可以分为三类：</p><ol><li>创建Stream:通过stream()方法，取得集合对象的数据集。</li><li>Intermediate:通过一系列中间（Intermediate）方法，对数据集进行过滤、检索等数据集的再次处理。</li><li>Terminal通过最终（terminal）方法完成对数据集中元素的处理。</li></ol><blockquote><p>在一次聚合操作中，可以有多个Intermediate，但是有且只有一个Terminal。在对一个Stream可以进行多次转换操作，并不是每次都对Stream的每个元素执行转换。并不像for循环中，循环N次，其时间复杂度就是N。转换操作是lazy(惰性求值)的，只有在Terminal操作执行时，才会一次性执行。可以这么认为，Stream 里有个操作函数的集合，每次转换操作就是把转换函数放入这个集合中，在 Terminal 操作的时候循环 Stream 对应的集合，然后对每个元素执行所有的函数。</p></blockquote><p>本文将按照以下三大类进行总结<code>Intermediate</code>、<code>Terminal</code>和<code>Short-circuiting</code>：</p><ul><li>Intermediate：map (mapToInt, flatMap 等)、 filter、 distinct、 sorted、 peek、 skip、 parallel、 sequential、 unordered</li><li>Terminal：forEach、 forEachOrdered、 toArray、 reduce、 collect、 min、 max、 count、iterator</li><li>Short-circuiting：anyMatch、 allMatch、 noneMatch、 findFirst、 findAny、 limit</li></ul><h2 id="2-Stream的创建方法"><a href="#2-Stream的创建方法" class="headerlink" title="2.Stream的创建方法"></a>2.Stream的创建方法</h2><h3 id="1-Stream-of-T…-values-和Stream-of-T-t"><a href="#1-Stream-of-T…-values-和Stream-of-T-t" class="headerlink" title="1.Stream.of(T… values)和Stream.of(T t)"></a>1.Stream.of(T… values)和Stream.of(T t)</h3><p>获得的Stream长度有限且为传入的元素个数.例如：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> stream <span class="token operator">=</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">,</span><span class="token string">"2"</span><span class="token punctuation">,</span><span class="token string">"3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-Stream-generate-Supplier-lt-T-gt-s"><a href="#2-Stream-generate-Supplier-lt-T-gt-s" class="headerlink" title="2.Stream.generate(Supplier<T> s)"></a>2.Stream.generate(Supplier&lt;T&gt; s)</h3><p>返回一个无限长度的Stream,其元素由Supplier接口的提供。在Supplier是一个函数接口，只封装了一个get()方法,需要配合终止方法使用.例如：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Double</span><span class="token punctuation">&gt;</span></span> stream <span class="token operator">=</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">generate</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token operator">::</span><span class="token function">random</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-Stream-iterate-T-seed-UnaryOperator-lt-T-gt-f"><a href="#3-Stream-iterate-T-seed-UnaryOperator-lt-T-gt-f" class="headerlink" title="3.Stream.iterate(T seed, UnaryOperator<T> f)"></a>3.Stream.iterate(T seed, UnaryOperator&lt;T&gt; f)</h3><p>同样是无限长度的，传入的第一个参数为种子seed，也是stream中的第一个元素，第二个元素是由第一个元素通过迭代函数f产生，然后第三个由第二个产生，以此类推，例如：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> stream <span class="token operator">=</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">iterate</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> n <span class="token operator">-&gt;</span> <span class="token number">2</span> <span class="token operator">*</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>stream<span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">print</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>结果是：2 4 8 16 32 64 128 256 512 1024</p><h3 id="4-Stream-empty"><a href="#4-Stream-empty" class="headerlink" title="4.Stream.empty()"></a>4.Stream.empty()</h3><p>empty方法返回一个空的顺序Stream</p><h3 id="5-集合获取Stream的方法"><a href="#5-集合获取Stream的方法" class="headerlink" title="5.集合获取Stream的方法"></a>5.集合获取Stream的方法</h3><p>在Collection接口中，定义了一个默认方法stream()用来获取集合对象的stream，例如：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> stream <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="6-数组获取Stream的方法"><a href="#6-数组获取Stream的方法" class="headerlink" title="6.数组获取Stream的方法"></a>6.数组获取Stream的方法</h3><p>利用Arrays类的静态方法Arrays.stream(T[] array)，还提供了除对象泛型以外的基本类型的重载方法，例如：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ints <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token class-name">IntStream</span> stream <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>ints<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="7-其他方法"><a href="#7-其他方法" class="headerlink" title="7.其他方法"></a>7.其他方法</h3><ul><li>Random.ints()</li><li>BitSet.stream()</li><li>Pattern.splitAsStream(java.lang.CharSequence)</li><li>JarFile.stream()</li></ul><h2 id="3-Intermediate"><a href="#3-Intermediate" class="headerlink" title="3.Intermediate"></a>3.Intermediate</h2><blockquote><p>本质上是将源Stream转换为一个新的Stream</p></blockquote><h3 id="1-concat-Stream-lt-extends-T-gt-a-Stream-lt-extends-T-gt-b"><a href="#1-concat-Stream-lt-extends-T-gt-a-Stream-lt-extends-T-gt-b" class="headerlink" title="1.concat(Stream<? extends T> a, Stream<? extends T> b)"></a>1.concat(Stream&lt;? extends T&gt; a, Stream&lt;? extends T&gt; b)</h3><p>Stream的静态方法concat，将两个Stream连接在一起，合成一个Stream。若两个输入的Stream都时排序的，则新Stream也是排序的；若输入的Stream中任何一个是并行的，则新的Stream也是并行的；若关闭新的Stream时，原两个输入的Stream都将执行关闭处理。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> stream1 <span class="token operator">=</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> stream2 <span class="token operator">=</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>stream1<span class="token punctuation">,</span> stream2<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>结果是：4</p><h3 id="2-distinct"><a href="#2-distinct" class="headerlink" title="2.distinct()"></a>2.distinct()</h3><p>根据元素的equals和hashcode方法去重</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">distinct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">print</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>结果是：12345</p><h3 id="3-filter-Predicate-lt-super-T-gt-predicate"><a href="#3-filter-Predicate-lt-super-T-gt-predicate" class="headerlink" title="3.filter(Predicate<? super T> predicate)"></a>3.filter(Predicate&lt;? super T&gt; predicate)</h3><p>根据传入的predicate参数进行过滤，参考<a href="http://gaattc.life/posts/b6aaffba/">jdk8特性之Predicate-stream</a></p><h3 id="4-map-Function-lt-super-T-extends-R-gt-mapper"><a href="#4-map-Function-lt-super-T-extends-R-gt-mapper" class="headerlink" title="4.map(Function<? super T, ? extends R> mapper)"></a>4.map(Function&lt;? super T, ? extends R&gt; mapper)</h3><p>可以根据传入的lambda表达式将元素转换为任意类型和数值，并提供了几个方便的方法mapToDouble，mapToInt，mapToLong</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token string">"c"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token operator">::</span><span class="token function">toUpperCase</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">print</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>结果是：ABC</p><h3 id="5-flatMap-Function-lt-super-T-extends-Stream-lt-extends-R-gt-gt-mapper"><a href="#5-flatMap-Function-lt-super-T-extends-Stream-lt-extends-R-gt-gt-mapper" class="headerlink" title="5.flatMap(Function<? super T, ? extends Stream<? extends R>> mapper)"></a>5.flatMap(Function&lt;? super T, ? extends Stream&lt;? extends R&gt;&gt; mapper)</h3><p>返回一个流，该流由通过将提供的映射函数应用于每个元素而生成的映射流的内容替换此流的每个元素的结果组成。 每个映射流在其内容放入该流后关闭，如果映射流为null ，则使用空流代替。Function的返回值需要是一个Stream。</p><p>同样提供了几个方便的方法flatMapToInt，flatMapToLong和flatMapToDouble</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token string">"c"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span>s <span class="token operator">-&gt;</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>结果是：ABC</p><h3 id="6-peek-Consumer-lt-super-T-gt-action"><a href="#6-peek-Consumer-lt-super-T-gt-action" class="headerlink" title="6.peek(Consumer<? super T> action)"></a>6.peek(Consumer&lt;? super T&gt; action)</h3><p>生成一个包含原Stream的所有元素的新Stream，传入一个消费函数（Consumer实例），新Stream每个元素被消费的时候都会<strong>优先</strong>执行给定的消费函数，例如：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token string">"c"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">print</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token operator">::</span><span class="token function">toUpperCase</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">print</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>结果是：aAbBcC</p><blockquote><p>注意：peek方法主要是用来对流的元素进行非干扰操作的，即调试打印之类，最好不要对元素进行修改等干扰操作。</p></blockquote><h3 id="7-skip-long-n"><a href="#7-skip-long-n" class="headerlink" title="7.skip(long n)"></a>7.skip(long n)</h3><p>跳过Stream中的前N个元素，返回剩下的元素所组成的新Stream，如果元素个数≤n，则返回一个空stream</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token string">"c"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">skip</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>结果是：c</p><h3 id="8-sorted-和sorted-Comparator-lt-super-T-gt-comparator"><a href="#8-sorted-和sorted-Comparator-lt-super-T-gt-comparator" class="headerlink" title="8.sorted()和sorted(Comparator<? super T> comparator)"></a>8.sorted()和sorted(Comparator&lt;? super T&gt; comparator)</h3><p>对stream中元素进行排序，若没有传入comparator则按自然顺序(natural order)</p><p>例如：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"111"</span><span class="token punctuation">,</span> <span class="token string">"1"</span><span class="token punctuation">,</span> <span class="token string">"11"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"111"</span><span class="token punctuation">,</span> <span class="token string">"1"</span><span class="token punctuation">,</span> <span class="token string">"11"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token class-name">Comparator</span><span class="token punctuation">.</span><span class="token function">comparingInt</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token operator">::</span><span class="token function">length</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>结果都是：1 11 111</p><h2 id="Terminal"><a href="#Terminal" class="headerlink" title="Terminal"></a>Terminal</h2><h3 id="1-collect-Collector-lt-super-T-A-R-gt-collector"><a href="#1-collect-Collector-lt-super-T-A-R-gt-collector" class="headerlink" title="1.collect(Collector<? super T, A, R> collector)"></a>1.collect(Collector&lt;? super T, A, R&gt; collector)</h3><p>传入一个收集器，将stream中的元素收集到集合或其他结果中。<br>①可以利用Collectors提供的静态方法转成集合：</p><p><img src="/img/image-20210728134512331.png"></p><p>例如：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">TreeSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> treeSet <span class="token operator">=</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toCollection</span><span class="token punctuation">(</span><span class="token class-name">TreeSet</span><span class="token operator">::</span><span class="token keyword">new</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> arrayList <span class="token operator">=</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toCollection</span><span class="token punctuation">(</span><span class="token class-name">ArrayList</span><span class="token operator">::</span><span class="token keyword">new</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Map</span><span class="token operator">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> map <span class="token operator">=</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">,</span> <span class="token string">"11"</span><span class="token punctuation">,</span> <span class="token string">"111"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toMap</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token operator">::</span><span class="token function">length</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token operator">::</span><span class="token function">getBytes</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>②可以利用Collectors提供的静态方法转成特定值：</p><p><code>averagingDouble</code>:求平均值，Stream的元素类型为double<br><code>averagingInt</code>:求平均值，Stream的元素类型为int<br><code>averagingLong</code>:求平均值，Stream的元素类型为long<br><code>counting</code>:Stream的元素个数<br><code>maxBy</code>:在指定条件下的，Stream的最大元素<br><code>minBy</code>:在指定条件下的，Stream的最小元素<br><code>reducing</code>: reduce操作<br><code>summarizingDouble</code>:统计Stream的数据(double)状态，其中包括count，min，max，sum和平均。<br><code>summarizingInt</code>:统计Stream的数据(int)状态，其中包括count，min，max，sum和平均。<br><code>summarizingLong</code>:统计Stream的数据(long)状态，其中包括count，min，max，sum和平均。<br><code>summingDouble</code>:求和，Stream的元素类型为double<br><code>summingInt</code>:求和，Stream的元素类型为int<br><code>summingLong</code>:求和，Stream的元素类型为long</p><p>例如：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> collect <span class="token operator">=</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">maxBy</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token operator">::</span><span class="token function">compare</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Double</span> avg <span class="token operator">=</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">averagingInt</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token operator">::</span><span class="token function">intValue</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Long</span> count <span class="token operator">=</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">counting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">IntSummaryStatistics</span> statistics <span class="token operator">=</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">summarizingInt</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token operator">::</span><span class="token function">intValue</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Integer</span> sum <span class="token operator">=</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">summingInt</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token operator">::</span><span class="token function">intValue</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>③可以利用Collectors提供的静态方法将stream分割和分组：</p><p>groupingBy()和partitioningBy()方法，用法很相似，返回值类型也都是map，但是区别是后者只能根据条件分为两组true与false，而前者可以根据条件分为很多组，例如：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Boolean</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> partitioning <span class="token operator">=</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">partitioningBy</span><span class="token punctuation">(</span>n <span class="token operator">-&gt;</span> n <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> grouping <span class="token operator">=</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">groupingBy</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token operator">::</span><span class="token function">hashCode</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>partitioning<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>grouping<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>结果是：<br>{false=[1], true=[2, 3]}<br>{1=[1], 2=[2], 3=[3]}</p><p>④可以利用Collectors提供的静态方法将字符串合并并格式化：</p><p>可以选择性加入分隔符以及前缀后缀，例如：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> collect <span class="token operator">=</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">,</span> <span class="token string">"2"</span><span class="token punctuation">,</span> <span class="token string">"3"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">joining</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">,</span> <span class="token string">"&lt;"</span><span class="token punctuation">,</span> <span class="token string">"&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> collect1 <span class="token operator">=</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">,</span> <span class="token string">"2"</span><span class="token punctuation">,</span> <span class="token string">"3"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">joining</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> collect2 <span class="token operator">=</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">,</span> <span class="token string">"2"</span><span class="token punctuation">,</span> <span class="token string">"3"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">joining</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>collect<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>collect1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>collect2<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果是：<br>&lt;1-2-3&gt;<br>1-2-3<br>123</p><h3 id="2-count"><a href="#2-count" class="headerlink" title="2.count()"></a>2.count()</h3><p>返回stream中元素的个数，例如：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>结果是：3</p><h3 id="3-forEach-Consumer-lt-super-T-gt-action-和-forEachOrdered-Consumer-lt-super-T-gt-action"><a href="#3-forEach-Consumer-lt-super-T-gt-action-和-forEachOrdered-Consumer-lt-super-T-gt-action" class="headerlink" title="3. forEach(Consumer<? super T> action)和 forEachOrdered(Consumer<? super T> action)"></a>3. forEach(Consumer&lt;? super T&gt; action)和 forEachOrdered(Consumer&lt;? super T&gt; action)</h3><p>对stream中元素进行遍历，区别是后者的执行顺序一定是按照插入的顺序的。</p><p>例如：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">print</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>结果是：123</p><h3 id="4-max-和min"><a href="#4-max-和min" class="headerlink" title="4.max()和min()"></a>4.max()和min()</h3><p>根据传入的比较器寻找stream中的最值，返回类型为Optional,例如:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> max <span class="token operator">=</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token class-name">Comparator</span><span class="token punctuation">.</span><span class="token function">comparingInt</span><span class="token punctuation">(</span>a <span class="token operator">-&gt;</span> a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> min <span class="token operator">=</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token class-name">Comparator</span><span class="token punctuation">.</span><span class="token function">comparingInt</span><span class="token punctuation">(</span>a <span class="token operator">-&gt;</span> a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>max<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>min<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>结果是：31</p><h3 id="5-reduce"><a href="#5-reduce" class="headerlink" title="5.reduce()"></a>5.reduce()</h3><p>介绍reduce方法的两个重载：</p><ul><li>Optional&lt;T&gt; reduce(BinaryOperator&lt;T&gt; accumulator);</li><li>T reduce(T identity, BinaryOperator&lt;T&gt; accumulator);</li></ul><p>第一种：参数为一个累加器accumulator，返回类型为Optional。其需要用到两个参数进行计算，第一次计算的第一个参数为stream的第一个元素，第二个参数为stream的第二个元素，此后，累加器的计算结果为第一个参数，stream中的下一个元素为第二个参数，迭代计算直到stream元素耗尽。</p><p>第二种：参数为一个对象identity和一个累加器accumulator，返回类型为第一个参数的类型。与第一种重载不同的是，它的第一次计算的第一个参数为identity，第二个参数为stream的第一个参数，后续与第一种重载相同。特殊地，当stream为空时，直接返回identity。</p><p>例如：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> reduce <span class="token operator">=</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token operator">::</span><span class="token function">sum</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Integer</span> reduce1 <span class="token operator">=</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token operator">::</span><span class="token function">sum</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>reduce<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>reduce1<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>结果是：67</p><h2 id="Short-circuiting"><a href="#Short-circuiting" class="headerlink" title="Short-circuiting"></a>Short-circuiting</h2><h3 id="1-anyMatch、-allMatch、-noneMatch"><a href="#1-anyMatch、-allMatch、-noneMatch" class="headerlink" title="1.anyMatch、 allMatch、 noneMatch"></a>1.anyMatch、 allMatch、 noneMatch</h3><p>参考<a href="http://gaattc.life/posts/b6aaffba/">jdk8特性之Predicate-stream</a></p><h3 id="2-findAny-和findFirst"><a href="#2-findAny-和findFirst" class="headerlink" title="2. findAny()和findFirst()"></a>2. findAny()和findFirst()</h3><p>findAny()返回包含stream中任一元素的Optional，特殊地，空stream会返回一个空的Optional，非并行调用默认返回第一个元素的Optional<br>findFirst()返回stream中的第一个元素，特殊地，空stream会返回一个空的Optional，如果stream没有排序，返回任意一个元素的Optional</p><p>例如：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> any <span class="token operator">=</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">findAny</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> first <span class="token operator">=</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">findFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> empty <span class="token operator">=</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">findAny</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>any<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>first<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>empty<span class="token punctuation">.</span><span class="token function">isPresent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果是：11false</p><h3 id="3-limit-long-maxSize"><a href="#3-limit-long-maxSize" class="headerlink" title="3. limit(long maxSize)"></a>3. limit(long maxSize)</h3><p>如果原Stream的元素个数大于maxSize，将截取原Stream的前maxSize个元素；如果原Stream的元素个数小于或等于maxSize，将截取原Stream中的所有元素。</p><p>返回值仍是stream。例如：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">print</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">print</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>结果是：12123</p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java8特性之Predicate&amp;Stream</title>
      <link href="posts/b6aaffba/"/>
      <url>posts/b6aaffba/</url>
      
        <content type="html"><![CDATA[<h1 id="java8特性之Predicate-amp-Stream"><a href="#java8特性之Predicate-amp-Stream" class="headerlink" title="java8特性之Predicate&amp;Stream"></a>java8特性之Predicate&amp;Stream</h1><h2 id="1-java-util-function-Predicate"><a href="#1-java-util-function-Predicate" class="headerlink" title="1.java.util.function.Predicate"></a>1.java.util.function.Predicate</h2><p>接口源码：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@FunctionalInterface</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Predicate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    <span class="token comment">/**     * 具体过滤操作 需要被子类实现.     * 用来处理参数T是否满足要求,可以理解为 条件A     */</span>    <span class="token keyword">boolean</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token class-name">T</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 调用当前Predicate的test方法之后再去调用other的test方法,相当于进行两次判断     * 可理解为 条件A &amp;&amp; 条件B     */</span>    <span class="token keyword">default</span> <span class="token class-name">Predicate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">and</span><span class="token punctuation">(</span><span class="token class-name">Predicate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> other<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>other<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>t<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token function">test</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> other<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 对当前判断进行"!"操作,即取非操作，可理解为 ! 条件A     */</span>    <span class="token keyword">default</span> <span class="token class-name">Predicate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">negate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>t<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token operator">!</span><span class="token function">test</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 对当前判断进行"||"操作,即取或操作,可以理解为 条件A ||条件B     */</span>    <span class="token keyword">default</span> <span class="token class-name">Predicate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">or</span><span class="token punctuation">(</span><span class="token class-name">Predicate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> other<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>other<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>t<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token function">test</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span> <span class="token operator">||</span> other<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 对当前操作进行"="操作,即取等操作,可以理解为 A == B     */</span>    <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">Predicate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">isEqual</span><span class="token punctuation">(</span><span class="token class-name">Object</span> targetRef<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">==</span> targetRef<span class="token punctuation">)</span>                <span class="token operator">?</span> <span class="token class-name">Objects</span><span class="token operator">::</span><span class="token function">isNull</span>                <span class="token operator">:</span> object <span class="token operator">-&gt;</span> targetRef<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-Predicate-lambda基本用法"><a href="#2-Predicate-lambda基本用法" class="headerlink" title="2.Predicate+lambda基本用法"></a>2.Predicate+lambda基本用法</h2><p>①最简单的integer测试，设置条件为大于零，以下两个assert均通过：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testWithLambda</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">Predicate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> predicate <span class="token operator">=</span> i <span class="token operator">-&gt;</span> i <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">assertFalse</span><span class="token punctuation">(</span>predicate<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">assertTrue</span><span class="token punctuation">(</span>predicate<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>②测试and()方法，增加条件小于5，以下两个assert均通过：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testAnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">Predicate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> predicate <span class="token operator">=</span> i <span class="token operator">-&gt;</span> i <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">;</span>    predicate <span class="token operator">=</span> predicate<span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span>i <span class="token operator">-&gt;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">assertFalse</span><span class="token punctuation">(</span>predicate<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">assertTrue</span><span class="token punctuation">(</span>predicate<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>③测试or()方法，条件为小于零或可以被二整除，以下两个assert均通过：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testOr</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">Predicate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> predicate <span class="token operator">=</span> i <span class="token operator">-&gt;</span> i <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">;</span>    predicate <span class="token operator">=</span> predicate<span class="token punctuation">.</span><span class="token function">or</span><span class="token punctuation">(</span>i <span class="token operator">-&gt;</span> i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">assertFalse</span><span class="token punctuation">(</span>predicate<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">assertTrue</span><span class="token punctuation">(</span>predicate<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>④and()和or()的简化写法，将上面两个改变一下，达到同样的效果：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testAndSimple</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">Predicate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> predicate <span class="token operator">=</span> i <span class="token operator">-&gt;</span> i <span class="token operator">&gt;</span> <span class="token number">0</span>            <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span>    <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">assertFalse</span><span class="token punctuation">(</span>predicate<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">assertTrue</span><span class="token punctuation">(</span>predicate<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testOrSimple</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">Predicate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> predicate <span class="token operator">=</span> i <span class="token operator">-&gt;</span> i <span class="token operator">&lt;</span> <span class="token number">0</span>           <span class="token operator">||</span> i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">assertFalse</span><span class="token punctuation">(</span>predicate<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">assertTrue</span><span class="token punctuation">(</span>predicate<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>⑤negate()和isEqual()类似，其实也可以通过and、or实现，就不多赘述。</p><h2 id="3-Predicate与Stream结合使用"><a href="#3-Predicate与Stream结合使用" class="headerlink" title="3.Predicate与Stream结合使用"></a>3.Predicate与Stream结合使用</h2><p>定义一个User类：</p><p><font color="red" size="4">注意，需要重写equals()和hashCode()方法</font></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token annotation punctuation">@ToString</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> age<span class="token punctuation">;</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">User</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">User</span><span class="token punctuation">)</span> obj<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>name<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>         <span class="token annotation punctuation">@Override</span>     <span class="token keyword">public</span> <span class="token keyword">int</span> hashCode <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">return</span> name<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>写半个测试方法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">User</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">User</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">User</span> c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"c"</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> users <span class="token operator">=</span> <span class="token class-name">Lists</span><span class="token punctuation">.</span><span class="token function">newArrayList</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>    user<span class="token punctuation">.</span>stream<span class="token punctuation">.</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以发现有很多stream的方法可以以Predicate作为参数：</p><p><img src="/img/image-20210723162117832.png"></p><p>为了方便起见，把users这个list的定义放在测试类中了。</p><p>下面演示具体的方法使用：</p><p>①用filter()方法筛选user中User的age小于25的：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testStreamFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> users<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>u <span class="token operator">-&gt;</span> u<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>②其他方法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testStreamMatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// anyMatch：有任意一个与predicate符合的元素即为true</span>    <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">assertTrue</span><span class="token punctuation">(</span>users<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">anyMatch</span><span class="token punctuation">(</span>u <span class="token operator">-&gt;</span> <span class="token string">"a"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>u<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">assertFalse</span><span class="token punctuation">(</span>users<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">anyMatch</span><span class="token punctuation">(</span>u <span class="token operator">-&gt;</span> <span class="token string">"d"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>u<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// allMatch：全部与predicate符合的元素才为true</span>    <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">assertTrue</span><span class="token punctuation">(</span>users<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">allMatch</span><span class="token punctuation">(</span>u <span class="token operator">-&gt;</span> u<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">assertFalse</span><span class="token punctuation">(</span>users<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">allMatch</span><span class="token punctuation">(</span>u <span class="token operator">-&gt;</span> u<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// noneMatch：没有与predicate符合的元素才为true</span>    <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">assertTrue</span><span class="token punctuation">(</span>users<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">noneMatch</span><span class="token punctuation">(</span>u <span class="token operator">-&gt;</span> u<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">assertFalse</span><span class="token punctuation">(</span>users<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">noneMatch</span><span class="token punctuation">(</span>u <span class="token operator">-&gt;</span> u<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>(以上的lambda也可以替换为predicate对象，结合第二章来实现更详细和复杂的操作)</p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>无锡的好吃的</title>
      <link href="posts/97f18157/"/>
      <url>posts/97f18157/</url>
      
        <content type="html"><![CDATA[<h1 id="无锡的好吃的"><a href="#无锡的好吃的" class="headerlink" title="无锡的好吃的"></a>无锡的好吃的</h1><blockquote><p>为什么要写这个呢，记录生活，并且，munin给我分享了他们当时探店无数后的宝藏清单让我很羡慕，如果有一天我也能和别人分享这些的话，真好。<br>分为两个部分，第一部分是我自己去过的，第二部分就是这份宝藏清单了，如果有机会，我当然也要去探一探~</p></blockquote><h2 id="第一部分"><a href="#第一部分" class="headerlink" title="第一部分"></a>第一部分</h2><h3 id="地方菜"><a href="#地方菜" class="headerlink" title="地方菜"></a>地方菜</h3><h4 id="金福源东北菜"><a href="#金福源东北菜" class="headerlink" title="金福源东北菜"></a><strong>金福源东北菜</strong></h4><img src="/img/20220109133251.jpg" alt="20220109133251" style="zoom:25%;"><img src="/img/20220109133225.jpg" style="zoom:25%;"><p>第一次吃锅包肉，真的是甜得掉牙🥱(以后再也不吃了)，肉末粉丝煲味道就特别好。京酱肉丝竟然是用豆皮来卷的？我怎么记得我们家那边是用小煎饼呢？🤔</p><h4 id="南京大排档"><a href="#南京大排档" class="headerlink" title="南京大排档"></a><strong>南京大排档</strong></h4><img src="/img/nanjingdapaidang.jpg" style="zoom: 33%;"><p>在南京上了4年学竟然没去吃过！震惊。不过现在来无锡补偿一下。过完年来无锡第一天临时起意，所以去晚了，晚上八点多只有为数不多的菜品，估计是白天剩下的？纯用鸭做的鸭血旺很特别，也只有在全是鸭子的南京有吧hhh，就是有点咸(穿山甲：这鸭汤又咸又不淡，味道真是不好极了)，上的第一道菜“鸭肉汤包”很好吃，可惜我们太饿了光速吃完没拍上~</p><h4 id="东北灶"><a href="#东北灶" class="headerlink" title="东北灶"></a>东北灶</h4><img src="/img/dongbeizao.jpg" style="zoom: 33%;"><h3 id="中餐"><a href="#中餐" class="headerlink" title="中餐"></a>中餐</h3><h4 id="馋胖肉蟹煲"><a href="#馋胖肉蟹煲" class="headerlink" title="馋胖肉蟹煲"></a><strong>馋胖肉蟹煲</strong></h4><img src="/img/chanpangxieroubao.jpg" style="zoom:33%;"><p>红豆万花城三楼，和室友乱跑进去的，早上去映月湖玩了一会，本想随便吃点<del>早</del>午饭回家的，看到各种招牌的煲的价格不菲，就点了两个菜(也可以叫菜吧)：红糖糍粑、小酥肉。味道很不错。另外喝到了苦荞茶，很好喝啊，所以当场网购了一袋hhh</p><h4 id="麻辣香锅"><a href="#麻辣香锅" class="headerlink" title="麻辣香锅"></a><strong>麻辣香锅</strong></h4><img src="/img/malatang11.jpg" style="zoom:50%;"><p>红豆万花城一楼，平时以为没人去的店，在中午吃饭时人还是不少的。第一次见菜种类分为三种的：荤、素、半荤。微辣并不辣，味道不错，墨鱼仔很好吃。</p><h4 id="纸上烤鱼"><a href="#纸上烤鱼" class="headerlink" title="纸上烤鱼"></a><strong>纸上烤鱼</strong></h4><img src="/img/zhishangkaoyu.jpg" style="zoom:33%;"><p>红豆楼下的店，烤鱼的量不大，只够大概两三个人吃吧，可是我们是四个人去的🤣蒜香很好吃，并且不太辣，刺很少，不够吃的话可以加菜，宽粉、青菜、金针菇、冻豆腐…烤鱼吃成火锅也不是问题哈哈</p><img src="/img/zhishangkaoyu_niuwa.jpg" style="zoom:33%;"><p>补充：这家的牛蛙也很不错(不过比不上专业做牛蛙的哇喔也是正常的)</p><h4 id="川合元烤鱼"><a href="#川合元烤鱼" class="headerlink" title="川合元烤鱼"></a><strong>川合元烤鱼</strong></h4><img src="/img/chuanheyuan.jpg" style="zoom: 33%;"><p>红豆门口的店，这家店是一家火锅配料、香锅、烤鱼、牛蛙四合一的店，食材丰富环境好，而且老板的服务态度特别好，说话时就能给人一种愉悦的心情。<br>感觉比上面那家纸上烤鱼好，比如这里的烤鱼只要68一份(黑鱼/湄公鱼)，还送很多配菜+等待时间吃的瓜子+自助饮料。和传统的纸包鱼的区别感觉就是，这家的鱼是先油炸过在烤的，所以鱼皮会是脆的，感觉吃起来怪怪的，不过味道还行。</p><p>再补充一个他们家的香锅，量有点小，而且没有肉还这么贵🙁，看在烤鱼好吃和服务态度特别好就不差评了：</p><img src="/img/59b61ca491fe62ca5425a1e29e179cf.jpg" style="zoom:33%;"><h4 id="酸菜鱼"><a href="#酸菜鱼" class="headerlink" title="酸菜鱼"></a><strong>酸菜鱼</strong></h4><img src="/img/hongdousuancaiyu.jpg" style="zoom:33%;"><p>红豆万花城一楼的酸菜鱼，忘了名字了，就暂且叫它红豆酸菜鱼吧。鱼肉很不错的，几乎没有刺(言外之意还是有一点点)，但是这个汤是泡椒的，特别辣，再加上汤比较热，就变成了加倍的辣，除此以外都很好。</p><h4 id="⭐蛙喔牛蛙"><a href="#⭐蛙喔牛蛙" class="headerlink" title="⭐蛙喔牛蛙"></a>⭐<strong>蛙喔牛蛙</strong></h4><img src="/img/8aa59920de89bb3a5ab75557a49bb4e.jpg" style="zoom:33%;"><p>荟聚店，应该是荟聚仅有的两家牛蛙之一？泡椒味的还不错，一定要蘸汁吃，除了牛蛙本身，配菜也很好，芹菜、土豆粉。(这个红色的是泡椒，或许下次和没吃过的人去，可以告诉他这是圣女果🤣)。量比想象的大，三个人加米饭刚刚好。</p><img src="/img/20220109133255.jpg" style="zoom: 25%;"><p>又去了一次，蒜香的还是没有泡椒的好吃。这个烤鱼也还不错，后来才知道哇喔经常有优惠，差不多半价左右，而这次刚好赶上没打折，血亏😭</p><h4 id="支串串-最近去看了下已经关门"><a href="#支串串-最近去看了下已经关门" class="headerlink" title="支串串(最近去看了下已经关门)"></a><del><strong>支串串</strong></del>(最近去看了下已经关门)</h4><img src="/img/7f3dc93da12e8f15a5bf4c74e983f7d.jpg" style="zoom:33%;"><p>和嘉明赵展唱歌完在附近找到的店，很少吃串串，但是真滴不错，整个店也很精致，就是感觉有点冷清(心疼一秒钟)。<br>经典的wifi密码<code>8个8</code>、点餐牌号**(真·牌号)**是扑克牌哈哈哈、蘸料看起来不太行但是味道却很惊喜、鸭血一般般但这碗酸辣土豆粉是我很久都没吃过的美味类型了(不知道怎么形容，就绝绝子吧😆)。</p><h4 id="实惠小炒"><a href="#实惠小炒" class="headerlink" title="实惠小炒"></a><strong>实惠小炒</strong></h4><img src="/img/20220109142752.jpg" style="zoom: 33%;"><p>去了几次了，最好吃的几个菜：炒粉丝、干煸四季豆、糖醋排骨。</p><h3 id="烤肉"><a href="#烤肉" class="headerlink" title="烤肉"></a>烤肉</h3><h4 id="朝天门火锅-的烤肉"><a href="#朝天门火锅-的烤肉" class="headerlink" title="朝天门火锅(的烤肉)"></a><strong>朝天门火锅(的烤肉)</strong></h4><img src="/img/20210717153652.jpg" style="zoom: 33%;"><p>和室友去的，没想到火锅店的烤肉还不错，懒人或者选择恐惧症也好，反正点套餐方便很多，包括了一个汤和一份凉面，还有水果零食自助，而且这边的价格在南京可能都吃不饱吧。</p><h4 id="袁家水浒烤肉"><a href="#袁家水浒烤肉" class="headerlink" title="袁家水浒烤肉"></a><strong>袁家水浒烤肉</strong></h4><img src="/img/138ea674abdb51a8224bd91582dafd86.jpg" style="zoom: 33%;"><p>第一次去查桥吃的店。和以往都不同，这家竟然是炭火烧烤，而且签子大肉多，体验很棒。来的时候突然下雨，鞋湿了，在这个炭火旁边过一会竟然烤干了哈哈，建议冬天来吃，很有温暖的氛围！牛舌、鸡胗、花菜烤了不好吃，别的都很不错的。</p><h4 id="晓牛家烤肉"><a href="#晓牛家烤肉" class="headerlink" title="晓牛家烤肉"></a><strong>晓牛家烤肉</strong></h4><img src="/img/20220109133219.jpg" style="zoom:33%;"><p>红豆楼下新开的韩式烤肉，开业第一天就去尝了，不过吧，有点小贵且量少。肉和菜处理的是挺精致的，这个牛肉粒用的是挺好的肉好评，总体来说性价比不是很高。</p><h4 id="土城小酒馆"><a href="#土城小酒馆" class="headerlink" title="土城小酒馆"></a><strong>土城小酒馆</strong></h4><img src="/img/20220109133235.jpg" style="zoom: 25%;"><p>查桥店，以前觉得五花肉太油不吃，这次尝试了一下还挺香的，算是突破自我了。羊蝎子火锅肉不少，就是这种铜火锅下菜容易沾上，然后很快就干在上面了。。</p><h4 id="风雷烧烤"><a href="#风雷烧烤" class="headerlink" title="风雷烧烤"></a><strong>风雷烧烤</strong></h4><img src="/img/fengleishaokao.jpg" style="zoom: 25%;"><p>和风雷酸辣汤是同一家，这个大牛肉粒是树枝串起来的，很有特色(不知道这些树枝会不会被复用？</p><h3 id="火锅"><a href="#火锅" class="headerlink" title="火锅"></a>火锅</h3><h4 id="蜀大侠"><a href="#蜀大侠" class="headerlink" title="蜀大侠"></a><strong>蜀大侠</strong></h4><img src="/img/shudaxiahg.jpg" style="zoom:33%;"><p>第一次部门聚餐，新人见面会。点了很多啊，只不过只顾着和大家一起玩谁是卧底，不知不觉被吃光了，那么是谁吃的呢？</p><h4 id="蜀憨憨"><a href="#蜀憨憨" class="headerlink" title="蜀憨憨"></a><strong>蜀憨憨</strong></h4><img src="/img/shuhanhan.jpg" style="zoom: 33%;"><p>蜀大侠的亲兄弟？这一桌才人均不到60块，右边的小桌子下面还有粉和面没拿上来，西瓜自助，扫码进群送可乐，发朋友圈送椰汁，好耶，这是至今性价比最高的店了(就是有点偏，在新吴区</p><h4 id="大渝火锅"><a href="#大渝火锅" class="headerlink" title="大渝火锅"></a><strong>大渝火锅</strong></h4><img src="/img/dayuhuoguo.jpg" style="zoom: 50%;"><p>爬山兴趣组有史以来人最多的一次，在爬山的劳累之后当然要吃点好的~大渝火锅在无锡算是非常好的，服务比海底捞还要好，就是这个四宫格的锅底，怎么混入了一个清水锅？😅</p><h3 id="自助"><a href="#自助" class="headerlink" title="自助"></a>自助</h3><h4 id="名字忘了，问问室友"><a href="#名字忘了，问问室友" class="headerlink" title="名字忘了，问问室友"></a><strong>名字忘了，问问室友</strong></h4><img src="/img/huoguozizhu001.jpg" style="zoom:33%;"><p>一起去荡口古镇玩后吃的，感悟：熟食不要拿太多；烤肉一定要拿薄的，厚的一律不要；饮料少喝，尤其是这种全是假饮料的自助店；水果饭后再吃。总体来说，这家店很不错的。</p><h4 id="川渝又一村"><a href="#川渝又一村" class="headerlink" title="川渝又一村"></a><strong>川渝又一村</strong></h4><img src="/img/20220109133211.jpg" style="zoom:33%;"><p>优点：便宜，一个人60多，还送两碗毛肚。<br>食材味道和新鲜度都及格吧，没什么饮料，只有那种假的RIO，我是不敢喝。这家店用的是大理石地板貌似，长时间的吃饭导致上面像是镀了一层油膜，走路很滑，真怕摔倒了😅。</p><h4 id="蓉城四海"><a href="#蓉城四海" class="headerlink" title="蓉城四海"></a><strong>蓉城四海</strong></h4><img src="/img/rongchengsihai.jpg" style="zoom:33%;"><p>大润发新开的店，首周89，第二周69，第三周开始79，另外锅底每桌39，我算是赶上做了最新鲜的韭菜第一周就去吃，这个价位菜品还算可以，有几种刺身，还有螃蟹，只不过量太少一下就被拿完了。腌牛肉烤起来很好吃，喝的里面百香果很棒。</p><h4 id="炉边往事"><a href="#炉边往事" class="headerlink" title="炉边往事"></a><strong>炉边往事</strong></h4><img src="/img/lubianwangshi.jpg" style="zoom:33%;"><p>第二次去梅里古镇，夜景真不错(图就不放这里了)。这家中规中矩，人很多，没啥可挑剔的点，但也没有特别惊艳的地方，牛肉粒烤起来很好吃。一起去的同事吃了蟹腿棒觉得非常好吃，遂吃了三四根，回家网上查了下一块钱一根，笑鼠。</p><h3 id="日料"><a href="#日料" class="headerlink" title="日料"></a>日料</h3><h4 id="太郎の家寿喜烧"><a href="#太郎の家寿喜烧" class="headerlink" title="太郎の家寿喜烧"></a><strong>太郎の家寿喜烧</strong></h4><img src="/img/tailangdejia.jpg" style="zoom:33%;"><p>汇聚店，本来是吃烤肉去的，但是人太多就换了这家，三个人点了四人餐，分量绝对能吃撑。无菌蛋液蘸牛肉吃不习惯，但也还是很新鲜的，凉拌花甲很好吃就是有点辣，芝士蟹宝超级好吃，龙虾太小不够塞牙缝，寿司一般般，黑椒嫩牛还可以(虽然说当天中午才吃了嫩牛五方)，总体来说是很不错的，能吃到平时很少吃到的东西，值得一试。</p><h4 id="大渔铁板"><a href="#大渔铁板" class="headerlink" title="大渔铁板"></a><strong>大渔铁板</strong></h4><img src="/img/dayutieban_2.jpg" style="zoom:33%;"><img src="/img/dayutieban.jpg" style="zoom:33%;"><p>21年底bi聚餐去的，是我到写下这段字为止去过最贵的了，人均200+。不过也是最好吃和最丰盛的，刺身、虾、牛肉吃到腻，很满足的一顿。</p><h4 id="浅草君"><a href="#浅草君" class="headerlink" title="浅草君"></a>浅草君</h4><img src="/img/qiancaojun.jpg" style="zoom:33%;"><p>和考核时的室友来吃的，两个人点了四人套餐，貌似也并不多。各种寿司和甜品，寿喜锅的肉感觉不是很精致，就是商店买的冻牛肉卷的样子。还有幸尝到了传说中的<code>波子汽水</code>，果然不出意料地井喷了233(另外，味道只能说和果啤完全一致？价格都用在玻璃球上了是吧😅</p><h3 id="日常小店"><a href="#日常小店" class="headerlink" title="日常小店"></a>日常小店</h3><h4 id="⭐淮南牛肉汤"><a href="#⭐淮南牛肉汤" class="headerlink" title="⭐淮南牛肉汤"></a>⭐<strong>淮南牛肉汤</strong></h4><img src="/img/huainanxiuroutang.jpg" style="zoom:33%;"><p>这家应当是红豆楼下最火的一家店了，好吃又便宜，这不比鸭血粉丝汤好吃多了？而且这个饼是真的棒！</p><h4 id="菜饭骨头汤"><a href="#菜饭骨头汤" class="headerlink" title="菜饭骨头汤"></a><strong>菜饭骨头汤</strong></h4><img src="/img/caifanhutoutang.jpg" style="zoom:33%;"><p>红豆楼下另一家超火的店，真正的杂蔬饭(点名批评学校的假冒杂蔬饭)，多样的套餐，而且很便宜，狮子头很好吃！</p><h4 id="全州拌饭"><a href="#全州拌饭" class="headerlink" title="全州拌饭"></a><strong>全州拌饭</strong></h4><img src="/img/quanhzoubanfan.jpg" style="zoom:33%;"><p>红豆万花城一楼。感觉做法和石锅饭有点像？确实是石锅然后非常烫，需要搅拌一下，也许这就是拌饭吧，由于太烫了，贴着锅的饭会被烧干，变成锅巴一样脆脆的还挺好吃，只不过不是特别合我的胃口吧。</p><h4 id="兀岛-但是我喜欢叫它Π岛"><a href="#兀岛-但是我喜欢叫它Π岛" class="headerlink" title="兀岛(但是我喜欢叫它Π岛)"></a>兀岛(但是我喜欢叫它Π岛)</h4><img src="/img/riliao111.jpg" style="zoom:33%;"><p>还是红豆万花城一楼的，全州拌饭的隔壁，价格还行一个套餐20多，就是米饭太少了，吃完了米饭菜和肉还剩了很多，又点一份米饭，然后菜吃完米饭又剩下了😅；另一个问题是这个肉有很多皮之类的，反正是脂肪，对我来说就是毒药！！</p><h4 id="陕西面馆"><a href="#陕西面馆" class="headerlink" title="陕西面馆"></a><strong>陕西面馆</strong></h4><img src="/img/shanximianguan.jpg" style="zoom:33%;"><p>红豆万花城×3，现在知道了全国各地都有陕西面馆了，不比兰州拉面少。只不过每一家都差别很大，比如这家的竟然如此之甜(连辣椒面都是甜的)，就像是吃惯了辣锅突然去吃番茄锅底的感觉吧。还可以，能吃到已经很满足了，偶尔可以去一次。</p><h4 id="粉面婆米线"><a href="#粉面婆米线" class="headerlink" title="粉面婆米线"></a><strong>粉面婆米线</strong></h4><img src="/img/fenmianpomixian.jpg" style="zoom: 33%;"><p>去了一次，挺好吃的。</p><h4 id="汉堡王"><a href="#汉堡王" class="headerlink" title="汉堡王"></a><strong>汉堡王</strong></h4><img src="/img/burgerking.jpg" style="zoom:33%;"><p>竟然开在公司门口了！！不用多说，yyds！</p><h4 id="风雷烧烤-的酸辣汤"><a href="#风雷烧烤-的酸辣汤" class="headerlink" title="风雷烧烤(的酸辣汤"></a><strong>风雷烧烤(的酸辣汤</strong></h4><img src="/img/3938eea3-339b-4bfd-aa3d-3463436425b1.jpg" style="zoom:33%;"><p>烧烤太贵了，但是酸辣汤还是很不错的，十块钱一碗。第一次喝，和胡辣汤比少了淀粉的浑浊和胡辣的味道，酸味占比比较大，总体来说挺好喝的，就是当晚餐喝不饱的~</p><h3 id="外卖"><a href="#外卖" class="headerlink" title="外卖"></a>外卖</h3><h4 id="无谷轻食"><a href="#无谷轻食" class="headerlink" title="无谷轻食"></a><strong>无谷轻食</strong></h4><img src="/img/wuguqingshi.jpg" style="zoom:33%;"><p>这个是公司的官方外卖之一，而我只点过一次这个<code>黑椒嫩牛谷物饭</code>，虽然说挺好吃的，但是究其原因：<strong>吃 不 饱</strong>。</p><h4 id="喝汤时间"><a href="#喝汤时间" class="headerlink" title="喝汤时间"></a><strong>喝汤时间</strong></h4><img src="/img/hetangshijian.jpg" style="zoom:33%;"><p>嘉明推荐我点的，他说自己连续点了三天。。然后汤里有玉米排骨什么的，还可以，送小菜海带，这个米饭也不错，缺点也很明显：贵！</p><h4 id="饼小六"><a href="#饼小六" class="headerlink" title="饼小六"></a><strong>饼小六</strong></h4><img src="/img/bingxiaoliu.jpg" style="zoom: 33%;"><p>饼和肉都很好吃，并且外卖的话还有很多几乎免费的加料，鸡柳、豆腐、黄瓜等，送一个小盒的泡菜。但是这个肉丸紫菜汤一般般，饼店还是要专心卖饼呀。</p><h4 id="鲜骨道"><a href="#鲜骨道" class="headerlink" title="鲜骨道"></a><strong>鲜骨道</strong></h4><p>忘了拍照片，这家的排骨做的真不错。(不咸不淡，味道真是好极了.jpg)</p><h4 id="陕味拾族"><a href="#陕味拾族" class="headerlink" title="陕味拾族"></a><strong>陕味拾族</strong></h4><img src="/img/20220109133231.jpg" style="zoom:33%;"><p>红豆楼下的陕西面馆，凉皮中规中矩，肉夹馍有青椒小差评，不过这个馍烤的很脆很好吃。最重要的是有鸡蛋醪糟，很久没吃到了！！</p><h4 id="金福源东北菜的饺子"><a href="#金福源东北菜的饺子" class="headerlink" title="金福源东北菜的饺子"></a><strong>金福源东北菜的饺子</strong></h4><img src="/img/20220109133155.jpg" style="zoom:33%;"><p>如果想吃饺子，那么一定要点东北菜这家的。什么大娘水饺都太弱了，东北菜这家的饺子是日常认知的两倍大，味道也不错。</p><h4 id="好人民间小吃"><a href="#好人民间小吃" class="headerlink" title="好人民间小吃"></a><strong>好人民间小吃</strong></h4><img src="/img/haorenminjinxiaochi.jpg" style="zoom:33%;"><p>点了几次，小吃果然是超脱平时饭菜的另一种存在，和平时的饭比起来就像是周末对比工作日！</p><h4 id="广式雍记烧腊餐厅"><a href="#广式雍记烧腊餐厅" class="headerlink" title="广式雍记烧腊餐厅"></a>广式雍记烧腊餐厅</h4><p><em>(尴尬了，点了烤鸭饭、猪脚饭、肠粉，感觉很好吃却没拍照 先留着</em></p><p>广式的饭，叉烧、香肠、烤鸭都是清淡型还比较适合我，当时学校食堂有一加广式的店我只吃过一次肠粉，后来关门了才追悔莫及。如今又能迟到了(多尝试地方特色的食品真不错，也正因如此在学校最喜欢的就是民族食堂了吧</p><h2 id="第二部分"><a href="#第二部分" class="headerlink" title="第二部分"></a>第二部分</h2><h3 id="—–我是日本料理的分割线—–"><a href="#—–我是日本料理的分割线—–" class="headerlink" title="—–我是日本料理的分割线—–"></a>—–我是日本料理的分割线—–</h3><ul><li><input disabled="" type="checkbox"> 万福日式烤肉</li><li><input disabled="" type="checkbox"> 松坂家日式烤肉</li><li><input disabled="" type="checkbox"> 小次郎烧鸟屋</li><li><input disabled="" type="checkbox"> 九馥炭火烧肉酒场</li><li><input disabled="" type="checkbox"> 八鹤</li><li><input disabled="" type="checkbox"> 樱の亭</li><li><input disabled="" type="checkbox"> 日和</li><li><input disabled="" type="checkbox"> 极番炭火烤肉</li><li><input disabled="" type="checkbox"> 渔</li><li><input disabled="" type="checkbox"> 犇鱻</li></ul><h3 id="—–我是韩国料理的分割线—–"><a href="#—–我是韩国料理的分割线—–" class="headerlink" title="—–我是韩国料理的分割线—–"></a>—–我是韩国料理的分割线—–</h3><ul><li><input disabled="" type="checkbox"> 恩你小木屋</li><li><input disabled="" type="checkbox"> 奥迈吉韩国烤肉(要吃假日广场店的，市里云幅点的是大铁盘，不好吃)</li><li><input disabled="" type="checkbox"> 善·小本家</li></ul><h3 id="—–我是港粤菜系的分割线—–"><a href="#—–我是港粤菜系的分割线—–" class="headerlink" title="—–我是港粤菜系的分割线—–"></a>—–我是港粤菜系的分割线—–</h3><ul><li><input disabled="" type="checkbox"> 澳门星记猪骨</li><li><input disabled="" type="checkbox"> 古洋食坊</li><li><input disabled="" type="checkbox"> 活泼鲜跳</li><li><input disabled="" type="checkbox"> 炉边坐鲜食火锅</li><li><input disabled="" type="checkbox"> 珍麗烤肉公司(疑似关门)</li><li><input disabled="" type="checkbox"> 泮棠</li><li><input disabled="" type="checkbox"> 龙鲜会</li></ul><h3 id="—–我是东南亚菜系的分割线—–"><a href="#—–我是东南亚菜系的分割线—–" class="headerlink" title="—–我是东南亚菜系的分割线—–"></a>—–我是东南亚菜系的分割线—–</h3><ul><li><input disabled="" type="checkbox"> 帕塔泰国餐厅</li><li><input disabled="" type="checkbox"> 集渔·泰式海鲜火锅</li><li><input disabled="" type="checkbox"> 爱在河内</li><li><input disabled="" type="checkbox"> 牛车水</li></ul><h3 id="—–我是西餐的分割线—–"><a href="#—–我是西餐的分割线—–" class="headerlink" title="—–我是西餐的分割线—–"></a>—–我是西餐的分割线—–</h3><ul><li><input disabled="" type="checkbox"> 蓝蛙(不过个人不喜欢纯正的西餐，而且贵)</li></ul><h3 id="—–我是特别贵的分割线—–"><a href="#—–我是特别贵的分割线—–" class="headerlink" title="—–我是特别贵的分割线—–"></a>—–我是特别贵的分割线—–</h3><ul><li><input disabled="" type="checkbox"> 鮨伊(好吃，就是实在太贵)</li><li><input disabled="" type="checkbox"> 香樟花园(铁板烧一般，法国料理的set还行)</li><li><input disabled="" type="checkbox"> 锅境港式功夫火锅(不如香港的鲜入围煮然而巨贵)</li></ul><h3 id="—–我是江浙菜系的分割线—–"><a href="#—–我是江浙菜系的分割线—–" class="headerlink" title="—–我是江浙菜系的分割线—–"></a>—–我是江浙菜系的分割线—–</h3><ul><li><input disabled="" type="checkbox"> 熙盛源(无锡经典传统小笼包+馄饨)</li><li><input disabled="" type="checkbox"> 蜜桃餐厅(好像哪里都有？)</li><li><input disabled="" type="checkbox"> 不喜欢吃江浙菜</li></ul><h3 id="—–我是可以去玩玩的地方—–"><a href="#—–我是可以去玩玩的地方—–" class="headerlink" title="—–我是可以去玩玩的地方—–"></a>—–我是可以去玩玩的地方—–</h3><ul><li><input disabled="" type="checkbox"> 浅葱图书馆(可以做拼豆)</li><li><input disabled="" type="checkbox"> 南禅寺</li><li><input disabled="" type="checkbox"> 市中心商圈(恒隆+苏宁+大东方百货+云幅+t12)</li><li><input disabled="" type="checkbox"> 茂业商圈</li><li><input disabled="" type="checkbox"> 万达商圈</li></ul>]]></content>
      
      
      <categories>
          
          <category> 兴趣 </category>
          
          <category> 干饭 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 吃吃吃 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello_JMockit</title>
      <link href="posts/5b9abc/"/>
      <url>posts/5b9abc/</url>
      
        <content type="html"><![CDATA[<h1 id="Hello-JMockit"><a href="#Hello-JMockit" class="headerlink" title="Hello JMockit"></a>Hello JMockit</h1><h2 id="1-Mock介绍"><a href="#1-Mock介绍" class="headerlink" title="1.Mock介绍"></a>1.Mock介绍</h2><h3 id="什么是mock"><a href="#什么是mock" class="headerlink" title="什么是mock"></a>什么是mock</h3><p>mock的字面意思是”模拟的，仿制的”,在测试中是指对于某些<code>不容易获取的对象</code>或<code>不容易执行的过程</code>，用一个虚拟的对象或过程来作为替代品使测试程序得以正常运行。</p><h3 id="为什么要mock"><a href="#为什么要mock" class="headerlink" title="为什么要mock"></a>为什么要mock</h3><p>因为单元测试当中，我们只关注被测的单元，而不关心其他的依赖内容；有时需要屏蔽掉外部的依赖；有时也需要伪造一些方法体或者异常来进行测试。大致的使用场景有：</p><ul><li>被调用的方法缺少运行环境</li><li>被调用的方法还未开发完成</li><li>真实的对象难以创建</li><li>真实的对象具有不确定的行为或特定的行为很难被触发</li><li>需要构造一些特殊情况如异常</li><li>…</li></ul><h3 id="为什么使用JMockit"><a href="#为什么使用JMockit" class="headerlink" title="为什么使用JMockit"></a>为什么使用JMockit</h3><p>常见的java开源Mock框架有Mockito、JMock与JMockit等，JMockit可以看作对JMock做了进一步的封装，更加方便好用。</p><p>并且支持常用的test框架如junit和testng。</p><p>jmockit允许直接在“真实”（非模拟）类上模拟方法和构造方法，无需在测试中实例化模拟对象并将它们传递给被测代码。这种模拟方法不仅适用于<code>public</code>实例方法，还适用于<code>final</code>和<code>static</code> 方法以及<code>构造方法</code>。</p><h3 id="JMockit的基本原理"><a href="#JMockit的基本原理" class="headerlink" title="JMockit的基本原理"></a>JMockit的基本原理</h3><p> Java进行Mock的原理就是在加载并允许字节码的过程中对原方法的字节码做了掉包，虚拟机实际运行的是虚拟方法的字节码。</p><h3 id="“三步走”测试结构"><a href="#“三步走”测试结构" class="headerlink" title="“三步走”测试结构"></a>“三步走”测试结构</h3><p>经典的测试模型都是分成三个阶段:  **Arrange、Act、Assert (AAA)**：</p><ol><li>Arrange阶段:数据或者依赖的服务的准备和注入;</li><li>Act阶段:目的测试执行;</li><li>Assert阶段:把执行完的测试结果和期望值进行比较。</li></ol><p>Mock测试也分为三个阶段：<strong>record、replay、verify</strong>：</p><p>1、record(录制): mock方法并返回指定结果；<br>2、repaly(回放): 执行单元测试 case，原先在record阶段被录制的调用都可能被执行到(这里“可能”强调了并不是录制了就一定会严格执行)；<br>3、verify: 检查mock方法使用情况。</p><h2 id="2-开始使用"><a href="#2-开始使用" class="headerlink" title="2.开始使用"></a>2.开始使用</h2><blockquote><p>本文均使用junit+jmockit为例</p></blockquote><h3 id="配置Maven依赖"><a href="#配置Maven依赖" class="headerlink" title="配置Maven依赖"></a>配置Maven依赖</h3><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.jmockit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>jmockit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${jmockit.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><font color="#f78022">注意：jmockit依赖需要在junit之后添加</font></p><p>JMockit 还需要使用<code>-javaagent</code> JVM 初始化参数：</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>maven-surefire-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.22.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span> <span class="token comment">&lt;!-- or some other version --&gt;</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">&gt;</span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>argLine</span><span class="token punctuation">&gt;</span></span>            -javaagent:"${settings.localRepository}"/org/jmockit/jmockit/${jmockit.version}/jmockit-${jmockit.version}.jar         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>argLine</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>也可以在 IntelliJ IDEA 或 Eclipse 的“运行/调试配置”中指定 <code>-javaagent:&lt;proper path&gt;/jmockit.1.x.jar</code>。</p><h2 id="3-Mocking"><a href="#3-Mocking" class="headerlink" title="3.Mocking"></a>3.Mocking</h2><p>先定义一个App类和一个hello方法 ：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"hello "</span> <span class="token operator">+</span> str<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">hello_1</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"hello "</span> <span class="token operator">+</span> str<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">staticHello</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"hello "</span> <span class="token operator">+</span> str<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="几个注解-Mocked、-Tested、-Injectable和-Capturing"><a href="#几个注解-Mocked、-Tested、-Injectable和-Capturing" class="headerlink" title="几个注解@Mocked、@Tested、@Injectable和@Capturing"></a>几个注解@Mocked、@Tested、@Injectable和@Capturing</h3><p><code>@Mocked</code>，mock整个对象，自动实例化对象，对象的方法（包括静态方法）均返回默认值（在使用它的测试期间）；</p><p><code>@Tested</code>，修饰类，表示是我们要测试对象,如果该对象没有赋值，JMockit会去实例化它。通常和@Injectable搭配使用；</p><p><code>@Injectable</code>, 只影响被加上注解的当前实例，并且不影响静态方法；</p><p><code>@Capturing</code>，它将模拟扩展到实现模拟接口的类，或扩展模拟类的子类。</p><h3 id="三个代码块"><a href="#三个代码块" class="headerlink" title="三个代码块"></a>三个代码块</h3><p>每个测试单元的结构可以与上面提到的测试三步走结构对应：<strong>record、replay、verify</strong>。</p><p>示例如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppTest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Mocked</span>    <span class="token class-name">App</span> app<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testMockedAnnotation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// record</span>        <span class="token keyword">new</span> <span class="token class-name">Expectations</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">{</span>            app<span class="token punctuation">.</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            result <span class="token operator">=</span> <span class="token string">"hello mock"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token comment">// replay</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>app<span class="token punctuation">.</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// verify</span>        <span class="token keyword">new</span> <span class="token class-name">Verifications</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">{</span>            app<span class="token punctuation">.</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            times <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>结果是”hello mock”</p></blockquote><p><strong>Expectations</strong>代码块中写需要模拟的方法以及自定义返回值，在一个Expectations中可以同时录制多个行为，也可以分开多个Expectations录制。</p><p><strong>Verifications</strong>代码块中写被调用的方法以及期望被调用的次数。(如果实际被调用的次数与写的不一致将报错)</p><h3 id="两种模拟方式-整体-amp-局部"><a href="#两种模拟方式-整体-amp-局部" class="headerlink" title="两种模拟方式(整体&amp;局部)"></a>两种模拟方式(整体&amp;局部)</h3><p><strong>①引用@Mocked/@Injectable对象，实现类的整体模拟：</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppTest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Mocked</span>    <span class="token class-name">App</span> app<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testMockedAnnotation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">Expectations</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">{</span>            app<span class="token punctuation">.</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            result <span class="token operator">=</span> <span class="token string">"hello mock"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>app<span class="token punctuation">.</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">App</span><span class="token punctuation">.</span><span class="token function">staticHello</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>结果是：<br>hello mock<br>null</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppTest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Injectable</span>    <span class="token class-name">App</span> app<span class="token punctuation">;</span>    <span class="token class-name">App</span> app_1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testInjectableAnnotation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">Expectations</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">{</span>            app<span class="token punctuation">.</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            result <span class="token operator">=</span> <span class="token string">"hello mock"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>app<span class="token punctuation">.</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>app<span class="token punctuation">.</span><span class="token function">hello_1</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>app_1<span class="token punctuation">.</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>app_1<span class="token punctuation">.</span><span class="token function">hello_1</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>结果是：<br>hello mock<br>null<br>hello 1<br>hello 1</p></blockquote><p><strong>②在Expectations中传入类的class对象作为参数，实现部分方法的模拟：</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppTest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testExpectationsParam</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">App</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Expectations</span><span class="token punctuation">(</span><span class="token class-name">App</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">{</span>            app<span class="token punctuation">.</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            result <span class="token operator">=</span> <span class="token string">"hello mock"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>app<span class="token punctuation">.</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">App</span><span class="token punctuation">.</span><span class="token function">staticHello</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>结果是：<br>hello mock<br>hello 1</p></blockquote><p><strong>③在Expectations中传入实例对象作为参数，实现部分方法的模拟</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testPartialMock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">App</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">new</span> <span class="token class-name">Expectations</span><span class="token punctuation">(</span>app<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">{</span>        app<span class="token punctuation">.</span><span class="token function">hello</span><span class="token punctuation">(</span>anyString<span class="token punctuation">)</span><span class="token punctuation">;</span>        result <span class="token operator">=</span> <span class="token string">"hello000 "</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>app<span class="token punctuation">.</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>app<span class="token punctuation">.</span><span class="token function">hello_1</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>结果是：</p><p>hello000<br>hello 1</p></blockquote><p><strong>④将测试类中的对象加上@Tested和@Mocked两个注解，来实现部分方法的模拟</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppTest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Tested</span>    <span class="token annotation punctuation">@Mocked</span>    <span class="token class-name">App</span> app<span class="token punctuation">;</span>        <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testAnotherWayPartialMock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">Expectations</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">{</span>            app<span class="token punctuation">.</span><span class="token function">hello</span><span class="token punctuation">(</span>anyString<span class="token punctuation">)</span><span class="token punctuation">;</span>            result <span class="token operator">=</span> <span class="token string">"hello2333 "</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>app<span class="token punctuation">.</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>app<span class="token punctuation">.</span><span class="token function">hello_1</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>结果是：</p><p>hello2333<br>hello 1</p></blockquote><h3 id="Injectable作用于参数对象示例"><a href="#Injectable作用于参数对象示例" class="headerlink" title="Injectable作用于参数对象示例"></a>Injectable作用于参数对象示例</h3><p>可以给参数对象自定义值(这个方法支持原始数据类型和数组类型)：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppTest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testInjectableParam</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Injectable</span><span class="token punctuation">(</span><span class="token string">"injectable"</span><span class="token punctuation">)</span> <span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">App</span><span class="token punctuation">.</span><span class="token function">staticHello</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>结果是：</p><p>hello injectable</p></blockquote><h3 id="参数值的灵活匹配"><a href="#参数值的灵活匹配" class="headerlink" title="参数值的灵活匹配"></a>参数值的灵活匹配</h3><p>①”any”字段</p><p>JMockit提供了一整套完整的any类型，可以用以匹配任何原始类型（和相应的包装类）、字符串、通用类型Object，下面以String为例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppTest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Mocked</span>    <span class="token class-name">App</span> app<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testAny</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">Expectations</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">{</span>            app<span class="token punctuation">.</span><span class="token function">hello</span><span class="token punctuation">(</span>anyString<span class="token punctuation">)</span><span class="token punctuation">;</span>            result <span class="token operator">=</span> <span class="token string">"hello mock"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>app<span class="token punctuation">.</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Verifications</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">{</span>            app<span class="token punctuation">.</span><span class="token function">hello</span><span class="token punctuation">(</span>anyString<span class="token punctuation">)</span><span class="token punctuation">;</span>            times <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>【补充】any字段的万能用法：强转。可以匹配任何已有类型。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">new</span> <span class="token class-name">Expectations</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">{</span>     app<span class="token punctuation">.</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> any<span class="token punctuation">)</span><span class="token punctuation">;</span>     result <span class="token operator">=</span> <span class="token string">"hello mock"</span><span class="token punctuation">;</span>     app<span class="token punctuation">.</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">App</span><span class="token punctuation">)</span> any<span class="token punctuation">)</span><span class="token punctuation">;</span>     result <span class="token operator">=</span> <span class="token string">"hello mock"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><p>②”with”字段</p><p>在记录或验证代码块中，<code>withXxx(...)</code>可以对参数的任何子集调用方法：</p><p><img src="/img/image-20210714152627843.png"></p><p>下面以withSubstring()为例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppTest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Mocked</span>    <span class="token class-name">App</span> app<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testWith</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">Expectations</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">{</span>            app<span class="token punctuation">.</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token function">withSubstring</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            result <span class="token operator">=</span> <span class="token string">"hello mock"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>app<span class="token punctuation">.</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token string">"111"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Verifications</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">{</span>            app<span class="token punctuation">.</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token function">withSubstring</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            times <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>结果是：</p><p>hello mock</p></blockquote><h3 id="多种情况返回不同结果"><a href="#多种情况返回不同结果" class="headerlink" title="多种情况返回不同结果"></a>多种情况返回不同结果</h3><p>通过在Expectations中定义result = new Delegate(){}，其中定义与被mock的方法参数和返回值相同的任意名称方法，内部逻辑可以自定来达到根据参数返回结果的效果。例如：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testDelegate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">new</span> <span class="token class-name">Expectations</span><span class="token punctuation">(</span><span class="token class-name">App</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">{</span>        app<span class="token punctuation">.</span><span class="token function">hello</span><span class="token punctuation">(</span>anyString<span class="token punctuation">)</span><span class="token punctuation">;</span>        result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Delegate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">String</span> <span class="token function">anyMethodName</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">return</span> <span class="token string">"hello short"</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token keyword">return</span> <span class="token string">"hello long"</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>结果是：</p><p>hello short<br>hello long</p></blockquote><h3 id="调用计数约束"><a href="#调用计数约束" class="headerlink" title="调用计数约束"></a>调用计数约束</h3><p>times，minTimes，和 maxTimes。值可以为任何非负整数。</p><p>用于Expectations代码块中，相应方法的后面。如果调用次数低于或高于预期下限或上限，或与指定次数不相等，则测试失败。</p><p>例如：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testTimes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">Expectations</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">{</span>            app<span class="token punctuation">.</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            result <span class="token operator">=</span> <span class="token string">"hello mock"</span><span class="token punctuation">;</span>            minTimes <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>            app<span class="token punctuation">.</span><span class="token function">hello_1</span><span class="token punctuation">(</span>anyString<span class="token punctuation">)</span><span class="token punctuation">;</span>            times <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>app<span class="token punctuation">.</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>app<span class="token punctuation">.</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>app<span class="token punctuation">.</span><span class="token function">hello_1</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p><font color="#dd001b" size="5">更多功能待更新。。。</font></p><h2 id="4-Faking"><a href="#4-Faking" class="headerlink" title="4.Faking"></a>4.Faking</h2><blockquote><p>基于状态的方法，既方便又好用。</p></blockquote><h3 id="⭐通过new-MockUp-lt-T-gt-对象"><a href="#⭐通过new-MockUp-lt-T-gt-对象" class="headerlink" title="⭐通过new MockUp<T>对象"></a>⭐通过new MockUp&lt;T&gt;对象</h3><p>通过<code>MockUp&lt;T&gt;</code>类和<code>@Mock</code>注解来伪造类和方法，这个方法可以自定义方法体，并且未覆盖的方法不受影响，其中构造方法特殊使用$init作为方法名。</p><p><font color="#dd001b">注意：@Mock的方法前可以不用加修饰词，如public、static等，保证方法签名和要覆盖的一致就可以了</font></p><p>例如：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppTest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testMockUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">MockUp</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">App</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Mock</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> $init <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"init"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token annotation punctuation">@Mock</span>            <span class="token class-name">String</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token string">"abc"</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">App</span><span class="token punctuation">.</span><span class="token function">staticHello</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>结果是：<br>init<br>abc<br>hello 1</p></blockquote><h3 id="通过继承MockUp-lt-T-gt-类"><a href="#通过继承MockUp-lt-T-gt-类" class="headerlink" title="通过继承MockUp<T>类"></a>通过继承MockUp&lt;T&gt;类</h3><p>这种方法创造的mock对象，没有覆盖的方法就会访问不到，比如下面这个会访问不了hello_1方法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">AppMocker</span> <span class="token keyword">extends</span> <span class="token class-name">MockUp</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">App</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Mock</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"helloMock "</span> <span class="token operator">+</span> str<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testMocker</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">AppMocker</span> appMocker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AppMocker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>appMocker<span class="token punctuation">.</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>结果是：</p><p>helloMock 1</p></blockquote><h2 id="5-一些特殊的情况和用法"><a href="#5-一些特殊的情况和用法" class="headerlink" title="5.一些特殊的情况和用法"></a>5.一些特殊的情况和用法</h2><h3 id="通过new-MockUp-lt-T-gt-对象覆盖方法的复用"><a href="#通过new-MockUp-lt-T-gt-对象覆盖方法的复用" class="headerlink" title="通过new MockUp<T>对象覆盖方法的复用"></a>通过new MockUp&lt;T&gt;对象覆盖方法的复用</h3><p>将覆盖的定义写在@Before中即可，整个测试类都可以使用修改的方法，但是注意的是它的作用范围：</p><p><code>@Before中定义</code>—&gt;<code>@After执行结束</code>期间都生效。</p><p>（或者是@BeforeClass和@AfterClass）</p><h3 id="Mock时调用原方法"><a href="#Mock时调用原方法" class="headerlink" title="Mock时调用原方法"></a>Mock时调用原方法</h3><p>在待Mock的方法的参数列表中加入invocation参数，通过invocation.procee()调用原方法。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testProceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">new</span> <span class="token class-name">MockUp</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">App</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Mock</span>        <span class="token class-name">String</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token class-name">Invocation</span> invocation<span class="token punctuation">,</span> <span class="token class-name">String</span> str<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> invocation<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>     <span class="token punctuation">}</span><span class="token punctuation">;</span>     <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>结果是：</p><p>hello 123</p></blockquote><h3 id="Mock修改私有方法-静态方法"><a href="#Mock修改私有方法-静态方法" class="headerlink" title="Mock修改私有方法/静态方法"></a>Mock修改私有方法/静态方法</h3><p>在App中定义以下两个方法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token class-name">String</span> <span class="token function">privateHello</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">"private "</span> <span class="token operator">+</span> str<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">publicHello</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">privateHello</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>①通过继承MockUp&lt;T&gt;   <font color="red">同样适用与静态方法</font></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">AppMocker</span> <span class="token keyword">extends</span> <span class="token class-name">MockUp</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">App</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Mock</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">publicHello</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">privateHello</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Mock</span>    <span class="token comment">// 修改private方法的方法体</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> <span class="token function">privateHello</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"mockedPrivate "</span> <span class="token operator">+</span> str<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testMockPrivate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">AppMocker</span> appMocker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AppMocker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>appMocker<span class="token punctuation">.</span><span class="token function">publicHello</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>结果是：</p><p>mockedPrivate 1</p></blockquote><p>②通过new MockUp&lt;T&gt;对象   <font color="red">同样适用与静态方法</font></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testPrivate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">new</span> <span class="token class-name">MockUp</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">App</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Mock</span>        <span class="token class-name">String</span> <span class="token function">privateHello</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">"mockedPrivate "</span> <span class="token operator">+</span> str<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">publicHello</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>结果是：</p><p>mockedPrivate 1</p></blockquote><p>③在Expectations中录制私有方法</p><p><font color="red" size="8">不行！</font></p><h3 id="其他-1"><a href="#其他-1" class="headerlink" title="其他"></a>其他</h3><p><font color="#dd001b" size="5">更多功能待更新。。。(如果有</font><font size="1"><del>时间</del></font><font color="#dd001b" size="5">的话)</font></p><hr><p>本文参考链接：</p><blockquote><p><a href="http://jmockit.github.io/tutorial">JMockit官方文档</a></p><p><a href="http://www.jmockit.cn/">JMockit中文网</a></p><p><a href="https://blog.csdn.net/guanhang89/article/details/78703945">csdn原创：Jmockit使用详解之Mocking</a></p><p><a href="https://wenku.baidu.com/view/15cb5965dd3383c4ba4cd270.html">百度文库：JMockit中文版入门指南</a></p><p><a href="https://www.jianshu.com/p/b859f59d2634">简书：Jmockit（一）： 入门</a></p><p><a href="https://zhuanlan.zhihu.com/p/106117486">知乎：一文带你玩转JMockit</a></p><p>以及一些其他的资料…</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习心得 </tag>
            
            <tag> jmockit </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IDEA修改本地maven仓库路径自动恢复默认的解决方法</title>
      <link href="posts/f8b898cb/"/>
      <url>posts/f8b898cb/</url>
      
        <content type="html"><![CDATA[<h1 id="IDEA修改本地maven仓库路径自动恢复默认的解决方法"><a href="#IDEA修改本地maven仓库路径自动恢复默认的解决方法" class="headerlink" title="IDEA修改本地maven仓库路径自动恢复默认的解决方法"></a>IDEA修改本地maven仓库路径自动恢复默认的解决方法</h1><blockquote><p>idea中手动修改maven配置文件和本地仓库路径后，再次刷新maven后又会自动恢复为默认的<code>user/.m2</code>这个路径，如下图。</p><p>经过百度以及多次尝试找到了解决办法~</p></blockquote><p><img src="/img/image-20210706135543843.png"></p><h2 id="1-首先指定一个配置文件"><a href="#1-首先指定一个配置文件" class="headerlink" title="1.首先指定一个配置文件"></a>1.首先指定一个配置文件</h2><p>使用默认.m2这个路径也可以，或者在其他路径的也可以。</p><h2 id="2-修改配置文件中的localRepository标签属性"><a href="#2-修改配置文件中的localRepository标签属性" class="headerlink" title="2.修改配置文件中的localRepository标签属性"></a>2.修改配置文件中的<code>localRepository</code>标签属性</h2><p><img src="/img/image-20210706135941585.png"></p><p>如图，改为本地的仓库路径即可</p><h2 id="3-重启idea"><a href="#3-重启idea" class="headerlink" title="3.重启idea"></a>3.重启idea</h2><p>不需要再修改idea的设置，也不用点<code>override</code>,重启</p><p>会发现设置中的本地仓库路径已经变为了配置文件中添加的新路径。</p>]]></content>
      
      
      <categories>
          
          <category> bug </category>
          
          <category> maven </category>
          
      </categories>
      
      
        <tags>
            
            <tag> bug </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>🔒大学那些拼凑不好的记忆碎片</title>
      <link href="posts/7106602/"/>
      <url>posts/7106602/</url>
      
        <content type="html"><![CDATA[<h1 id="大学那些拼凑不好的记忆碎片"><a href="#大学那些拼凑不好的记忆碎片" class="headerlink" title="大学那些拼凑不好的记忆碎片"></a>大学那些拼凑不好的记忆碎片</h1><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&amp;id=1368371706&amp;auto=0&amp;height=66"></iframe><blockquote><p>现在，仍然像无数遍想象中的那样。希望将大学重来一次，将所有的事情做好，将所有的错误避免，将所有的遗憾填补，将所有的时光珍惜…<br>我知道这是不可能的，也有了接受自己接受这一切无论是好是坏结果的觉悟。把它们记录下来。每粒回忆，都不愿遗忘。</p></blockquote><blockquote><p>2021.8.22：我知道人的记忆是不可靠的，它会随着时间淡去、改变、甚至消逝。时间过得真快啊，而我这一个月了还是没有动手写多少东西，也许懒惰是人的天性，而为过去的事情后悔也是人之常情，我如果再一直偷懒不把这篇”毕业论文”完成，而是将它遗忘，那将来一定会因此而后悔的吧。🙄</p></blockquote><p>若能避开猛烈的欢喜，就不会有悲痛来袭。</p><p>回家的路上，涌出许多回忆瞬间，脑中又想起毕业典礼上的第一首歌<a href="https://music.163.com/#/song?id=1368371706">《你曾是少年》</a>，第一次听还是在大二的时候充满了悲观与迷茫，差点听哭了。而现在，再次听到这首歌，竟有了种悲壮和伤感。歌词句句戳心，这难道就是”再听已是曲中人”吗。</p><p>在毕业前的热烈与狂欢之后，安静下来的是伤感，离开母校和同学，一个人的回家路上，感到孤独，好想世界上没有分离，没有悲伤啊。</p><p>我们在小四川聚餐时约定好的以后还要再聚、再聚、绝不走散，真希望大家都能记得和实现啊。曾几何时我们还一起玩笑、开黑、吃饭、散步，想到将来会将彼此淡忘，成为人生过客，会阵阵心酸。</p><p>未来，也是未知。我还能否收获彼此信赖的友谊，还能否遇见掏心掏肺的知己，还能否有充足的时间做喜欢的事，还能否像现在这样投入全身心地去思考和回忆。也许很多人生来就是悲观主义者，我也总是把事情往坏处想，但不想把坏心情带给其他人，不把想法表达出来。什么时候才有人懂我呢，如今只能是”涓涓心事说给自己听”吧。</p><p>想了很久还是无从下笔，要写的和想写的太多，越是回忆，越是感触，明明最讨厌明故宫了，现在竟开始舍不得。</p><p>我是个多愁善感的人吧，一个复杂的，奇怪的人。一笑而过的洒脱我根本做不到啊，乐观向前的想法不曾改变，身体和内心却这么不挣气。回家路上写下这段，眼睛不知不觉湿润了。</p><p>就这样吧，要记录精彩和感动，而不是现在这丢人的不成熟的心情。我的经历，也同每一个人一样，独特而精彩，值得被铭记，想起什么写什么吧～</p><h2 id="毕业的前一天"><a href="#毕业的前一天" class="headerlink" title="毕业的前一天"></a>毕业的前一天</h2><blockquote><p>是我们班级拍毕业照和聚餐的一天，也是最快乐的一天。</p></blockquote><p>其实大学四年，班级活动并不多，烧烤聚餐也总是聚不齐所有人，和大家一起的时光真的弥足珍贵啊。</p><p>早上在明故宫拍，中午我们几个人自己又补拍了些，下午来江宁拍，见证了很多变化，学校真是越来越美了，只不过我们已是要离开的人了，晚上在小四川聚了这最后一餐。</p><img src="/img/20210625175226.jpg" alt="可爱的大家" style="zoom: 33%;"><p>拍照时的艳阳加上黑色的学士服，的确让我们这些习惯空调房间的人难以承受，不过就算是晒黑、中暑，大家也一定会坚持下来的。室外的场景面对阳光我们也要奋力睁大眼睛，抛学士帽一定用最统一的节奏抛出最美的弧度，每一个景点都不想错过，每一处都要反复拍很多遍，每个地点都能勾起我们的美好回忆。</p><img src="/img/20210625175218.jpg" alt="没拍好也要放上来" style="zoom:33%;"><p>直升机旁边的花朵像阳光一样热烈，长空学院的装饰焕然一新已经不是大二上机械原理时的感觉了，砚湖的荷花正盛像是我们毕业的这最好的年华。。。真不想离开这个地方啊。</p><img src="/img/20210625175232.jpg" alt="最美荷花季" style="zoom: 33%;"><p>最后，我们约定不让这场晚餐成为最后的团聚，后面的时光，我们每隔一段时间都要再相聚，都要常联系，我真心希望可以实现。但我知道，今后还能聚齐所有人的概率是那么的渺小，我们马上就各奔东西、散布在各地，不再有统一的闲暇时间，不再无忧无虑地生活、随叫随到。。。</p><img src="/img/lastdinner.jpg" alt="最怀念的团聚" style="zoom: 33%;"><p>班级投票以后聚会的时间间隔，选项有1、2、3、4年，难道还用选吗，我只恨不能再短时间，也只能选最短的那个选项了。</p><h2 id="毕业典礼"><a href="#毕业典礼" class="headerlink" title="毕业典礼"></a>毕业典礼</h2><p>拍照聚餐的第二天，是毕业典礼的举行日，也是大学的最后一天。</p><h2 id="舍友们的方向"><a href="#舍友们的方向" class="headerlink" title="舍友们的方向"></a>舍友们的方向</h2><p>我的室友们：炫昂、子健、东恩。虽然是同一专业的同一班人，但是毕业后的去向却大相径庭，每个人都有自己的选择和自己的人生，希望每个都都可以无怨无悔、快乐常在。</p><h3 id="炫昂"><a href="#炫昂" class="headerlink" title="炫昂"></a>炫昂</h3><h3 id="子健"><a href="#子健" class="headerlink" title="子健"></a>子健</h3><h3 id="东恩"><a href="#东恩" class="headerlink" title="东恩"></a>东恩</h3><h2 id="南京最后的打卡"><a href="#南京最后的打卡" class="headerlink" title="南京最后的打卡"></a>南京最后的打卡</h2><h2 id="那次”没用”的心理咨询"><a href="#那次”没用”的心理咨询" class="headerlink" title="那次”没用”的心理咨询"></a>那次”没用”的心理咨询</h2><p>其实我本没有去心理咨询的必要，大概有几个原因促使我去了：</p><ul><li>一个人(后面会写她)由于自己的经历，很需要被理解和安慰，她去过很多次。我也是从她口中得知心理咨询的存在。</li><li>我觉得大学最后一年了，还有很多事情都没经历和体验过，也是一种遗憾。</li><li>有段时间我陷入了对未来的迷茫、焦虑、担忧，却没人可以倾诉，我希望有人能耐心听我的想法，和我一起讨论哪怕是争论，哪怕并不会安慰和帮助我，愿意听我说我已经很满足了。</li></ul><blockquote><p>可是呢，结果并没有达到预期？<del>甚至…，</del>但是，我也有所收获。</p></blockquote><img src="/img/yifulou.jpg" alt="逸夫科学馆" style="zoom: 33%;"><p>我在她告诉我哪个老师好哪个不好的情况下，还是预约了那个较差的老师。(原因我也说不出来，也许对学校过于信任)</p><p><strong>当初作出的选择，会影响过程和结果。</strong></p><p>预约时间是周四傍晚6点30，我吃完晚饭早早来到明故宫的逸夫科学馆四楼咨询室门口等待。然而这一次等待就到了快七点半，预约在七点半的一个女生来了，随后老师终于也到了。</p><p>老师惊讶地说，今天六点半不是没有预约吗。我比老师更惊讶。</p><p>然后呢，她说既然来了就先让我咨询吧，于是让女生半小时后再来，没错，一个小时的咨询被改成了半小时。我们走进房间坐在沙发上，就这样开始了。我将自己的焦虑和心事都讲了出来，也可能没有都讲出来，因为老师一直打断我。大概说了下面一些：</p><ol><li><strong>我不喜欢这个专业，学习成绩也不好，沉迷游戏，挂过很多课，最终发现自己喜欢计算机，以及我的转行经历，找到了工作，挣脱了枷锁。可是我想到未来在离家遥远的陌生城市独自打拼、害怕35岁被迫优化掉、失业、害怕能否过上希望的生活、害怕未知、害怕压力、害怕孤独、害怕社会的险恶…</strong></li></ol><p><font color="#2971ce">她说，我的担心是多余的，她自己也是一个人在南京工作，还不是这样过来了。说她看起来我就像是即将跳伞的人，望着下面不住地颤抖，不敢迈出这一步，事实上即将毕业走出校园走进社会是个非常高兴的事，就像台下十年终于轮到要上台表演了，有什么好害怕的呢。她说社会没有你想的那么险恶。</font></p><ol start="2"><li><strong>我在无锡没有同学和家人，我害怕孤独</strong></li></ol><p><font color="#2971ce">她说，我为什么想家呢？父母家人也年纪越来越大了，还要像个小孩一样依靠家人吗？要学会独立。问我家乡有什么好的。。我说正是因为他们年纪大了，才想可以经常照顾他们。她说，那你可以把他们接到你工作的地方呀。</font></p><ol start="3"><li><strong>现在的房价物价越来越高，我一想到买房和生活的种种压力就很担忧自己能否做到</strong></li></ol><p><font color="#2971ce">她说了好几次我就像是在面对跳伞而发抖，问我为什么不能去想好的一面，总是往坏处想呢？她说房价也没那么贵，在南京一个大学附近她还去看房了，也才接近2W一平，我说那是很偏的地方，要考虑工作地点。她又说了什么忘记了。</font> </p><ol start="4"><li><strong>我本身学的是机械，四年时间，最终却做与机械毫无关系的工作，也没有考研，我觉得好可惜，好浪费，好遗憾</strong></li></ol><p><font color="#2971ce">她说现在是信息时代，什么专业都离不开计算机，说我可以未来转行做交叉方向，结合机械和计算机会比别人有优势。我想说我不傻，怎么可能再去碰机械？而她看起来很外行，便终止了这个话题。</font> </p><ol start="5"><li><strong>我那些曾经很要好的小学、初中同学，随着时间，渐渐地联系越来越少了，我真的害怕大学这些难得的友谊再被时间吞噬掉</strong></li></ol><p><font color="#2971ce">她说这很正常，你在工作中会遇到更多新朋友，就像高中到大学一样，而以前的朋友各奔东西，是没办法的。她根本不理解我的心情，在我看来她是如此的绝情，我打死也做不到。</font> </p><ol start="6"><li><strong>我看到很多表白墙、论坛帖子的人们分享和倾诉自己的恋爱心酸事，看多了我开始害怕恋爱，我不知道自己哪里好，觉得自己肯定做不好，我害怕吃爱情的苦让自己再痛苦和心碎</strong></li></ol><p><font color="#2971ce">她说，不要再看那些了，过的好的人怎么会发出来，发的都是那些不顺利的人。我认同她说的是幸存者偏差，但我觉得我的担忧是合理的，万一这种事情就被我碰到了呢，如果把那些故事的主角换成我，我会绝望的。</font> </p><ol start="7"><li><strong>我害怕长大、成熟，人与人之间的距离变得遥远，人们拜金、势利、浮躁、复杂，我再也遇不到可以简单的互相喜欢的人了，我不想和一个无趣的人过完后半生</strong></li></ol><p><font color="#2971ce">她像机器人一样重复说我不要害怕未来，乐观点，社会没你想象的那么复杂。她还笑我说她从没听说哪个男生说害怕找不到对象的，都是女生担心年纪大了什么的。我心里在想，我担心的不是找不找得到，我想要的是互相知心、彼此依赖、三观相符的、共同背负的、有趣的…(此处省略一大段我的想象)那个人，否则我宁可单身，我的确因此拒绝了一个追我的女生，后面再写吧。而心理咨询老师显然并不理解我，我很失望。不过她又说，你们这种211毕业多优秀的学生啊，出去别人女生的家长就在公司门口等你下班找你介绍对象呢，你看华为什么的就是这样。。我心想这安慰人也不至于编的这么离谱吧。。况且我希望的是在工作或学习中逐渐认识相向而行最终在一起的感情，而不希望是相亲或是介绍。最后，她说，你工作第一年先别着急谈恋爱，刚进社会在新环境，因为着急而谈恋爱是不负责任的，等稳定之后爱情一定会来临到你身边的。我认为她说的有道理，我应该会的。</font> </p><ol start="8"><li><strong>也许还说了些什么，暂时想不起来了，留个空</strong></li></ol><h2 id="大学两次失败的恋爱尝试"><a href="#大学两次失败的恋爱尝试" class="headerlink" title="大学两次失败的恋爱尝试"></a>大学两次失败的恋爱尝试</h2><h3 id="我追别人的事"><a href="#我追别人的事" class="headerlink" title="我追别人的事"></a>我追别人的事</h3><h3 id="别人追我的事"><a href="#别人追我的事" class="headerlink" title="别人追我的事"></a>别人追我的事</h3><h2 id="为什么奔跑"><a href="#为什么奔跑" class="headerlink" title="为什么奔跑"></a>为什么奔跑</h2><p>在我高中之前其实运动是很少的，或者说几乎就没有，我的身体素质什么的也看上去没有运动天赋，跑步什么的我总是蜜汁自信，却每次都成绩很差，不管是长跑还是短跑，高中的时候体育课开始和同学们一起打球踢球运动起来了，发现运动真的是一种能让人很快乐的方法，篮球进框的兴奋、运动之后疲惫消散超量恢复后的充满能量感、和大家一起挥洒汗水的参与感和归属感，都让我无比开心。但是高中的课程那么多，运动的时间到了高三逐渐被学习压榨到没有多少了，高中毕业后的暑假打了一个暑假的游戏，人是有惰性的也是有惯性的，到了大学的时候，我已经完全回到了高中前的状态，从运动员到电竞选手了。平时不运动，体重越来越高，军训的跑步都让我气喘吁吁。大一也有打过几天篮球，但是同学们也实在是懒得动弹，在大环境之下，游戏还是完胜了运动。</p><p>直到大二，这位高中同学，和我聊天的过程中，她向我分享了跑步的keep截图，让我知道了”夜跑”这个词，其实说到夜跑，我从小就有一种感觉，在夜幕笼罩之下，奔跑在空旷无人的小区里都会让我感到无比的自由和舒适，彷佛那无边的黑夜才是我的归宿一样。在她的指导下，我开始了第一次夜跑，很累，但很爽，光线昏暗的操场上，大家彼此都看不清对方，我可以自由自在地跑，完全不需要注意旁人的眼光，换句话说是如入无人之境。这种感觉就像是一种正反馈，给我源源不断的动力，让我不再畏惧前行，让我享受奔跑。</p><p>她自己其实也只不过那时候刚好开始跑步，但没坚持多久(因为我关注了她的keep)，不过这件事却是改变了我整个大学的节奏，让跑步断断续续地存在于我的整个大学阶段。起初也许是为了找到和她的共同爱好？虽然在那时并不是我的爱好，也许是为了面子，驱使人去做一件事的原因通常是很复杂的，造成一个结果的原因和过程也是很复杂和各种机缘巧合的，只能说让我开始了运动真是个很好的结果，感谢那时的她和那时的我。</p><p>//todo</p><h2 id="承受不住的南京的气候"><a href="#承受不住的南京的气候" class="headerlink" title="承受不住的南京的气候"></a>承受不住的南京的气候</h2><p>南京的天气可以说是被南北分界线害了的典型，因为南京明明和我家里的纬度差不多，但是却因为是”南方”而没有暖气，但是我想说的是，南京这气候不仅不是南方该有的样子，还比我家那边”北方”还要冷！</p><p>有句话说的很好，北方的冷是物理伤害，而南方是魔法伤害，大概来过南京过冬的都能体会到那种刺骨的寒冷吧，宿舍没有暖气，我就只能靠玩电脑发热来取暖，这个可不是贪玩XD。</p><p>南京这假”南方”的恶劣气候不只是冬天，还有夏天和每个季节，夏天热的要死，而且春秋适合人类生存的时候也很少，我之前还发了个朋友圈感觉我总结的很好：</p><p><strong>“南京的天气就像是调洗澡水，从很冷到很热只需要一瞬间。”</strong></p><h2 id="二食堂的那位阿姨"><a href="#二食堂的那位阿姨" class="headerlink" title="二食堂的那位阿姨"></a>二食堂的那位阿姨</h2><h2 id="挂过的科与最后的奋斗"><a href="#挂过的科与最后的奋斗" class="headerlink" title="挂过的科与最后的奋斗"></a>挂过的科与最后的奋斗</h2><p>挂科，在大一与我擦肩而过，高数我只考了61分，显然是老师救了我一把。为什么会这样呢？大概是因为导员要求的强制晚上自习不能呆宿舍的要求我一次都没有遵守吧，由于晚上导员回来宿舍查寝，我就把大寝和小寝的门都关上(这也是慧园为数不多的优势了)，然后房间灯也关上，只开台灯，这样在大寝外面就看不到隔着两层门的我们的寝室的微弱灯光了。估计整层楼或者几层楼都只有我一个人晚上呆在宿舍玩手机不去自习。到了期末，也只复习了几天时间，不挂科真的是奇迹了。原因呢，可能是厌烦了高中的学习生活，放飞自我了吧。</p><p>但是，这样到了大一结束，我居然都没有挂过科。甚至觉得挂科是一件很难的事情。(雾)</p><p>大二，就是挂科噩梦的开始，第一门挂的是电子与电子技术II，并且一学期挂了两门，还有一个机械原理，这是第一个开始上专业课的学期，而我意料之外也是意料之中的是——从这之后，我的几乎所有关于机械的专业课都挂了。（电工是我怎么都没想到会挂的一科，因为在这学期的前一学期是电工电子技术I，我只是复习了几天一个人在东区教室的一楼自习室在蚊虫的包围下把打印店的题目做完了，考试却是出人意料地拿到了89分，这对我这个一学期都不听课的人来说简直就是奇迹发生，而，这学期到了电工电子II的时候，我还以为幸运会再一次眷顾我，刚开学我便认为这是最简单的一门课，而且还有厚厚一踏的打印店题(没错，我就是刚开学就买了打印店题的刷题第一人)，虽然我很清楚，像是上学期那样刷题就能过，平时稍微听一听肯定是不用复习都可以的，但是懒惰无时不在、无孔不入，我在决心好好听课后，第一节课便听不下去了，我当时一定在想：第一节课一般都是老师自我介绍和课程背景什么的，不听也没什么损失，但是到了第二节课我就跟不上了，好在室友的辅导下轻松理解了课程内容完成了作业题，又觉得太简单了，考试前也像这样让室友讲一讲就好了吧~就这样，开始不听课、抄作业，回到上学期的状态，或是有过之而无不及）</p><p>寒假，我抱着好好复习或是说预习的态度拿着书本、群里发的ppt和打印店买的往年<del>真</del>题，回家里复习了几天，但是我这种蓝狗在学校都不想认真学习，回到家这种舒适的环境又怎么可能会静下心来学的进去呢？最终，一拖再拖的我，到了开学才勉强看完了一遍知识点，而题是没什么时间做了，回到学校的前几天就像每次考试的前几天一样，发奋图强，然而机械原理60多飘过，电工的题却和打印店的题完全不同，我早该想起来期末考试的时候电工电子II就是和打印店的题不一样的，甚至题型都大相径庭，更加严重的是我们亲爱的老师给我们出的补考题比期末题还难很多，完全就是不想让我们过的样子。</p><p>开学后，自然是补考没过，分数比期末还要低，每周六要从明故宫坐校车去江宁参加重修班，好在这门课挂的人还是挺多的，有人陪伴的感觉真好，可是对于蓝狗的我们来说，周六早上六点起床赶校车去上课就是不可能事件，结果是，我们就去了一次，一整学期都没有再去了。重修班考试前，我们又是一阵手忙脚乱的复习，因为这段时间还有很多的课同时在期末考试，一天同时复习好几门，这次的重修考试可以说是很简单，看来和上次不是同一个老师出题了，可是我们却没好好复习，错过了这次机会，其实本来还是有机会的(那就是我其实是不想记公式，做题步骤基本都记住了，公式抄在了计算器上(貌似是个危险的行为))，可是这次考试却出现了一个名叫罗运虎的人监考，在考场大吼大叫，喊学生，就像是初中或是高中甚至是小学的教导主任一般，在大学的教室里吆喝，显得很没素质，最过分的是这个人还在明明前两次考试都可以用计算器的情况下声明了不准使用计算器，真是离天下之大谱，我不得不把含泪计算器放回了书包，我知道没有了计算器，就像是人没了灵魂，整场考试全是熟悉又简单的题型，而我却没有一个选项是确定的，就差那一个个简简单单的公式，甚至都不需要计算就可以看出来答案，这场考试的艰难过程夹杂着悔恨与不甘，让我至今都记忆犹新，结果自然是又挂了，分数好像只有30多，而这一次就像是清考一样，大家大部分人都过了，只有我和班上的三个同学都是不学习的那种，没有过。。</p><p>然后是暑假，暑假又是一阵复习，这次真的是觉醒了，把挂了的课从头到尾都有好好看过，甚至还去慕课看了公开课视频，这里说是挂了的课，是因为这一学期我又挂了一些，比如机械设计，时间久了印象都不清了，好像还有一门什么来着也挂了，一学期挂两门的亚子。但是没想到的是，正好碰上了疫情，这一学期变成了线上上课，我已经复习的差不多的知识在该用上的地方却用不到了，因为补考被取消。这学期发生了很多事情，是我改变最大的一学期，从一个堕落的对自己和未来都没有希望垫底学生脱胎换骨，这段时间还是要单独说说，因为发生了不少的事情、以及不小的心理变化，虽然线上上课的这学期还是一节课都没听，但是我却和平时完全不同，完全不同。</p><p>这一学期很充实地在学习，虽然不是学老师讲的任何课，并且是一节课都没听过。不过线上上课也伴随着线上考试，期末的考试是基本上通过腾讯会议开视频+慕课、超星、雨课堂这些平台来做题的，在听到这一消息的时候其实我还是比较高兴的。一个是因为不用攒到下一学期开学的时候和秋招冲突而造成严重的后果耽误一生，另一个是线上考试对于我这种”技术人员”来说是有很多<code>机会</code>的(dddd懂得都懂)，我已经开始研究很多技术来辅助考试了，因为我知道已经攒了两门课要下学期开学考了，每多挂一门都是十分严重的后果，因为届时我的精力将会非常有限，所以在学习准备秋招的同时，开始研究这些东西，包括但不限于：</p><ul><li>虚拟摄像头：OBS和虚拟摄像头，用来替换掉腾讯会议的视频源，从而达到可以在没有监视的情况下随意地翻看”笔记”或者网络资料等。可是这个计划算是失败了，我试了录制趴在电脑桌前答题的视频放上去循环，但是总感觉会有破绽，事实上监考老师和研究生也不会去每个人都放大去仔细看吧，不过被抓到就完蛋了，还是谨慎为妙。</li><li>光学模糊：其实就是用我的摄像头很垃圾的手机放到很远的地方去拍摄作为腾讯会议的镜头，然后电脑亮度调到很大、房间的亮度布置的低一些，使得我的手机摄像头”散光”，拍摄的效果很模糊，经过反复尝试，这一研究成果被付诸实践，在真正的战场上发挥了作用。</li><li>刷题脚本：其实在很早以前我就已经开始使用这些在同学们看来很”高端”的科技了，tempermonkey是我浏览器上的老居民、greasyfork是我经常光顾的论坛，有这些基础，在greasyfork搜搜便可以轻松使用各种的刷题脚本，慕课自动答题、辅助题库查询等，这类的脚本我提前试用了很多，适配慕课的最多，学习通的稍微少些，而且学习通还有各种限制，切屏截图检测、禁止复制等，我又下了些相关的破解工具。只不过脚本在最终的用处并没有想象的那么大，只有少数课用到了，而且大部分题都查不到，最后还是靠学小易发挥了很大的作用。</li><li>禁用浏览器的传感器：超星学习通很恶心，搞了各种操作来和学生作对，又是各种的浏览器listener来监控学生们的切屏、搞了限制复制的限制来让学生不能复制题目。不过万能的网友们还是找到了很多方法来解决这些问题，比如说禁止切屏是我们最大的障碍，因为有了<code>光学模糊</code>，我就只要能在电脑上完成辅助的答案查找工作即可。解决方法：用chrome，在F12 debug模式下，找到Elements -&gt; Event Listeners，把下面关于mouse的所有选项都关掉，这样浏览器就无法监控我们的鼠标切出动作了。</li></ul><img src="/img/image-20210902191120190.png" style="zoom:67%;"><ul><li>学小易+模拟器：这个是重点环节了，很多科能过都靠它的很大功劳。学小易是一个搜题app，在之前的哪个时间偶然发现的已经记不得了，平时搜题的场景我都会第一时间想起来它，因为太好用了，尤其是选择填空题，比作业帮小猿搜题这些好用太多了。可惜的是它只有移动端，我只能在电脑上开模拟器，界面调成亮的颜色以混入白色的网页背景不容易被发现，然后模拟器界面尽量缩小，固定在界面的顶层，打开学小易，就这样，拯救了我的很多科。只不过也有很多遗憾，过于依赖让我追悔莫及(工艺)。</li><li>手机虚拟机和网络拦截：该死的工艺(我好恨工艺和工艺老师，不写出来咽不下这口气)，反复横跳，一开始说全是选择题，还模拟考试了一次，在超星上，后面几个老师的意见不一致又改成了有大题，这个还行，我觉得我只要有学小易就没问题的，因为模拟考试的题基本上都能查到。可是老师又意见不一致改成了手机上考试，因为手机的监控更严格一些？好家伙我真的服，我们这是个期末考试而已，又不是什么重大的比赛，而且还是疫情期间，平时上课又不好好上，这几个老师平时我会偶然听到一点她们的讲话，吐字又不清晰，态度也不怎么端正，一副懒洋洋的样子却又有一种我们亏欠她的感觉，让我们回答问题没人答或是有人答错了就开始不耐烦，自己教的不行还很生气我们的样子。最后考试的时候也不当人，别的科目都顺顺利利的老师也会没那么严格，还会在最后一节课讲讲考点之类的，但是工艺老师却是啥都没讲，课设也是一副自己很辛苦很累的样子对学生不耐烦，考试变来变去。话说回考试形式来，改成了手机考试的话我的计划就全行不通了，而通知的时间距考试也非常的接近了，我只能连夜准备对策，在各种论坛贴吧看 ，超星的移动端都很难攻克，好在还是有好心人找到了办法，用一个网络拦截软件可以把超星的切屏请求拦截掉，这样即使切屏被检测到了app也没法发送请求给服务器，就可以安全切屏了。但是又传来噩耗，就是这个方法已经在数天前的超星更新后失效了。然后的工作是学小易怎么才能不切屏复制文字进去查题呢，在万能的论坛上又找到一个方法就是虚拟机，装了一个忘记名字的虚拟机，里面安装了学小易，虚拟机的窗口可以不占满全屏，而是作为一个悬浮窗来展示，这样的话可以在超星答题的同时复制文字进去查，看起来终于是解决了工艺老师恶心人的恶心人方式。可是在临近考试前，又突然改成了网页端加电脑前置摄像头加手机腾讯会议在侧面拍的方式，这样的操作属实是不想评价了，所以这个大费周章的策略最终没有被用于实践。不过也可以是作为一个不错的探索过程吧。</li><li>OCR：这个是临时想出来的，因为超星改为了电脑版答题，我以为已经解决了所有问题，和其他的科目一样可以顺利地执行我毫无疏漏的计划时，工艺又开始搞些ex的操作，选择题查不到，好像都是老师现出的题，答题还都是以图片的形式贴出来的，为了不让我们复制，您可真是辛苦了！我试了手打在学小易试图搜索，但是手在键盘上让在镜头之下的我十分紧张，不敢敲键盘，几分钟才缓缓打出几个字，还没搜到，时间一分一秒地过去，再不想想办法就来不及了，我想起了万彩办公大师的ocr功能，当时我竟然还不知道qq截图的ocr功能是那么的好用，然后万彩的垃圾ocr识别的全是不通顺的语句，甚至还不如百度翻译的好，又是缓慢地ocr再粘贴到学小易去，结果什么都没搜到，这些题显然也是老师出出来精心准备来恶心人的。</li><li>鼠标侧键的修改：经过第一场考试的心惊胆战怕被发现手在键盘上复制粘贴后，我想到了鼠标侧键绑定复制粘贴的方法，这样就可以安全又方便地复制到学小易了，在后面的战场上，这一利器也发挥了不可或缺的作用。</li><li>草稿纸变成草稿本：在家的好处就是草稿是用自己的，只要在本子的后面某些页上写写公式什么的，考试的时候可以理所应当地翻页过去然后很自然地翻看hhh，这个是最基础的功能了，加上垃圾的手机摄像头，就是完美的伪装。</li></ul><p>工艺是怎么挂的：经过上面的叙述，也差不多知道工艺这老师的恶心之处了，考试形式变来变去，知识点还不给我们说，而其他班的老师在考试前讲解了考试的重点，根据他们班同学的说法，基本上就是在给考试透题，好家伙，我们真就是后妈生的呗。好在我在考试的前一天晚上和往常一样，问室友这门课的考试题型，这次甚至是打电话边和我讲我边学边记，然后我还看了一个和我当时头像一样的b站up讲的工艺习题课，这个老师是川大的，把讲课的录播视频放在b站上，讲的有一说一真的很好，和我们那个老师比起来，我甚至没有什么基础都可以听懂。至此，选择题交给学小易，填空题不清楚有没有的情况写也交给了学小易，简答题和答题就交给学小易和百度还有我室友给我的突击辅导了。我觉得我已经精心计算了每一种题型的大致得分和结果，不出以外的情况下没什么问题了。而是意料之外的是这老师出的都是现场出的新题，你说你监考都这么严格了还非要出原创题，学小易也搜不到，百度也搜不到，草稿本上记的公式和简答题答案也全对不上，可谓是地狱般地一场考试，经过煎熬与无助后，还是抱着水一水疫情期间老师会放的松一些的想法把简答题和答题都像模像样的写满了，但是没想到的是，老师一点也不给情面，其他课都过了，工艺却打脸般地给了我58分。看到这个分数的时候，如同晴天霹雳，当时的形式已经不允许我再挂科了，我已经积累了几门大课，每一门都不是能轻轻松松过的，而且我还要在时间已经不够的情况下准备着秋招，即使是专心准备秋招，但是风险还是非常大的，因为我如果秋招上岸，但是毕业却没有过哪怕一门课，我毕不了业，就什么都白费了。我很痛苦，想哭的感觉持续了很久，那几天都打乱了我的复习准备秋招的节奏。</p><p>课设是怎么过的：相比之下，这学期虽然有两门课设，但是是线上做课设，就很简单了。不只是我，很多人都不想做这些学校安排的毫无意义浪费时间的课设，只不过，他们都太怂了，我这种翘课无数的人怎么会不敢做出这些尝试错过这次机会呢？故，我和班上另外两个同学打算一起买课设，没错，看似老是故意为了防止重复题目出的均匀分布，让每个班的人几乎都不一样，但是网络有无限的可能。数控课设我们在”南航小蚂蚁群”里找到了一个愿意帮忙做课设的大佬，她一个人帮我们三个做，需要用matlab做GUI还要写写像算法题一样的简短又费劲的代码，matlab我们都没有学过，所以需要现学，这个时间我可没有精力再去学和找工作无关的东西了，于是，我们商量了以每人30的价格帮做课设，很快就完成了，不得不说好好学习的人效率也是很高的，忍不住开始想如果我的大学也像初中高中的时候那样学习，我是不是到这个时候也是和她一样学有余力还能帮助别人呢？因为帮助别人的事情，自从上了大学不好好学习以来，就很少再有过了。话说回来，垄断的力量就是，她还坐地起价，要我们一人50，但是想想50就能解决很麻烦的事情节省很多的精力，也是件很不错的事情呀。然后程序做好了答辩的时候就点一点给老师演示一下就好了，我们的主要工作就在于写好文档了，水文档我可是十分的擅长，网上找到很多类似的课设文档，直接每份对比一下，然后按照老是的要求复制粘贴一下，图片数据改成自己的，再用xmind画一个结构图就好了，这里我反而还比其他人做的好，大家大都是用wps等画的很简单朴实的流程图，而我用了xmind，用了个什么主题还挺好看的，答辩的时候老是还问了我这是用什么做的，我只能说我当时满脸的骄傲和窃喜2333.然后工艺课设呢，挺恶心的，还得面对这个恶心的工艺老师，这个老是不仅要求给的很随意，而且检查起来还很严格，群里有人问她，他的回答问题的态度也很冷淡，后来就没有人再问了。不得不说，这个老师的人品属实不行，还故意搞了两次答辩，中期检查和最终稿检查，中期美其名曰给我们督促进度，我们那个时候还要准备考试，还是线上，老师也不会体谅我们，我们好几个班在班群里投票统计能做完的人数，我们班全部都是不能做完，然后班长反馈给老师，老师还很不满的样子，最终还是给我们延期了。我们的工艺题目估计是每年都一样的，所以问往年的学长或者网上都很容易找到，不就是cad画个图，写个文档什么的，然后答辩的时候就乱扯一扯就好了。我很幸运，我的这个步骤的图和文档刚好网上就有，30块一套，买下来看了看，大概看懂了就直接不用管了，中期答辩的时候，老师安排了一天的时间，让我们一个一个进腾讯会议共享屏幕和她答辩，一开始她还装作很认真的样子，问的很细(与其说是很认真负责，不如说是故意在刁难的样子)，然后到了后面，老师就开始不耐烦了，让我们快一点，我笑了，明明是她自己拖延时间现在回来反咬一口可还行。我还是很幸运，我们班是最后一个班答辩的，而我们班20个人我也是靠后的，所以到了我的时候已经是快5点要下班的时间了，而我后面还些人够让他再听一两个小时的了，所以我就开了个头，老师说什么我都说嗯、好的之类的，很快啊，3分钟我就下来了，买的图老师也看不出来什么，就稍微改了点，一直用到了最终答辩。后面不想说了，这老师没事找事，我明明中期没有的问题，她都说了没啥问题了，最终答辩有个我强行找了点问题出来，我说中期你说过这里没问题，她说不可能，没法沟通的，我说那好吧我下来改，就结束了，最后我也没改哈哈哈。这两个课设可以说是对一般的同学来说有够受的了，我算是很幸运吧，试想我如果还是想大家一样去搞这些课设还可能做不出来，既耽误了课程有可能课设挂了导致延期毕业，还有影响我的秋招准备，耽误一生的事情，总之，结局是好的就好了。</p><p>时间切到大四上学期，一边准备着秋招天天刷题看面经，同时还要准备着开学的三场补考：机械设计、工艺、电子技术II。以下是堕落之后的我的奋斗篇：</p><p>// todo</p><h2 id="唯二认真学完的课——cpp和前端基础"><a href="#唯二认真学完的课——cpp和前端基础" class="headerlink" title="唯二认真学完的课——cpp和前端基础"></a>唯二认真学完的课——cpp和前端基础</h2><h2 id="我眼中的机械"><a href="#我眼中的机械" class="headerlink" title="我眼中的机械"></a>我眼中的机械</h2><h2 id="那些设想过的道路"><a href="#那些设想过的道路" class="headerlink" title="那些设想过的道路"></a>那些设想过的道路</h2><h2 id="那些年我趴过无数次的阳台栏杆"><a href="#那些年我趴过无数次的阳台栏杆" class="headerlink" title="那些年我趴过无数次的阳台栏杆"></a>那些年我趴过无数次的阳台栏杆</h2><h2 id="游戏亦或消逝的时间"><a href="#游戏亦或消逝的时间" class="headerlink" title="游戏亦或消逝的时间"></a>游戏亦或消逝的时间</h2><h2 id="吉他与音乐社"><a href="#吉他与音乐社" class="headerlink" title="吉他与音乐社"></a>吉他与音乐社</h2><h2 id="游泳社和江宁游泳馆"><a href="#游泳社和江宁游泳馆" class="headerlink" title="游泳社和江宁游泳馆"></a>游泳社和江宁游泳馆</h2><h2 id="江宁四食堂"><a href="#江宁四食堂" class="headerlink" title="江宁四食堂"></a>江宁四食堂</h2><p>大一基本都是在一食堂和二食堂和外卖吃的饭，到大二已经腻了，想到一食堂就没有了食欲。</p><p>开始不断尝试去别的食堂，五食堂、三食堂、和园食堂、当然还有四食堂。</p><p>慢慢地，发现四食堂二楼——原先叫民族食堂，是真的好吃：</p><ul><li>兰州拉面、贵州羊肉面/粉、西安酸辣粉、云南锡纸饭、石锅饭。。。</li></ul><p>记得大二下学期，整周全天满课的日子，我们宿舍三个人中午下课后都会从西区跑很远去东区四食堂二楼吃，以至于每天12点下课，回到宿舍就已经马上一点，午睡前的玩手机时间都没了。</p><p>兰州拉面算是光顾最多次的店了，大家都选默认粗细的面，我也尝试了其他类型的，二细、荞麦棱等，二细这个粗细和在家那边吃的”棍棍面”亦或是”拉条子”的粗细一致，大概就是筷子的粗细，从那之后我就一直吃二细的了。</p><p>羊肉面羊肉粉，很奇怪，不知道加了什么样的调料配方，真的太香了，是那种羊肉加上很多闻上去就让人食欲大增的香料混合而成的味道，比方便面都香(方便面是那种素香，而这家的确实一种肉香233表达不清也大概是这个意思)，唯一不足的是他们家的面是用南方的那种机器做出来的面，相比之下，我仍然喜欢手工的面吧。</p><p>酸辣粉，永远是排队最长的一家！又便宜又好吃，但是就是太慢了，只有一位大叔在操作，煮粉、倒汤、拿碗。。。而同时只能煮两三份的样子，一次要一分钟多，这效率在食堂来说可真的不算高。但是仍有无数人排队去等，这就是它的魅力，土豆粉和红薯粉粗粉细粉都太好吃了！</p><p>锡纸饭和石锅饭是同一家，虽说是云南的，而室友炫昂也是云南的，他却在那边从没吃过这种锡纸饭233，地大物博吧。然后锡纸饭加上石锅饭种类多达十几种吧，每种都尝试了一遍，体验新鲜事物和没吃过的口味美食真的是件很有趣的事情。石锅饭，很烫，里面有时候回放土豆白菜什么的好像，我吃饭特别慢，吃到一半，里面的汁已经烧干了，然后热量还没散去，就这样，土豆条变成了薯条，又变成了土豆干，最后，没了。真是个神奇的变化过程，然后土豆白菜都”蒸发”掉了，这怎么行呢？后来，吃石锅我都要去买瓶水，边浇水边吃🤣</p><h2 id="那些不友善的人"><a href="#那些不友善的人" class="headerlink" title="那些不友善的人"></a>那些不友善的人</h2><blockquote><p>🚫负能量警告</p></blockquote><p>在南京，我看到许多浮躁的、不礼貌的、不友善的、没耐心的、不考虑别人的、自私的、功利的、拥有我所讨厌的性格人。很多地方我都感受到大城市陌生人人与人之间的冷漠和敌视，远没有家乡的淳朴民风，这让我更加想念家乡，也让我对南京的印象差了很多。虽然我作为旁观者没有参与，现在仍然能想起来：</p><ul><li>走在路上或是地铁，许多人没有礼貌地说过“借过”，而是强硬地挤位置</li><li>一个人去莫愁湖的那次，因为手机亮度低而没有让显示的二维码被闸机扫出来，我便调节手机亮度，后面的中年男性便不耐烦地说”来让我先进去”，但他明明可以稍微耐心地多等那么几秒钟就可以</li><li>拍班级毕业照，我们一起去了长空学院四楼走廊摆动作，有一位老师模样的人走过，摄影师小声给我们说”大家把走廊位置让出来不要堵住了”，这位路过的人说了句”你们赶紧拍完走就不会堵住了”并头也不回不做停留地”潇洒离开”，我们都能听出来这个人话里的敌意。为人师长，如此的计较，如此的胸怀，原谅我不敢恭维</li><li>值机时排队，我前面的女士看起来是第一次坐飞机不太懂流程，没有在她前面的人拖运办好后立即上前，而是愣了一下，我后面有一个男人的声音响起”快点我们还排队呢”。我深刻理解女士第一次不懂流程的惊慌与无助，但我很不认同男人的做法，为什么不能心平气和地耐心指导一下呢？为什么一定要将自己的浮躁宣泄在弱者的身上呢？</li><li>还有很多很多…</li></ul><p>又想起去鸡鸣寺我那些<a href="gaattc.life/posts/75544e59/">不可能实现的愿望</a>，果然让一切都按自己的想法运行是如此的不现实啊</p><h2 id="关于毕设的一些想法"><a href="#关于毕设的一些想法" class="headerlink" title="关于毕设的一些想法"></a>关于毕设的一些想法</h2><h2 id="我想感谢一个女生"><a href="#我想感谢一个女生" class="headerlink" title="我想感谢一个女生"></a>我想感谢一个女生</h2><h2 id="明故宫印象"><a href="#明故宫印象" class="headerlink" title="明故宫印象"></a>明故宫印象</h2><h2 id="江宁印象"><a href="#江宁印象" class="headerlink" title="江宁印象"></a>江宁印象</h2><h2 id="南航印象"><a href="#南航印象" class="headerlink" title="南航印象"></a>南航印象</h2><h2 id="我的舍友"><a href="#我的舍友" class="headerlink" title="我的舍友"></a>我的舍友</h2><h3 id="——炫昂"><a href="#——炫昂" class="headerlink" title="——炫昂"></a>——炫昂</h3><h3 id="——子健"><a href="#——子健" class="headerlink" title="——子健"></a>——子健</h3><h3 id="——东恩"><a href="#——东恩" class="headerlink" title="——东恩"></a>——东恩</h3><h2 id="我的同学"><a href="#我的同学" class="headerlink" title="我的同学"></a>我的同学</h2><p>虽说也就20个人，但是每个人都有很多的回忆，我真是心有余而力不足了，以后希望不会遗忘掉这段记忆，还有时间和精力写完他们吧。</p><h2 id="我的王者历程"><a href="#我的王者历程" class="headerlink" title="我的王者历程"></a>我的王者历程</h2><h2 id="我是高敏感人群这个事实"><a href="#我是高敏感人群这个事实" class="headerlink" title="我是高敏感人群这个事实"></a>我是高敏感人群这个事实</h2><h2 id="给自己贴的标签"><a href="#给自己贴的标签" class="headerlink" title="给自己贴的标签"></a>给自己贴的标签</h2>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
          <category> 记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>通过shields.io制作好看的网站徽标</title>
      <link href="posts/21eb916f/"/>
      <url>posts/21eb916f/</url>
      
        <content type="html"><![CDATA[<h1 id="通过shields-io制作好看的网站徽标"><a href="#通过shields-io制作好看的网站徽标" class="headerlink" title="通过shields.io制作好看的网站徽标"></a>通过shields.io制作好看的网站徽标</h1><p><font color="#3a89df" size="5">本文还在更新中~</font></p><blockquote><p>细心留意，会发现有很多网站都有这种徽标，在我苦苦寻找之后，终于搞明白啦</p></blockquote><p>传送门：<a href="https://shields.io/">shields.io官网</a></p><h2 id="1-示例"><a href="#1-示例" class="headerlink" title="1.示例"></a>1.示例</h2><p>这些徽标本质是图片，但是有：</p><ul><li>很丰富的风格、颜色、logo可供自定</li><li>并且支持html、markdown、asciiDoc、reStructuredText等等,虽然后两种不知道是啥哈哈</li><li>支持一定格式的请求来达到信息的动态展示效果。</li></ul><p><strong>比如markdown：</strong></p><p><img src="https://img.shields.io/badge/Auth-GAATTC-3790ee?style=flat&amp;logo=Google"></p><p><strong>html(嵌入a标签超链接):</strong></p><p> <a target="_blank" href="https://gaattc.life"><img src="https://img.shields.io/badge/Auth-GAATTC-3790ee?style=flat&amp;logo=Google" title="很高兴遇到你"></a></p><p><img src="/img/image-20210516193249220.png"></p><h2 id="2-制作静态徽标"><a href="#2-制作静态徽标" class="headerlink" title="2.制作静态徽标"></a>2.制作静态徽标</h2><p>按照如下任意一种规则写url即可：</p><pre class="line-numbers language-url" data-language="url"><code class="language-url">https://img.shields.io/badge/&lt;LABEL&gt;-&lt;MESSAGE&gt;-&lt;COLOR&gt;https://img.shields.io/static/v1?label=&lt;LABEL&gt;&amp;message=&lt;MESSAGE&gt;&amp;color=&lt;COLOR&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>label: 标签名</p><p>message: 信息</p><p>color: 自定义颜色，支持颜色名、hex、rgb等多种表达方式。</p><p><strong>几个规则:</strong></p><p>标签名和信息中：</p><ul><li><code>--</code>代表<code>-</code></li><li><code>__</code>代表<code>_</code></li><li><code>_</code>or<code> space</code>代表<code>space</code></li></ul><p>颜色名可以有：</p><p><img src="https://img.shields.io/badge/-brightgreen-brightgreen" alt="brightgreen"><img src="https://img.shields.io/badge/-green-green" alt="green"><img src="https://img.shields.io/badge/-yellowgreen-yellowgreen" alt="yellowgreen"><img src="https://img.shields.io/badge/-yellow-yellow" alt="yellow"><img src="https://img.shields.io/badge/-orange-orange" alt="orange"><img src="https://img.shields.io/badge/-red-red" alt="red"><img src="https://img.shields.io/badge/-blue-blue" alt="blue"><img src="https://img.shields.io/badge/-lightgrey-lightgrey" alt="lightgrey"><br><img src="https://img.shields.io/badge/-success-success" alt="success"><img src="https://img.shields.io/badge/-important-important" alt="important"><img src="https://img.shields.io/badge/-critical-critical" alt="critical"><img src="https://img.shields.io/badge/-informational-informational" alt="informational"><img src="https://img.shields.io/badge/-inactive-inactive" alt="inactive"><br><img src="https://img.shields.io/badge/-blueviolet-blueviolet" alt="blueviolet"><img src="https://img.shields.io/badge/-ff69b4-ff69b4" alt="ff69b4"><img src="https://img.shields.io/badge/-9cf-9cf" alt="9cf"></p><h2 id="3-徽标样式"><a href="#3-徽标样式" class="headerlink" title="3.徽标样式"></a>3.徽标样式</h2><p>style属性</p><table><thead><tr><th><code>?style=plastic&amp;logo=appveyor</code></th><th><img src="https://img.shields.io/badge/style-plastic-green?logo=appveyor&amp;style=plastic" alt="plastic"></th><th>立体</th></tr></thead><tbody><tr><td><code>?style=flat&amp;logo=appveyor</code></td><td><img src="https://img.shields.io/badge/style-flat-green?logo=appveyor&amp;style=flat" alt="flat"></td><td>扁平</td></tr><tr><td><code>?style=flat-square&amp;logo=appveyor</code></td><td><img src="https://img.shields.io/badge/style-flat--square-green?logo=appveyor&amp;style=flat-square" alt="flat-square"></td><td>扁平去圆角</td></tr><tr><td><code>?style=for-the-badge&amp;logo=appveyor</code></td><td><img src="https://img.shields.io/badge/style-for--the--badge-green?logo=appveyor&amp;style=for-the-badge" alt="for-the-badge"></td><td>大方块？</td></tr><tr><td><code>?style=social&amp;logo=appveyor</code></td><td><img src="https://img.shields.io/badge/style-social-green?logo=appveyor&amp;style=social" alt="social"></td><td>社交样式</td></tr></tbody></table><h2 id="4-logo"><a href="#4-logo" class="headerlink" title="4.logo"></a>4.logo</h2><p>①logo属性</p><p>支持如下logo：</p><pre class="line-numbers language-none"><code class="language-none">bitcoin, dependabot, discord, gitlab, npm, paypal, serverfault, stackexchange, superuser, telegram, travis<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>②但是太少了，所以接着看：</p><p><a href="https://simpleicons.org/">simpleicons官网</a></p><p><img src="/img/image-20210516195012065.png"></p><p>这里提供了大量logo可供选择(这不比fontawesome强多了？🥴)</p><p>使用方法就是参数加上</p><pre class="line-numbers language-none"><code class="language-none">?logo=&lt;logo名&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>即可。</p><p>③自定义logo，利用base64为图片编码</p><pre class="line-numbers language-none"><code class="language-none">?logo=data:image/png;base64,…<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>有很多在线工具如<a href="http://tool.chinaz.com/tools/imgtobase/">站长之家</a>可以使用，比较方便，但是request headers限制在8192 B，所以不支持太大的图片。</p><h2 id="5-其他参数"><a href="#5-其他参数" class="headerlink" title="5.其他参数"></a>5.其他参数</h2><p>待更新，偷个懒休息一下~~~</p><p>先看官网吧</p><h2 id="6-动态徽标"><a href="#6-动态徽标" class="headerlink" title="6.动态徽标"></a>6.动态徽标</h2><p>待更~~~</p>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
          <category> 分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分享 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在CloudflarePages上部署hexo，再见了vercel</title>
      <link href="posts/a037197e/"/>
      <url>posts/a037197e/</url>
      
        <content type="html"><![CDATA[<h1 id="在CloudflarePages上部署hexo，再见了vercel"><a href="#在CloudflarePages上部署hexo，再见了vercel" class="headerlink" title="在CloudflarePages上部署hexo，再见了vercel"></a>在CloudflarePages上部署hexo，再见了vercel</h1><blockquote><p>刚把网站搬到vercel上，几天后vercel就被墙了ORZ</p><p>希望cloudflare依然坚挺</p></blockquote><h2 id="1-注册CloudFlare"><a href="#1-注册CloudFlare" class="headerlink" title="1.注册CloudFlare"></a>1.注册CloudFlare</h2><p><a href="https://pages.cloudflare.com/">传送门</a></p><h2 id="2-常规操作：静态文件上传到github"><a href="#2-常规操作：静态文件上传到github" class="headerlink" title="2.常规操作：静态文件上传到github"></a>2.常规操作：静态文件上传到github</h2><p>不用多说了，参考部署到vercel的<a href="https://gaattc.life/posts/ee92e53c">第二步</a></p><h2 id="3-关联github账号"><a href="#3-关联github账号" class="headerlink" title="3.关联github账号"></a>3.关联github账号</h2><p>同样的操作，见vercel部署</p><h2 id="4-创建项目"><a href="#4-创建项目" class="headerlink" title="4.创建项目"></a>4.创建项目</h2><p>选择<code>创建项目</code>：</p><p><img src="/img/image-20210514184620061.png"></p><p>选择仓库，即第二步的仓库，选择<code>开始设置</code>。</p><p>选择项目名称和生产分支，然后构建设置这里无需操作：</p><p><img src="/img/image-20210514184838962.png"></p><p>选择<code>保存并部署</code>。</p><h2 id="5-自定义域名"><a href="#5-自定义域名" class="headerlink" title="5.自定义域名"></a>5.自定义域名</h2><p>直接设置域名会提示：添加到您的 Pages 项目之前，您需要将 DNS 转移到 Cloudflare。</p><p>需要将dns服务器设为cloud flare的。</p><h2 id="6-DNS转移到cloudflare"><a href="#6-DNS转移到cloudflare" class="headerlink" title="6.DNS转移到cloudflare"></a>6.DNS转移到cloudflare</h2><p>参考<a href="https://blog.csdn.net/weixin_43153854/article/details/109779984">https://blog.csdn.net/weixin_43153854/article/details/109779984</a></p><p>比如我是腾讯云的域名，有两个NS记录如下：</p><pre class="line-numbers language-url" data-language="url"><code class="language-url">goddard.dnspod.net.heptagon.dnspod.net.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>将其改为：</p><pre class="line-numbers language-url" data-language="url"><code class="language-url">elliott.ns.cloudflare.comwren.ns.cloudflare.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>然后比较慢，等等等~</p><blockquote><p>注册机构可能需要 24 小时来处理名称服务器更新。当您的站点在 Cloudflare 上激活时，您会收到一封电子邮件。</p></blockquote><h2 id="6-更新：腾讯云域名更改dns服务器"><a href="#6-更新：腾讯云域名更改dns服务器" class="headerlink" title="6.更新：腾讯云域名更改dns服务器"></a>6.更新：腾讯云域名更改dns服务器</h2><p>改NS记录是不行的，难怪等了几天还没变化，实际上要在控制台改：</p><p>①进入<a href="https://console.cloud.tencent.com/domain">腾讯云控制台</a></p><p>②找到你要更改的域名</p><p>③在<code>更多</code>中选择<code>修改DNS</code>即可</p><p><img src="/img/image-20210522111700260.png"></p><p>国内网络环境下生效还是挺快的，不需要等待72小时。</p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习心得 </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>matery自定义banner图片更换频率</title>
      <link href="posts/289a5094/"/>
      <url>posts/289a5094/</url>
      
        <content type="html"><![CDATA[<h1 id="matery自定义banner图片更换频率"><a href="#matery自定义banner图片更换频率" class="headerlink" title="matery自定义banner图片更换频率"></a>matery自定义banner图片更换频率</h1><blockquote><p>主题默认是根据星期数一天一换的，但是随之而来存在一些问题：</p><ul><li>比如参与轮换的图片上限只能是7张，我想多放一些</li><li>比如我想每小时一更换，亦或每分钟更换呢</li></ul><p>让我们来自定义一下吧</p></blockquote><h2 id="1-首先找到静态资源的位置"><a href="#1-首先找到静态资源的位置" class="headerlink" title="1.首先找到静态资源的位置"></a>1.首先找到静态资源的位置</h2><p>在主题文件夹中的medias目录里,</p><pre class="line-numbers language-dir" data-language="dir"><code class="language-dir">hexo\themes\hexo-theme-matery-master\source\medias\banner<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这里就是默认存放banner图的位置了。</p><h2 id="2-再寻找更换图片的逻辑"><a href="#2-再寻找更换图片的逻辑" class="headerlink" title="2.再寻找更换图片的逻辑"></a>2.再寻找更换图片的逻辑</h2><p>找到<code>bg-cover-content.ejs</code>文件，</p><pre class="line-numbers language-dir" data-language="dir"><code class="language-dir">hexo\themes\hexo-theme-matery-master\layout\_partial\bg-cover-content.ejs<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>发现每日更换图片的代码：</p><p><img src="/img/image-20210511135428447.png"></p><p>主要逻辑就是利用字符串拼接路径，其中图片名为<code>星期数+".jpg"</code>，</p><p>new Date().getTime()方法就是获取当前星期数。</p><h2 id="3-开始修改"><a href="#3-开始修改" class="headerlink" title="3.开始修改"></a>3.开始修改</h2><p>方便起见还是按照原本的逻辑，稍作修改达到我们的要求即可。</p><blockquote><p>比如我想放10张图片，并且每分钟改变一次</p></blockquote><p>首先是每分钟改变，则先获取 当前的分钟数：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMinutes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后放10张图片并按顺序重命名好：</p><p><img src="/img/image-20210511140633083.png"></p><p>最后，由于是10张，可以通过分钟数对10取余，得到余数作为文件名即可</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMinutes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如此以来就达到目的了，</p><p><img src="/img/image-20210511135320576.png"></p><h2 id="4-补充"><a href="#4-补充" class="headerlink" title="4.补充"></a>4.补充</h2><p>在原本基础上小改的缺点就是，走不出原本的框架：</p><ul><li><p>比如拼接文件名，最后是”.jpg”，我们放的图片就必须是jpg格式</p></li><li><p>比如根据时间改变图片的逻辑，我们的图片命名必须是从0开始连续的数字</p></li><li><p>比如想要用随机数的方法，排除时间因素直接随机出来</p></li></ul><p>这些问题要解决也不难，可以自己重写一下这部分~</p><h2 id="5-附：js中Date对象的常用获取时间方法"><a href="#5-附：js中Date对象的常用获取时间方法" class="headerlink" title="5.附：js中Date对象的常用获取时间方法"></a>5.附：js中Date对象的常用获取时间方法</h2><p><a href="https://www.w3school.com.cn/jsref/jsref_obj_date.asp">转</a></p><table><thead><tr><th><a href="https://www.w3school.com.cn/jsref/jsref_Date.asp">Date()</a></th><th>返回当日的日期和时间。</th></tr></thead><tbody><tr><td><a href="https://www.w3school.com.cn/jsref/jsref_getDate.asp">getDate()</a></td><td>从 Date 对象返回一个月中的某一天 (1 ~ 31)。</td></tr><tr><td><a href="https://www.w3school.com.cn/jsref/jsref_getDay.asp">getDay()</a></td><td>从 Date 对象返回一周中的某一天 (0 ~ 6)。</td></tr><tr><td><a href="https://www.w3school.com.cn/jsref/jsref_getMonth.asp">getMonth()</a></td><td>从 Date 对象返回月份 (0 ~ 11)。</td></tr><tr><td><a href="https://www.w3school.com.cn/jsref/jsref_getFullYear.asp">getFullYear()</a></td><td>从 Date 对象以四位数字返回年份。</td></tr><tr><td><a href="https://www.w3school.com.cn/jsref/jsref_getYear.asp">getYear()</a></td><td>请使用 getFullYear() 方法代替。</td></tr><tr><td><a href="https://www.w3school.com.cn/jsref/jsref_getHours.asp">getHours()</a></td><td>返回 Date 对象的小时 (0 ~ 23)。</td></tr><tr><td><a href="https://www.w3school.com.cn/jsref/jsref_getMinutes.asp">getMinutes()</a></td><td>返回 Date 对象的分钟 (0 ~ 59)。</td></tr><tr><td><a href="https://www.w3school.com.cn/jsref/jsref_getSeconds.asp">getSeconds()</a></td><td>返回 Date 对象的秒数 (0 ~ 59)。</td></tr><tr><td><a href="https://www.w3school.com.cn/jsref/jsref_getMilliseconds.asp">getMilliseconds()</a></td><td>返回 Date 对象的毫秒(0 ~ 999)。</td></tr><tr><td><a href="https://www.w3school.com.cn/jsref/jsref_getTime.asp">getTime()</a></td><td>返回 1970 年 1 月 1 日至今的毫秒数。</td></tr><tr><td><a href="https://www.w3school.com.cn/jsref/jsref_getTimezoneOffset.asp">getTimezoneOffset()</a></td><td>返回本地时间与格林威治标准时间 (GMT) 的分钟差。</td></tr><tr><td><a href="https://www.w3school.com.cn/jsref/jsref_getUTCDate.asp">getUTCDate()</a></td><td>根据世界时从 Date 对象返回月中的一天 (1 ~ 31)。</td></tr><tr><td><a href="https://www.w3school.com.cn/jsref/jsref_getUTCDay.asp">getUTCDay()</a></td><td>根据世界时从 Date 对象返回周中的一天 (0 ~ 6)。</td></tr><tr><td><a href="https://www.w3school.com.cn/jsref/jsref_getUTCMonth.asp">getUTCMonth()</a></td><td>根据世界时从 Date 对象返回月份 (0 ~ 11)。</td></tr><tr><td><a href="https://www.w3school.com.cn/jsref/jsref_getUTCFullYear.asp">getUTCFullYear()</a></td><td>根据世界时从 Date 对象返回四位数的年份。</td></tr><tr><td><a href="https://www.w3school.com.cn/jsref/jsref_getUTCHours.asp">getUTCHours()</a></td><td>根据世界时返回 Date 对象的小时 (0 ~ 23)。</td></tr><tr><td><a href="https://www.w3school.com.cn/jsref/jsref_getUTCMinutes.asp">getUTCMinutes()</a></td><td>根据世界时返回 Date 对象的分钟 (0 ~ 59)。</td></tr><tr><td><a href="https://www.w3school.com.cn/jsref/jsref_getUTCSeconds.asp">getUTCSeconds()</a></td><td>根据世界时返回 Date 对象的秒钟 (0 ~ 59)。</td></tr><tr><td><a href="https://www.w3school.com.cn/jsref/jsref_getUTCMilliseconds.asp">getUTCMilliseconds()</a></td><td>根据世界时返回 Date 对象的毫秒(0 ~ 999)。</td></tr><tr><td><a href="https://www.w3school.com.cn/jsref/jsref_parse.asp">parse()</a></td><td>返回1970年1月1日午夜到指定日期（字符串）的毫秒数。</td></tr></tbody></table><h2 id="6-推荐⭐-我现在使用的：随机法"><a href="#6-推荐⭐-我现在使用的：随机法" class="headerlink" title="6.(推荐⭐)我现在使用的：随机法"></a>6.(推荐⭐)我现在使用的：随机法</h2><p>有几张图片都可以方便地适应，比如我还是那10张图，那么需要从0~9中产生随机数：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">9</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>ps：当然，不需要被原有的规则禁锢，图片名只要是连续数字，依然可以产生符合要求的随机数，详情参考js的<code>Math.random()</code>方法使用即可。</p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习心得 </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git在push时出现”fatal: unable to access &#39;https://github.com/...“的解决方案</title>
      <link href="posts/8135c12a/"/>
      <url>posts/8135c12a/</url>
      
        <content type="html"><![CDATA[<h1 id="git在push时出现”fatal-unable-to-access’-https-github-com-39-“的解决方案"><a href="#git在push时出现”fatal-unable-to-access’-https-github-com-39-“的解决方案" class="headerlink" title="git在push时出现”fatal: unable to access’ https://github.com/...'“的解决方案"></a>git在push时出现”fatal: unable to access’ <a href="https://github.com/...'%E2%80%9C%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88">https://github.com/...'“的解决方案</a></h1><blockquote><p>出现这种问题有许多种情况，根据不同错误提示选择不同解决方式</p></blockquote><p><img src="/img/image-20210513191817547.png"></p><h2 id="1-OpenSSL-SSL-read-Connection-was-aborted-errno-10053"><a href="#1-OpenSSL-SSL-read-Connection-was-aborted-errno-10053" class="headerlink" title="1.OpenSSL SSL_read: Connection was aborted, errno 10053"></a>1.OpenSSL SSL_read: Connection was aborted, errno 10053</h2><p>这种情况可能是因为ssh安全验证问题导致的，解决方法：</p><p>打开git bash，执行以下命令。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ssh-keygen -t rsa -C <span class="token string">"youremail@example.com"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其中邮箱如果忘记可以通过以下 命令查看。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config --global -l<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>生成的ssh文件默认位置是：</p><pre class="line-numbers language-dir" data-language="dir"><code class="language-dir">C:\Users\username\.ssh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>找到<code>id_rsa.pub</code>文件，使用记事本或文本编辑器打开，然后复制内容。</p><p>打开github，在设置里找到并添加SSH key即可.</p><p><img src="/img/image-20210510143241801.png"></p><hr><p>这个问题也可以通过第二种问题的方式解决。</p><h2 id="2-SSL-cerificate-problem-self-signed-certificate"><a href="#2-SSL-cerificate-problem-self-signed-certificate" class="headerlink" title="2.SSL cerificate problem: self signed certificate"></a>2.SSL cerificate problem: self signed certificate</h2><p>这种SSL证书问题，可以通过禁用证书验证解决</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config --global http.sslVerify <span class="token string">"false"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="3-Filename-too-long"><a href="#3-Filename-too-long" class="headerlink" title="3.Filename too long"></a>3.Filename too long</h2><p>文件名或路径过长，解决方式：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config --global core.longpaths <span class="token boolean">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="4-Timeout"><a href="#4-Timeout" class="headerlink" title="4.Timeout"></a>4.Timeout</h2><p>一般是网络问题，测试一下与服务器的连接。</p><h2 id="5-其他"><a href="#5-其他" class="headerlink" title="5.其他"></a>5.其他</h2><p>还有可能是文件过大导致的，修改缓冲大小为500M：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config http.postBuffer <span class="token number">524288000</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="6-附赠之warning-LF-will-be-replaced-by-CRLF-in-xxx"><a href="#6-附赠之warning-LF-will-be-replaced-by-CRLF-in-xxx" class="headerlink" title="6.附赠之warning: LF will be replaced by CRLF in xxx."></a>6.附赠之warning: LF will be replaced by CRLF in xxx.</h2><p>The file will have its original line endings in your working directory.</p><p>这个问题禁用自动转换即可：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config --global core.autocrlf <span class="token boolean">false</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h2 id="7-更新ssh协议解决https网络问题"><a href="#7-更新ssh协议解决https网络问题" class="headerlink" title="7.更新ssh协议解决https网络问题"></a><font color="red">7.更新ssh协议解决https网络问题</font></h2><blockquote><p>最近发现push经常失败，原因可能是github.com的dns污染，虽然可以手动测速换host，但是太麻烦而且时断时续的，解决：</p><p><strong>网页端访问github.com</strong>：安装《github加速》插件，完美解决；</p><p><strong>命令行操作</strong>：换ssh协议push就没问题了</p></blockquote><p>首先执行上面的方法1，生成并配置ssh key，</p><p>确保没有禁用ssl证书，如果禁用，执行方法2，其中false改为true即可，</p><p>git bash下验证是否配置成功：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ssh</span> -T git@github.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>显示”Hi &lt;yourname&gt;! You’ve successfully authenticated, but GitHub does not provide shell access.”即代表成功。</p><p>最后，在根目录配置中修改仓库地址为ssh协议即可：</p><p><img src="/img/image-20210516121448458.png"></p>]]></content>
      
      
      <categories>
          
          <category> bug </category>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> bug </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在Vercel上部署hexo，再见了gitee</title>
      <link href="posts/ee92e53c/"/>
      <url>posts/ee92e53c/</url>
      
        <content type="html"><![CDATA[<h1 id="在Vercel上部署hexo，再见了gitee"><a href="#在Vercel上部署hexo，再见了gitee" class="headerlink" title="在Vercel上部署hexo，再见了gitee"></a>在Vercel上部署hexo，再见了gitee</h1><blockquote><p>由于gitee的pages服务维护三个月，三个月后不知道会不会又出来些收费限流之类的，所以决定迁移到vercel了~</p></blockquote><h2 id="1-注册vercel"><a href="#1-注册vercel" class="headerlink" title="1.注册vercel"></a>1.注册vercel</h2><p>直接使用github关联注册就可以了，很方便并且推荐用这种方式。</p><h2 id="2-上传部署目录到github仓库"><a href="#2-上传部署目录到github仓库" class="headerlink" title="2.上传部署目录到github仓库"></a>2.上传部署目录到github仓库</h2><p>这一步不用多说，如果是之前就使用github的pages服务那就更方便了。不过还是写一下吧😅</p><p>①建一个公共仓库(<del>好像也可以是私有的？</del>)</p><p>②修改<strong>根目录</strong>下的_config.yml配置文件中deploy项：</p><p><img src="/img/image-20210509221039752.png"></p><p>repo改成仓库地址，注意一下分支是master还是main哦。</p><p>③在根目录的<code>package.json</code>文件添加脚本，很重要，否则部署后404</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"build"</span><span class="token operator">:</span> <span class="token string">"hexo generate"</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/img/image-20210509221424840.png"></p><p>④执行三连</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo clhexo ghexo d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>push成功的话就好了。</p><h2 id="3-进入vercel控制台进行部署"><a href="#3-进入vercel控制台进行部署" class="headerlink" title="3.进入vercel控制台进行部署"></a>3.进入vercel控制台进行部署</h2><p>在dashboard中选择<code>new project</code>,</p><p><img src="/img/image-20210509221614721.png"></p><p>选择<code>Import Git Repository</code>，再选择关联自己的github账号并授权，这里直接授权所有仓库即可；</p><p>等读取到仓库列表后选择hexo所在仓库，选择<code>import</code>；</p><p>选择Select Vercel Scope这里使用下面的<code>PERSONAL ACCOUNT</code>然后<code>select</code>；</p><p>目录默认就是根目录root，直接下一步即可；</p><p>最后可以修改项目名，框架可以不用管，然后选择<code>deploy</code>即可部署完成。</p><p><img src="/img/image-20210509222022160.png"></p><h2 id="4-自定义域名"><a href="#4-自定义域名" class="headerlink" title="4.自定义域名"></a>4.自定义域名</h2><blockquote><p><a href="https://snow.js.org/hexo-vercel/">参考链接</a></p></blockquote><p>①点击项目卡片进入详情</p><p>②选择<code>view domains</code></p><p>③可以使用vercel提供的二级域名，直接添加即可(前提是没被占用)</p><p><img src="/img/image-20210509222852367.png"></p><p>格式有两种：</p><pre class="line-numbers language-url" data-language="url"><code class="language-url">xxx.now.shxxx.vercel.app<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><font color="red">④添加自定义域名</font></p><p>在输入框中输入域名，点击右侧 <code>Add </code>，下方会提示“Invalid Config”，然后根据情况：</p><ul><li><p>如果是根域名，请在你的 DNS 解析处添加 A 记录，指向 <code>76.76.21.21</code></p></li><li><p>如果是子域名，请在你的 DNS 解析处添加 CNAME 记录，指向 <code>cname.vercel-dns.com</code></p></li></ul><p>添加记录后等待片刻再刷新，下面显示两个蓝色对号即表明验证成功。</p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习心得 </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Teamviewer已达设备数量上限的解决方法</title>
      <link href="posts/d73cfbb1/"/>
      <url>posts/d73cfbb1/</url>
      
        <content type="html"><![CDATA[<h1 id="Teamviewer已达设备数量上限的解决方法"><a href="#Teamviewer已达设备数量上限的解决方法" class="headerlink" title="Teamviewer已达设备数量上限的解决方法"></a>Teamviewer已达设备数量上限的解决方法</h1><blockquote><p>Teamviewer免费版最多只支持两台设备绑定，如果要在第三台设备上登录账号就会显示”已达最大设备数”</p><p>解决方法有以下几种</p></blockquote><h2 id="法一、每次登录时选择临时登录"><a href="#法一、每次登录时选择临时登录" class="headerlink" title="法一、每次登录时选择临时登录"></a>法一、每次登录时选择临时登录</h2><p>这个方法是最好的，优点是可以任意更换设备而无限制，缺点是每次登录都要授权。</p><p><img src="https://www.pianshen.com/images/793/dfa848de1e94c0a12d82d11bcc3d3909.png" alt="登录选项"></p><h2 id="法二、解绑不用的设备"><a href="#法二、解绑不用的设备" class="headerlink" title="法二、解绑不用的设备"></a>法二、解绑不用的设备</h2><p>如果之前以及永久信任了设备，那么就不能再选择临时授权了，此时要在新设备登录就需要解绑。</p><p>①登录teamiewer的<a href="https://login.teamviewer.com/">管理页面</a>即<a href="https://login.teamviewer.com/">https://login.teamviewer.com</a></p><p>②在右上角头像处点<code>编辑配置文件</code></p><p><img src="/img/image-20210509185157190.png"></p><p>③在<code>免费设备</code>里选择要解绑的设备就可以了</p><p><img src="/img/image-20210509185332082.png"></p><p><font color="red" size="6">注意:</font><strong>解绑设备的次数有限，所以这个方法慎用</strong>。</p><h2 id="法三、注销账号再重新注册和绑定"><a href="#法三、注销账号再重新注册和绑定" class="headerlink" title="法三、注销账号再重新注册和绑定"></a>法三、注销账号再重新注册和绑定</h2><p>简称删号重开。</p><p>在法二的编辑配置文件里，左下角会有一个重开按钮：</p><p><img src="/img/image-20210509185738737.png"></p><p>注销后可以使用原邮箱再次注册，没有次数限制，就是比较麻烦吧哈哈~</p>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
          <category> 分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分享 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>🔒仍然</title>
      <link href="posts/11c637ba/"/>
      <url>posts/11c637ba/</url>
      
        <content type="html"><![CDATA[<h1 id="仍然"><a href="#仍然" class="headerlink" title="仍然"></a>仍然</h1><blockquote><p>也许想的太多并不是一件坏事，和毫无想法比起来。</p></blockquote><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&amp;id=27588028&amp;auto=0&amp;height=66"></iframe><p>最近一切都很平静 除了内心变化<br>我一直是个自以为是能看透一切的人<br>最近认识了一个人 逐渐听了一部分故事<br>我才发现 自己是多么愚蠢<br>我所经历的那点事 不过是微风拂过般<br>而经历了狂风暴雨 却还能振作起来 认真生活认真思考 的别人的故事<br>让我内心无比震撼<br>我就像一个打针喊疼的小孩偶然间看到了别人在截肢 看到了自己从未体验过也从未想象过的可能的感受<br>我一直活在自己的世界里 认为自己经历了多少 认为自己现在多么强大<br>可是当把别人经历的一部分分给我 我一定会承受不住</p><hr><p>现在我相信每个人都有自己的故事<br>即使平时隐藏的很深<br>可是当那些刻在脑海里的片段呈现出来 画面在心里播放出来<br>当那些陷入绝望时的挣扎话语刺痛我的内心<br>我才明白<br>一个乐观温柔的人背后也能有我无法承受之重<br>我明白能深刻记住那些画面需要多少遍回忆<br>也知道这些回忆伴随着多少心碎<br>我为我的自以为是感到惭愧和自责<br>我也终于深刻地理解了人与人之间能够相互理解是很难很难很难的事<br>以及能够被理解是多么多么多么幸运的事<br>我终于开始真正理解了ta一点点<br>很久没有如此敬重一个人了<br>我小心翼翼地不允许我们之间的信任被任何不该有的想法破坏<br>并由衷地祝愿ta得到幸福、远离悲伤</p><hr><p>“往事不堪回首” 我想指的并不是不要去回忆和思考<br>而是要拼命地去回忆和思考 来让往日的遗憾和悲伤不再重现</p><hr><p>与这个人认识并交谈是个神奇的事情<br>我从未想过有一天能和一个并不是很熟悉的人谈起过去<br>谈起从来没和别人说过的事<br>是ta用自己的悲伤唤起了我很久没有想起的悲伤<br>当我陷入了消沉后<br>又是ta用自己的坦然和承受教会我怎么去面对<br>以及珍惜一切<br>也许过段时间、毕业之后就不再有任何联系和交集<br>我也会记得这位生命中珍贵而又不凡的客人</p><hr><p>这篇文章我准备花一整天时间来写<br>不为给任何人看 也不想给别人看到<br>只为纪念这个将我唤醒让我重新开始思考的人<br>多年后如果能想起这篇文章<br>希望我还能记得此时的自己和此时这份感触</p><hr><p>我有时是个自私的人<br>希望别人都能理解我尊重我信任我需要我<br>希望一切都能按我的想法运行<br>有时也有我自己都难以置信的无私<br>我相信所有人都是善良的<br>希望所有人都能幸福、快乐、远离遗憾和悲伤<br>我无比渴望世界变得美好 人与人之间不再隔阂<br>这些 远比我的自私有意义</p><hr><p>现在的我有着已经能让我很满足的家庭、同学、朋友、工作、技能<br>我一直以来从没有知足过 不断地抱怨和幻想<br>没有认认真真地对待生活 对待自己<br>我只是一直喜欢想象未来、嫌弃当下<br>多年来几乎没有什么心理上的成长<br>现在的我 真的不配拥有美好</p><hr><p>被信任是我这辈子最喜欢的感觉之一<br>人是个很复杂的动物 信任与被信任也是十分珍贵的<br>我感受到了别人的信任带来的温暖 决心永远守护这份信任<br>绝不辜负慷慨给与我的信任<br>所以ta是谁和ta的故事 以及这篇文章 我不会给任何人说</p><hr><p>以前在操场夜跑经常能看到四个女生并排<br>说笑着、悠闲地走着<br>真的很羡慕这样的宿舍，每个人都能参与其中，每个人适得其所<br>高中同学在说自己考研失利 问其原因<br>答不想学习 而是和舍友去操场一聊天一下午<br>我的内心依然充满羡慕<br>我自己的宿舍只有三个人了 而每个人都有自己的事情 都常常很忙<br>我们从没有过一起去操场悠闲地散步说笑 这也是一种遗憾吧</p><hr><p>我写不出深刻入骨的文字 没有挥洒自如的才华<br>其实除了我自己 所有人看来我都是个普普通通的人吧 也确实如此<br>在灰暗的时候、孤独的时候<br>不应该像小孩子一样渴求别人的理解和配合<br>应该给自己好好充电 充实<br>我多年来一直都是不断地给自己找事情找兴趣做 但不过是对孤独的逃避 对自己的麻醉<br>本应该真正面对自己 去体验和经历很多美好和感动 认识很多可以分享喜悦可以共担烦恼的朋友<br>我浪费了如此多的时间 去做无意义的事情<br>虽然我认为大学里学习并不是主要的事<br>但我甚至没好好听过几节课、去图书馆的次数屈指即可数清<br>时间流逝地和人们口中一样快<br>我毫不珍惜地做法也和人们口中的一样可笑</p><hr><p>也许明白了几个人生道理<br>经历了几件触动心弦的事情<br>偶然顿悟了一些事情的根源<br>但这些远不是大彻大悟的充分条件<br>我经历的 还太少太少<br>我渴望被人理解 想把我的故事和想法没日没夜地倾诉<br>真正能用心理解、感同身受、心意相通的人<br>一辈子遇到一个 已是至幸<br>所以 先把故事讲给自己听 并期待着未来有人能一起重温这段时光</p><hr><p>这一年来也发生了不少事<br>我的人生轨迹我在此转了一个大弯<br>要说成长也不是没有 不知从何时起<br>至少我变得和人们口中的”佛系”类似了<br>不再攀比竞争 不再发生过矛盾<br>不再看不起任何人 不再诅咒任何人<br>不会再对任何人有敌意<br>不会在别人兴致冲冲来找我时感到不耐烦<br>遇到插队也只是笑一笑体谅一下每个人有自己的急事<br>舍友和女朋友打电话时 内心也会祝愿他们可以一直好好的<br>和所有人见面微笑 和陌生人说谢谢<br>如此地和谐友善<br>对待别人 就像对待自己一样</p><hr><p>大学，大概是我人生最低的低谷<br>是我浪费最多的时间<br>是我最难熬的日子<br>但是不知道从何时起 我永远都是幻想未来会更好 永远不珍惜现在<br>初中、高中、大二、大四<br>在不听课挂了科之后 还在想着翘课<br>在快要毕业的年纪 还在厌恶着学校<br>还在想象工作后会有多好<br><font color="#7aa5f2">人生中太多的遗憾都源于没有早知道</font><br>要知道现在我做的和没做的 也会如此<br>几年后我会不会说起大学时光<br>提及一句”早知道”呢</p><hr><p>不过每个人理解的大学不一样吧<br>过年表姐的男友说不抽烟不喝酒还能叫大学吗 并谈论起他们大学时的风光<br>我切身感受到了”人以群分”<br>在他看来大学生都是像他们自己所做的一样 享受、放纵、无忧无虑<br>而我身边的同学们 大都是不愿运动甚至不愿出门的宅男 每个人也都有自己的小爱好<br>但几乎没有人对抽烟喝酒有兴趣 大家都仍然像中学时代那样一尘不染 挺好的<br>我为我自己能生活在这样一群人之中感到很幸运 因为我不喜欢世俗和喧嚣 未来也不会<br>不过说实话我也不喜欢现在的生活<br>我希望的是在一群各有所长的很厉害人之中 自己也是其中不可或缺的一员<br>能帮助他人 能被人们所需要 能感受到自己存在的价值<br>这样的意义对我来说比名垂青史更大 因为实现自己价值的快乐 无需让人们都记住<br>有人知道就好了</p><hr><p>我喜欢看一些感人的、治愈的电影或动画<br>但是也很少看 以至于收藏夹里准备了很多 却迟迟没能去消化掉<br>并非是懒 而是我从小看电影就莫名地会进入到电影中去<br>和主角感受同样的喜悦、感动，或是悲伤，或是愤慨<br>然后每次在睡前看电影 总会迟迟不能入睡<br>脑海中自动重播着电影的片段、回忆，一遍遍再仔细感受<br>所以看电影不但影响情绪还影响睡眠？<br>但是说真的 只有电影才能让我真实地触动 真实的治愈<br>真实地感受世界的美好、人类的丰富情感</p><hr><p>今天看了一个视频《时光钟摆》<br>好像是我第一次看视频掉下眼泪<br>这种感觉真好<br>内心与故事共鸣 感情溢出胸口 溢出眼眶<br>仿佛自己在经历、在领悟、在反思<br>我害怕失去、害怕变老 无法想象那样的场景 但又无法避免<br>很多遗憾就像这个视频中一样<br>等遗憾来临 就算用生命也换不回来了<br>所以 时时刻刻都要提醒自己珍惜一切啊<br>明明是一个平时看一定不会有这么触动普通的故事<br>却让我难得地流出两滴泪<br>看来这几天我的内心真的有在变化吧</p><hr><p>我也想成为一个温柔的人<br>打开了因为集数过多而一直没看的《夏目友人帐》<br>这段时间<br>就让我好好感受一下温柔带给世界的美好吧<br>才看了几集而已 简单的小感动 让我鼻子酸酸的<br>这种感觉好幸福<br><img src="/img/image-20210319213036468.png" alt="这也是我所愿"></p><p>“我想成为一个温柔的人，因为曾被温柔的人那样对待，深深了解那种被温柔相待的感觉。”</p><hr><p>最近回忆起了很多不会让人快乐的事<br>我又变得多愁善感起来<br>出校走走也只能暂时好起来<br>聊天打出”哈哈”不是我真的在笑<br>而是希望对方可以笑<br>常常肚子很饿却没有食欲<br>米饭让阿姨只打一半却也吃不完<br>前几天突然感情爆发 中午躺在床上只能听到突兀的心跳声和呼吸声 久久睡不着<br>我已经有很久很久没哭过了吧 真的好想找个没有人能听到的地方好好哭一场 没有任何理由地<br>我积累下的情感一直没能发泄出来过 一直以来都是被忙碌的事情所遮住<br>可是当忙碌消失时 像一块遮羞布被无情揭掉<br>让我藏在内心羞于言表的那些情感一下子 全都袒露在外<br>而我找不到一个地方化解这些情感 只能仍然像往常一样</p><hr><p>其实人生真的很短很短<br>并且会越来越快<br>这样安静地坐在椅子上认真反思的时刻以后也许不会再有<br>能和我在深夜讲着平日埋藏心底的真心话的人也许不会再有<br>现在这样健康的身体、年轻的活力、清醒的头脑也许不会再有</p><hr><p>机械是一个悲伤的专业<br>无法将所有人凝聚在一起<br>大四的最后一学期<br>眼看着周围的人们各奔东西<br>像原本一簇缠好的线在末端分叉开来 并以后会越分越远<br>大家都有各自的想法<br>喜欢机械的，不喜欢机械的<br>也都奔向不同的方向 这是个悲伤的现实<br>在后来<br>出国的人可能会定居移民 远走他乡<br>升学的人也会踏上人生更高的台阶 接触更多优秀和有趣的人<br>工作的我 也一定要认真过好每一天<br>我虽然并不那么喜欢这个专业 但我仍热爱每一个同学<br>也许现在的同学在毕业后就再也不会相遇了<br>我什么也做不了 就像看着风吹走树叶</p><hr><p>身边有很多人没有目标地走着<br>他们不知道为什么学习为什么考研<br>但他们可以很平静地接受一切的到来<br>到了该考研的时候便好好复习<br>该做毕设的时候便认真对待<br>没事的时候就打打游戏看看动漫<br>仿佛他们的一切都发生的很自然而然<br>这样也未免不是一种活的简单的好办法<br>而我总是不甘于现状 不想活的普普通通<br>有太多自己的想法<br>反而过的并不轻松</p><hr><p>写这些东西的时候仍然时不时有种奇妙的感觉涌上心头<br>我之前以为是心痛或是悲伤<br>现在觉得<br>应当是感动<br>虽然和那些夜晚涌上心头的感觉很像<br>但我现在已经放下了悲伤吧<br>剩下的就是感动了 为什么感动呢</p><hr><p>大学期间也有过两次恋爱的尝试<br>虽然最终证明都不合适<br>但有时也会庆幸自己没有陷入爱河<br>因为现在这样的我一定会把一切搞砸<br>我可能将不再随心所欲、无拘无束<br>我也不知道怎么去像舍友一样电话粥可以煲一整晚<br>每天只吃泡面做兼职也要用花呗给对方买礼物<br>坐二十几个小时最便宜的绿皮火车去哄对方开心<br>异地多次分分合合、吵架争论，最终又能破镜重圆<br>所以我只能默默地羡慕和祝福他吧<br>我自己呢<br>在几年后被催婚、被相亲，匆匆忙忙认识、交往、成家<br>我不敢去想 更不知道怎么做<br>好麻烦啊 人要是单性繁殖不好吗</p><hr><p>偶尔像现在这样想到往事、想到未来<br>变得情绪低落或是无助<br>也没什么不好的<br>因为我还在清醒地思考 还有个感情丰富的内心<br>与其变得麻木变得浑浑噩噩<br>我更喜欢这样的自己</p><hr><p>现在只想去看看风景<br>在操场尽情迈步<br>耐心地读完一本书<br>看看治愈的剧<br>安安静静<br>感受生活的美好<br>时间的流逝</p><hr><p>看到美好的剧情嘴角不住上扬<br>和故事中的人物一起感受喜悲和感动<br>听着ed看着空耳弹幕发出傻傻的笑声<br>每天坚持锻炼、按时吃饭睡觉<br>这大概也是我最好的状态了</p><hr><p>好想自己也能写出简洁而又饱含情感的文字<br>像一个忧愁的诗人一样尽情抒发自己的一切、想法和情感<br>读到那些文字时我能感受到背后真切的感情变化 每个字都直击我的内心<br>也多希望有人能像我自己读自己写过的话一样 虽然写的很平庸<br>也能每个字都认真读完 理解我的期待和无奈<br>但是人越长大 心与心距离也就越遥远了<br>浮躁的人类谁还会有时间静下来看这些枯燥的文字呢</p><hr><p>也好想活在动画和电影里<br>认认真真做好自己 做一个简单纯粹的个性鲜明的热爱生活的有趣多彩的人<br>没有现实中的复杂、虚假和不友善<br>我很多时候很脆弱或者说懦弱<br>喜欢逃避 不敢面对<br>不喜欢麻烦别人 自己也讨厌麻烦<br>也许说内心细腻也对 喜欢考虑别人的感受也对 完全不够成熟也对<br>我还没有长大、成熟 但人总有一天要如此 我期待着那天的到来</p><hr><p>很羡慕那些阳光乐观的人<br>我要是能成为那样的人该多好<br>要是能带给大家帮助和快乐多好<br>我果然还是独自抱着我的幻想<br>仍然走在未知的道路上</p><hr><hr><p><img src="/img/wallhaven-28ydex.jpg" alt="希望我的眼里也能有光"></p>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
          <category> 想法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>南京最后的时光</title>
      <link href="posts/56effdf6/"/>
      <url>posts/56effdf6/</url>
      
        <content type="html"><![CDATA[<h1 id="南京最后的时光"><a href="#南京最后的时光" class="headerlink" title="南京最后的时光"></a>南京最后的时光</h1><blockquote><p>自从来了明故宫校区，仿佛从花园走到了监狱，周遭的环境、发生的事情都让我开心不起来，明明是大四最后一学期了，压抑了这么久真的想释放出来啊。我发现我呆在同一个地方久了、闲下来了、每天都重复着了，心情就会低迷，所以，在最后的时间里，我决定把南京没走过的地方都去一次吧，哪怕是孤单一人，也可以让我心情好起来呢。</p></blockquote><p><font color="red" size="5">未完待更ing。。。</font></p><h2 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h2><p>这些是我已经去过的地方：</p><table><thead><tr><th></th><th></th><th></th></tr></thead><tbody><tr><td>中山陵</td><td>夫子庙</td><td>老门东</td></tr><tr><td>玄武湖</td><td>总统府</td><td>明故宫</td></tr><tr><td>南京大屠杀纪念馆</td><td>栖霞山</td><td>仙林(南大南邮南师南财)</td></tr><tr><td>雨花台</td><td>南京大学鼓楼校区</td><td>羊山公园</td></tr></tbody></table><p>这些是还没去过的地方：</p><table><thead><tr><th></th><th></th><th></th></tr></thead><tbody><tr><td>莫愁湖</td><td>鸡鸣寺</td><td>红山动物园</td></tr><tr><td>瞻园</td><td>河海大学</td><td>南京理工大学</td></tr><tr><td>东南大学</td><td>牛首山</td><td>南京海底世界</td></tr></tbody></table><h2 id="1-3月14日莫愁湖"><a href="#1-3月14日莫愁湖" class="headerlink" title="1. 3月14日莫愁湖"></a>1. 3月14日莫愁湖</h2><p><img src="/img/last_time_NJ.jpg" alt="镇楼，picgo出了点问题照片过段时间一起更"></p><p>去莫愁湖的这天，大概是因为在学校呆太久了，每天都是枯燥重复的生活，心情很不好，虽然学习还没解封还是走小道出校了。</p><p>坐上地铁并不知道目的地是哪里，看着行程牌，望见三个字<code>莫愁湖</code>，莫名地很亲切，并且其实这个地方大二就和室友试图去过，只不过刚好碰上景区维修没有如愿，这次算是补上遗憾了。</p><p>我去湖类的景点都是环绕湖走一圈的(比如玄武湖，其实也就这一个)，于是我顺时针地走莫愁湖。湖的两个半圆或者说两岸完全是两种景色，我按顺时针先走的这一边湖面开阔、垂柳微风、樱花海棠细枝生嫩叶以迎接春天的到来，人也比较少，我出去游玩还是比较喜欢人少的地方的，一点也不喜欢拥挤和嘈杂。湖的另一半有很多沿岸的大樱花树，游客也多了起来，樱花真的很美，可惜的是我一个人来，更可惜的是天色渐渐暗了下来，已经不是观赏的时间了。</p><p>走湖的一圈就像是人生的选择一样，选择先走人少的地方，获得了清静和开阔，但也错过了后面的樱花，而反之亦是。但人生的选择，只能有一次，并且，永远无法预知未来的结果。这就是这趟旅行的意义吧。</p><h2 id="2-3月16日鸡鸣寺"><a href="#2-3月16日鸡鸣寺" class="headerlink" title="2. 3月16日鸡鸣寺"></a>2. 3月16日鸡鸣寺</h2><p><img src="/img/jimingsi_sakula.jpg"></p><h2 id="3-3月18日红山动物园"><a href="#3-3月18日红山动物园" class="headerlink" title="3. 3月18日红山动物园"></a>3. 3月18日红山动物园</h2><p><img src="/img/deerinredmountain.jpg"></p><h2 id="4-3月21日瞻园"><a href="#4-3月21日瞻园" class="headerlink" title="4. 3月21日瞻园"></a>4. 3月21日瞻园</h2><p><img src="/img/zhanyuan1.jpg"></p><p>说是南京难得的园林也没错，说是打着园林的幌子里面是博物馆也没错。可能很多人喜欢博物馆，而我是真的一点也不喜欢。因为陈列的历史文件、文物、模型，我认为我参观并不是为了研究历史也不可能是，而我也更不喜欢装模做样地看不懂也去看那些东西，陈列的文件文物，看过后可能很快就会忘记，没有意义。</p><p>不过就园林来说，还是挺美的，虽然我并没有去过多少类似的地方，本来想去苏州的一直也没去。我觉得我可能不适合呆在这种地方，和明故宫一样，呆久了会感到压抑的。</p><h2 id="5-4月4日牛首山"><a href="#5-4月4日牛首山" class="headerlink" title="5. 4月4日牛首山"></a>5. 4月4日牛首山</h2><p><img src="/img/niushoushan44.jpg"></p><h2 id="6-4月29日中山陵"><a href="#6-4月29日中山陵" class="headerlink" title="6. 4月29日中山陵"></a>6. 4月29日中山陵</h2>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
          <category> 记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>🔒我的愿望</title>
      <link href="posts/75544e59/"/>
      <url>posts/75544e59/</url>
      
        <content type="html"><![CDATA[<h1 id="我的愿望"><a href="#我的愿望" class="headerlink" title="我的愿望"></a>我的愿望</h1><blockquote><p>我知道人类的悲欢并不轻易相通，就像我那些美好到完美的愿望永远不会实现</p></blockquote><blockquote><p>我只是希望世界上一切都可以简简单单的、有意义的，所以去鸡鸣寺我并没有像大多数人一样求姻缘，而是许下了我内心最诚挚的心愿。</p></blockquote><p><img src="/img/20210316182537.jpg"><br><img src="/img/20210316182530.jpg"></p><p><font color="green" size="5">以下是我虔诚许下的两个心愿，没有和任何人说过，如果你能看到说明你对我来说是个特别的人吧：</font></p><p>希望这个世界上所有人都能简单纯粹和善良<br>没有悲伤没有愤怒没有嫉妒没有仇恨没有虚伪没有谎言<br>不会只去追求物质、金钱和地位<br>人们都可以互相信任彼此依靠彼此温柔相待</p><p>对于我自己<br>希望我的人生有趣且多彩，结识几个知心的信赖的朋友，遇到心意相通的另一半，经历体验很多美好和感动，被他人需要，不向世俗妥协，不平庸无为，不充满遗憾，不重复机械地活着</p><blockquote><p>我知道我的愿望注定不会实现，我最终还是要向生活屈服吧，希望多年后看到这些话能回想起来：这就是初心。</p><p>另外，现在的我是多么的希望可以被理解被信任，有一个和我观点相同的人一起发表对美好的世界的想象，多么不想孤单一个人，孤傲地坚守着我心中的美好。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
          <category> 想法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>audition+premiere视频后期处理记录</title>
      <link href="posts/315fc756/"/>
      <url>posts/315fc756/</url>
      
        <content type="html"><![CDATA[<h1 id="Audition-Premiere视频后期处理记录"><a href="#Audition-Premiere视频后期处理记录" class="headerlink" title="Audition+Premiere视频后期处理记录"></a>Audition+Premiere视频后期处理记录</h1><blockquote><p>从突发奇想零基础做一下视频处理到临时借百度云会员下载au和pr再到摸索着做了混响和替换原音频最后导出，真是神奇而又收获满满的一天。(我这个学习速度针布戳hhh)</p></blockquote><h2 id="一、Audition部分"><a href="#一、Audition部分" class="headerlink" title="一、Audition部分"></a>一、Audition部分</h2><h3 id="1-导入源视频"><a href="#1-导入源视频" class="headerlink" title="1.导入源视频"></a>1.导入源视频</h3><p><img src="/img/20210311131500.png"></p><p>先听一遍原版，毕竟后面就听不到了</p><h3 id="2-这里使用母带处理"><a href="#2-这里使用母带处理" class="headerlink" title="2.这里使用母带处理"></a>2.这里使用母带处理</h3><img src="/img/image-20210311132246748.png" style="zoom:67%;"><p>为什么不用混响呢，因为在我把所有混响都尝试了一遍后发现，还是母带处理更符合我的口味~</p><blockquote><p><img src="/img/image-20210311133117288.png" alt="明明是自己没搞懂这些选项吧"></p></blockquote><img src="/img/image-20210311133254532.png" style="zoom:67%;"><p>混响拉满，下面随便设置一下，左边把低频和高频的响度拉高5db左右</p><p>这可是我<del>研究</del>乱试很久得到的<del>最优</del>解😅</p><h3 id="3-应用之后就是一段充满了混响的震撼音效了"><a href="#3-应用之后就是一段充满了混响的震撼音效了" class="headerlink" title="3.应用之后就是一段充满了混响的震撼音效了"></a>3.应用之后就是一段充满了混响的震撼音效了</h3><p>导出音频：</p><p><img src="/img/image-20210311133647049.png"></p><h2 id="二、Premiere部分"><a href="#二、Premiere部分" class="headerlink" title="二、Premiere部分"></a>二、Premiere部分</h2><h3 id="1-先新建一个项目"><a href="#1-先新建一个项目" class="headerlink" title="1.先新建一个项目"></a>1.先新建一个项目</h3><p><img src="/img/image-20210311133852053.png"></p><h3 id="2-将音视频分别导入"><a href="#2-将音视频分别导入" class="headerlink" title="2.将音视频分别导入"></a>2.将音视频分别导入</h3><p><img src="/img/image-20210311134049200.png"></p><h3 id="3-拖入时间轴并对齐"><a href="#3-拖入时间轴并对齐" class="headerlink" title="3.拖入时间轴并对齐"></a>3.拖入时间轴并对齐</h3><p><img src="/img/image-20210311134228567.png"></p><h3 id="4-删除原音频"><a href="#4-删除原音频" class="headerlink" title="4.删除原音频"></a>4.删除原音频</h3><blockquote><p>此时有两个音轨，蓝色是视频中的，绿色是刚刚au导出的</p></blockquote><p>把蓝色音轨删掉，取消链接然后清除：</p><p><img src="/img/image-20210311134428309.png"></p><h3 id="5-调整一下音量"><a href="#5-调整一下音量" class="headerlink" title="5.调整一下音量"></a>5.调整一下音量</h3><p>手机录音的音量太低了，在绿色音轨上选择音频增益，增大10db吧。</p><p><img src="/img/image-20210311134729007.png" alt="虽说+10db还是有点小"></p><h3 id="6-失败的尝试"><a href="#6-失败的尝试" class="headerlink" title="6.失败的尝试"></a>6.失败的尝试</h3><p>想给视频加点东西，但是这破解版的pr连接不了adobe，字体文件缺失不能用😐</p><p><img src="/img/image-20210311135053545.png"></p><h3 id="7-成功的结局"><a href="#7-成功的结局" class="headerlink" title="7.成功的结局"></a>7.成功的结局</h3><p>最后保存一下，再导出</p><p>格式选择H.264可以导出mp4格式，再使用<code>匹配源</code>就可以一键配置格式了。</p><p><img src="/img/image-20210311135237208.png"></p><h2 id="三、展望"><a href="#三、展望" class="headerlink" title="三、展望"></a>三、展望</h2><p>看过很多up主的视频，深知做视频不易，今天我做的这些也只是冰山一角，喜欢探索就会有收获和发现，也算是体验了一下不一样的乐趣吧。</p><p>接下来有时间还是要更深入地学习一下(幻想自己也有朝一日成为一个up主ing…)。</p><p>“你知道的越多，你不知道的越多”，这句话一点也没错。</p><p><img src="/img/-1d8f6ad9fabc1081.jpg" alt="好了肝了一中午该睡觉了，下午又是开始重复的一天"></p>]]></content>
      
      
      <categories>
          
          <category> 兴趣 </category>
          
          <category> UP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> au </tag>
            
            <tag> pr </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>电脑上的软件们</title>
      <link href="posts/d905b657/"/>
      <url>posts/d905b657/</url>
      
        <content type="html"><![CDATA[<h1 id="电脑上的软件们"><a href="#电脑上的软件们" class="headerlink" title="电脑上的软件们"></a>电脑上的软件们</h1><p><font color="red" size="6">正在更新中。。。</font></p><blockquote><p>要换电脑了，梳理一下用了3年的电脑上的软件们，这份总结既是备忘，又是分享。</p></blockquote><p>先上图，我五彩斑斓的开始菜单的一部分</p><p><img src="/img/start1.jpg" alt="满满的开始菜单"></p><h2 id="1-基本装机必备-建议跳过"><a href="#1-基本装机必备-建议跳过" class="headerlink" title="1.基本装机必备(建议跳过)"></a>1.基本装机必备(建议跳过)</h2><ul><li>QQ</li><li>微信</li><li>火绒</li><li>Chrome</li><li>腾讯会议</li><li>企业微信</li></ul><h2 id="2-工具"><a href="#2-工具" class="headerlink" title="2.工具"></a>2.工具</h2><ul><li>UninstallTool(geek的升级版,好)</li><li>bandizip(个人感觉最强大的解压软件)</li><li>bandicam(录屏软件，bandi双杀！)</li><li>InternetDownloadManager(IDM,最强大的下载软件，自带chrome插件)</li><li>Snipaste(截图滴神，和qq截图互补用)</li><li>UsbEAm Hosts Editor(host测速&amp;修改很方便)</li><li>TeamViewer(远程很方便)</li><li>X-Mouse Button Control(买毒蝰前的鼠标只能用这个了hh)</li><li>鲁大师(单文件绿色版)(娱乐大师跑个分)</li><li>DiskGeniusPro(硬盘管理不二之选)</li><li>ScreenToGif(录屏&amp;转gif好用)</li><li>cpuz</li><li>gpuz</li><li>fish(冰点文库)</li><li>MD5Checker</li><li>SpeedKoalaBD</li><li>PanDownload</li><li>BitComet</li><li>Everything</li></ul><h2 id="3-虚拟机"><a href="#3-虚拟机" class="headerlink" title="3.虚拟机"></a>3.虚拟机</h2><ul><li>VMware Workstation Pro(甚至能装黑🍎) -&gt; ununtu 16</li><li>NOX(安卓) -&gt; android 8</li></ul><h2 id="4-工业软件"><a href="#4-工业软件" class="headerlink" title="4.工业软件"></a>4.工业软件</h2><ul><li>CAD</li><li>Photoshop</li><li>SolidWorks</li><li>creo</li></ul><h2 id="5-影音"><a href="#5-影音" class="headerlink" title="5.影音"></a>5.影音</h2><ul><li>PotPlayer(功能强大的播放器)</li><li>网抑云音乐</li><li>YY(以前打游戏开黑用的多)</li><li>lx-music(落雪音乐，虽然说有<a href="http://tool.liumingye.cn/music/?page=searchPage">myfreemp3</a>就没用过了)</li><li>OBS studio(又想起来当时的腾讯会议装X时刻😁)</li><li>VUP(配合楼上，棒)</li><li>PicGo(是不是又分类错了)</li></ul><h2 id="6-美化"><a href="#6-美化" class="headerlink" title="6.美化"></a>6.美化</h2><ul><li>StartIsBack(集成开始菜单、任务栏、开始图标的修改，点个赞)</li><li>TrantslucentTB(之前用过，没上面功能强大)</li><li>RainMeter(桌面监控发展成美化的小装饰)</li><li>TrafficMonitor(可以设置任务栏状态监控)</li><li>WallpaperEngine(yyds)</li></ul><h2 id="7-文档"><a href="#7-文档" class="headerlink" title="7.文档"></a>7.文档</h2><ul><li>WPS(<del>天下第一</del>)</li><li>Typora</li><li>有道云笔记</li><li>xmind(检测到归类有误⚠)</li><li>万彩OfficeBox</li></ul><h2 id="8-开发环境"><a href="#8-开发环境" class="headerlink" title="8.开发环境"></a>8.开发环境</h2><ul><li>jdk 1.8</li><li>node.js</li><li>python 3.8</li><li>git</li><li>mysql 5.7</li><li>sqlserver 2014</li><li>mongoDB</li><li>redis 3.2</li><li>ant 1.9</li><li>maven 3.5</li><li>tomcat 8.5</li><li>hexo(也算是吧)</li><li>zookeeper 3.4</li></ul><h2 id="9-IDE"><a href="#9-IDE" class="headerlink" title="9.IDE"></a>9.IDE</h2><ul><li>IntelliJ IDEA</li><li>Pycharm</li><li>VScode</li><li>vs2010(学校教cpp时用的，怀旧不舍得删)</li><li><del>notepad++</del> (作者立场原因，已卸载)</li><li>MySQLWorkbench 8 (还是navicat好)</li><li>Navicat Premium 15</li><li>Postman(勉强算是吧)</li><li>微信开发者工具</li><li>Dreamweaver 8 (上公选课老师教的远古前端ide 233)</li><li>Xshell</li><li>Fiddler 4</li><li>WinSCP</li><li>FineReport</li><li>FineBI</li><li>Jprofiler 10</li></ul><h2 id="10-娱乐"><a href="#10-娱乐" class="headerlink" title="10.娱乐"></a>10.娱乐</h2><ul><li>steam</li><li>ubisoft connect(还是叫uplay好)</li><li>battlenet(要不是为了使命召唤。)</li><li>EPIC(感谢白嫖)</li><li>uu加速器(换来换去还是网易真香)</li></ul><h2 id="11-学习"><a href="#11-学习" class="headerlink" title="11.学习"></a>11.学习</h2><ul><li>CCtalk</li></ul><h2 id="12-chrome插件"><a href="#12-chrome插件" class="headerlink" title="12.chrome插件"></a>12.chrome插件</h2><p>偷懒了截个图😜</p><p><img src="/img/image-20210221102455792.png"></p><hr><p>整理了两天，还挺多的，估计新电脑要装上这些东西还得好几天吧哈哈~</p>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
          <category> 分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分享 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的电脑换届仪式</title>
      <link href="posts/7824aae9/"/>
      <url>posts/7824aae9/</url>
      
        <content type="html"><![CDATA[<h1 id="我的电脑换届仪式"><a href="#我的电脑换届仪式" class="headerlink" title="我的电脑换届仪式"></a>我的电脑换届仪式</h1><blockquote><p>一点点仪式感吧哈哈</p></blockquote><h2 id="1-回顾"><a href="#1-回顾" class="headerlink" title="1.回顾"></a>1.回顾</h2><p>2018年3月7日，也就是大一下学期刚开学不久，在<del>处心积虑</del> 深思熟虑和反复比较了很久之后最终选择了性价比最高的之一、神船的兄弟——<code>炫龙kp2</code>。在当时半导体产能缺乏物价居高不下的时候终于还是狠心剁手了这台8100+1060+8G*2400MHz+128G+1t。后来为了<del>游戏</del> 学习在大二又自己加了一根240G固态和8G内存，至此出满神装。</p><p>它伴随了我的大部分大学时光，每逢新的3a大作问世、计算思维导论 c++ cad creo的学习、课设的绘图深夜、听歌看视频的享受时刻、疫情期间的网课、翘课学习java、秋招的刷题评测笔试面试等等。。每个点点滴滴都有它的辛勤工作和陪伴，机器上装的软件也可以说是colorful了，在此，必须说一句：</p><p><font size="5" color="#2c96e8">辛苦了！</font></p><p>可能是从小就对计算机的兴趣，一直电脑遇到问题喜欢自己解决，进而对电脑的理解要比一般人深很多，久而久之和电脑磨合地非常完美，在陪伴的2年11个月里没有出过问题，大三时候cpu风扇异响震动(估计打游戏太多的缘故)，淘宝买了个风扇换掉，还顺便换了<code>信越7921</code>的硅脂(最难涂的硅脂果然名不虚传)。不过就在这个寒假，两周没开机看毕设的我受到了惩罚——无法开机，常规解决方案试了都无果而只能去修，结果是主板电路出了问题。</p><p>马上要毕业了，也是时候换一台强劲的生产力面对今后新的征程了，在最后的一学期完成kp2最后的使命，光荣退休吧。</p><h2 id="2-前瞻"><a href="#2-前瞻" class="headerlink" title="2.前瞻"></a>2.前瞻</h2><p>果然我可能还是没法完全放弃游戏啊，1月份充实地学习一年秋招上岸功课修齐后在学校等回家，突然慢下来的生活节奏让我竟然有些空虚，心情也好不起来了，要知道一年前的那个时候我可是天天在玩命运2(也许玩游戏也是一种心灵上的寄托，至少不会察觉无聊了)。所以在mbp和rog的艰难抉择下最终放弃了前者，理由是不用说出来的理由。。</p><p>然后电子产品买新不买旧是不会错的，但是30系刚问世不久，市场极度缺货，rog搭载30系的系列魔霸、幻都基本抢不到，要买只能from黄牛手里了(可恶啊)。于是乎，我最终没做等等党，而是选择了华硕家的另一个系列——天选，幸运地抢到了3060版的首发，针布戳。</p><p>价格比当年的kp2贵了1k左右，但是不得不说性能迭代的速度是真的快：</p><p>100%sRGB*1080p*240Hz+5800H+3060<font color="red">mq</font>+16G*3200MHz+512G</p><p>提升还是很大的(这下终于不用开全低画质玩3a了，✌清洁)。</p><blockquote><p>虽然说天选2作为一个为了给自家rog做背景板的“低配”产品，存在一些缺点：</p><ul><li>5800h在l3缓存存在bug影响性能还没完全解决</li><li>显卡3060是80w的残血版(为了不换模具散热狠压功耗华硕真有你的)</li><li>没有独显直连！</li><li>内存是新工艺2bg的，性能比4bg低好多<span class="github-emoji"><span>😢</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f622.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></li><li>可惜没上2k屏</li></ul><p>不过我可以强行瑕不掩瑜，对我来说写代码、看视频、中画质玩玩游戏还是足够的。</p></blockquote><h2 id="3-软件统计"><a href="#3-软件统计" class="headerlink" title="3.软件统计"></a>3.软件统计</h2><blockquote><p>近两年来学习和捣鼓使用装了很多软件，要换电脑了在此统计一下，方便查阅，以后有时间再详细写一个软件推荐文章</p></blockquote><p><a href="https://gaattc.life/posts/d905b657">我的电脑软件们</a></p><h2 id="4-更新：屠龙者终成恶龙？"><a href="#4-更新：屠龙者终成恶龙？" class="headerlink" title="4.更新：屠龙者终成恶龙？"></a>4.更新：屠龙者终成恶龙？</h2><p>批判了黄牛倒卖后，黄牛竟是我自己。</p><p>2.23日早上10点，又是一番密集的刷新狂点，抢到了rog的魔霸新锐，然后反手把天选挂闲鱼，一小时就卖出去赚了几百。。</p><p>这顺利地像做梦一样，心想事成？不过呢虽然动动手指就能赚零花钱，但是这是对市场环境的一丝污染，君子取之有道，我以后不能再干这种事了。</p><blockquote><p>魔霸新锐总结：</p><ul><li>满血130W的3060</li><li>rog信仰+光污染</li><li>液金散热</li><li>支持dp充电</li><li>R9 5900HX🐂</li></ul><p>缺点：</p><ul><li>没有小键盘（小键盘重度依赖的我下了多大的决心呢）</li><li>没有摄像头</li><li>右侧无usb接口（放后面了，不过影响不大）</li><li>估计还是2bg内存</li></ul></blockquote><h2 id="5-留念图："><a href="#5-留念图：" class="headerlink" title="5.留念图："></a>5.留念图：</h2><p>快三年了，手机里就这么点照片，惭愧。</p><p><img src="/img/%E5%8A%A0%E5%9B%BA%E6%80%81%E6%97%B6%E5%88%BB0.jpg" alt="加固态时刻0"></p><p><img src="/img/%E5%8A%A0%E5%9B%BA%E6%80%81%E6%97%B6%E5%88%BB.jpg" alt="加固态时刻"></p><p><img src="/img/%E6%8D%A2%E7%A1%85%E8%84%82%E6%97%B6%E5%88%BB(7921yyds).jpg" alt="换硅脂时刻(7921yyds)"></p><p><img src="/img/%E7%8C%AB%E5%92%8C%E6%9C%AC%E6%9C%AC.jpg" alt="猫和本本"></p><p><img src="/img/%E7%8C%AB%E5%92%8C%E6%8E%92%E5%BA%8F.jpg" alt="猫和排序"></p><p><img src="/img/%E6%97%A0%E9%94%A1%E5%85%AC%E5%AF%93.jpg" alt="无锡公寓"></p><p><img src="/img/vipermini.jpg" alt="毒蝰mini"></p><p><img src="/img/start1.jpg" alt="满满的开始菜单"></p><p><img src="/img/20210218190419.png" alt="美丽的桌面"></p>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
          <category> 记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Sunflower</title>
      <link href="posts/84faa128/"/>
      <url>posts/84faa128/</url>
      
        <content type="html"><![CDATA[<h1 id="《Sunflower》指弹-Paddy-Sun"><a href="#《Sunflower》指弹-Paddy-Sun" class="headerlink" title="《Sunflower》指弹 - Paddy Sun"></a>《Sunflower》指弹 - Paddy Sun</h1><h2 id="1-演示"><a href="#1-演示" class="headerlink" title="1.演示"></a>1.演示</h2><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&amp;id=41659469&amp;auto=0&amp;height=66"></iframe><p>作者远古时期视频(这就是青春啊)：</p><iframe height="450" width="800" src="//player.bilibili.com/player.html?aid=1798131&amp;bvid=BV1Px411N7dP&amp;cid=2758012&amp;page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe><blockquote><p>这个视频油管播放千万，并深深影响了越南指弹(吧)哈哈</p></blockquote><h2 id="2-附谱-from-大树"><a href="#2-附谱-from-大树" class="headerlink" title="2.附谱(from 大树)"></a>2.附谱(from 大树)</h2><p><img src="/img/640.webp"></p><p><img src="/img/640%20(1).webp"></p><p><img src="/img/640%20(2).webp"></p><h2 id="3-进度"><a href="#3-进度" class="headerlink" title="3.进度"></a>3.进度</h2><p>已经练了快一周，学起来比无题简单也快，就是很久没弹手好疼啊<span class="github-emoji"><span>😢</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f622.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p><h2 id="4-成果"><a href="#4-成果" class="headerlink" title="4.成果"></a>4.成果</h2><p>寒假在家其实已经练了很久，录了一个不是很熟练的视频，突然想起来于是现在补上：</p><iframe height="450" width="800" src="//player.bilibili.com/player.html?aid=629274780&amp;bvid=BV1Hb4y1R7Hk&amp;cid=302331879&amp;page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>]]></content>
      
      
      <categories>
          
          <category> 兴趣 </category>
          
          <category> 吉他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 指弹 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《秒速五厘米》</title>
      <link href="posts/8526d39f/"/>
      <url>posts/8526d39f/</url>
      
        <content type="html"><![CDATA[<h2 id="《秒速五厘米》"><a href="#《秒速五厘米》" class="headerlink" title="《秒速五厘米》"></a>《秒速五厘米》</h2><iframe width="800" height="450" src="//player.bilibili.com/player.html?aid=798277103&amp;bvid=BV1cy4y1U7TE&amp;cid=271532948&amp;page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe><p>鼓起勇气抱着可能会哭出来的决心看了一直不敢碰的《秒速五厘米》，每一话完都以为是铺垫，后面才是正片，可是当ed响起的时候才回过神来。这就完了？心里想到。</p><p>这不是一部像《你的名字》那样直击心灵的剧，不是将遗憾和惋惜直接摆在眼前。</p><p>当把整个看似零散的剧情串起来，还是很震撼。这是一种长期的真实的、逐渐被时间被生活吞噬而麻木的、一生只会有一次的、想想会让人害怕的遗憾。</p><p>或许每个人都有青梅竹马，或是第一次心动的初恋，或是像第二话那样呼喊不出的暗慕，在最初把自己的全部、整颗心的投入，到后来因故未能如愿或分离，再后来被时间和生活逐渐抹平，再也回不去，再也没有人能懂。这就是人生的遗憾吧。</p><p>《高木同学》或许可以说是对立题材了，每个美好的瞬间让我的嘴角不知不觉地上扬，羡慕、憧憬、想象，仿佛能体验到西片和高木的甜，但这样的剧情，现实中如果能遇到可以说是奇迹了，而秒速五厘米才是描绘真正常见又发生在身边真实的遗憾的剧情。</p><p>遗憾常有，而奇迹不是。</p><p>大学期间也有很多时候会想，已经有过遗憾了，以后还会吗，学生时期就要结束了，还能遇到互相喜欢的人吗，面对生活，还有当初那份简单纯真的情感吗，会不会这辈子剩下的只有遗憾了呢，是不是只能在该成家的年纪和一个没有感觉的人度过无趣的后半生呢，那些美好和伤痛要永远埋藏在心底吗，会有人愿意听我的故事吗，是不是不会有理解我的人了呢…</p><p>想回到过去把记忆中每一个遗憾都弥补上，该做的事情没有做好，该说的话没有说出口，该避免的错误没有避免，该努力的日子选择安逸，该珍惜的时光交给游戏。</p><p>看到主角长大后做了一个程序员，如果是他在工作闲时是否许会思考这些呢，一个满心温柔的人把遗憾和期待隐藏在心里，在旁人看来是个无情的机器，在独处时没有倾诉的对象悄声叹息，这样的日子也许就是人间地狱了。</p><p>做一个乐观的人何其容易，拿的起放的下的洒脱真的不简单，忙碌的日子过后静下来还是会感到孤单，因为人需要的是精神的寄托吧。我也许会被说是个悲观的人，作为一个男生多愁善感真可笑。可能心特软点心吃太多改不掉了。看电影容易被带入，容易心动容易感动，这算什么啊，我到底什么时候才能成熟起来。我不相信一见钟情，不相信异地，不相信网恋，不过想象之中的”在长期的学习和工作中认识”可能只能存在在想象之中了，失去了才懂珍惜，就是为时已晚，已经不是个无忧无虑的学生了呢。</p><p>时常对美好的未来充满期待，没有谎言和猜忌，做自己喜欢的事，过每天都不一样的生活，体验所有能体验的事物，和一个心意相通的人，就像电影或动画中那样。</p><p>不过吧，期望越大失望越大，所以不需要对所有事都抱太大期待，我还是愿意相信一切都是命运注定的，走到哪里哪里都是下一站，每当无趣时在操场走走也能让心情好起来，不知道怎么收尾了，那就未完待续吧</p><hr><p>以下转自<a href="https://www.zhihu.com/question/32759798">某乎</a>：</p><p><strong>《樱花抄》</strong><br>每个人都经历过分别吧。<br>中考、高考、大学毕业，和相处了几年的朋友分开。<br>毕业典礼的时候一个劲地说“以后要经常来看我啊！”<br>但是慢慢地，有了自己的圈子，适应了新的环境，忙于自己的生活，也就一直没有去赴约相见。</p><p>贵树去找明里的时候，带了一封信。<br>很多人会猜测，如果那封信交给了明里，最后的结局会不会不同呢？<br>其实不太会。即便两个人心意相同，但彼此之间的距离，还是在以光速被拉大。</p><p>贵树去找明里的时候，心里一直很忐忑。<br>遇上积雪，列车不断地停留、晚点，等待是如此的折磨人，猜想明里现在也是这样焦急地在等待吧。<br>“这么晚了，她还会不会在等我？”<br>“这么晚了，他究竟有没有来赴约？”<br>两个人单凭着对彼此的信任，等到了相遇的时候，那种喜悦，是互相明白了对方对自己的信任时的默契。<br>分别了那么久，有那么多的话要说，说了一整晚。<br>《樱花抄》里的感情，其实站在友情的角度上来说，也是完全可以理解的。</p><p><strong>《宇航员》</strong><br>宇航员孤独地坐在船舱里，他知道这次旅行的危险，他知道和家人的这次分别，意味着什么。<br>旅途很漫长，他路过在旅途中变成碎片的过往者，那么多失败的例子，依然不能阻止他要前进。</p><p>每个人都是这样一个宇航员，未来就是自己的宇宙。</p><p>花苗是宇航员，飞奔向那个遥远的贵树，尽管知道这片宇宙不属于自己，但她无法阻止自己前进的心意。<br>贵树是宇航员，一个人孤独地奔赴理想中的未来，理想中，那个未来有幸福、有明里。他已经拥有了手机，但依然没有发送出去那些短信。这么多话，这么多想说的话，在无法传声的宇宙中，没有介质，要怎么才能被对方听到呢？</p><p>火箭发射的那一刻，两个人看着义无反顾奔向太空的人，心情是相同的。</p><p>那么远的距离，那么久的努力，真的能到达那个宇宙吗？那个宇宙，真的是自己想象中美好的样子吗？旅途中的寂寞、惶恐、担忧、后悔，要和谁说呢？</p><p>《宇航员》中，记录了少年的成长，这一段的感情，站在我们自己成长的经历上来看，是最容易得到共鸣的。</p><p><strong>《秒速五厘米》</strong><br>宇航员终于到达了宇宙。<br>宇宙中荒芜一人。没有热情的外星友人，没有美丽的建筑物和更为高端的文明，宇宙和自己想象中，是完全不一样的。<br>但宇航员不能回头，回来的路已经封死了，他只能接受这个现实。</p><p>贵树成为了大城市里最普通的上班族，每天面对着人山人海的地铁和密密麻麻的程序代码。<br>他的未来没有明里。</p><p>明里已经订了婚，她还记得贵树，那个自己小时候以为会成为自己的新郎的人。</p><p>在轨道上交错的瞬间。</p><p>现实的苟且和自己的小时候的野心、幻想、理想交错的瞬间。</p><p>明里没有回头，她接受了现实的一切，不愿去面对自己曾经的一切。因为她知道，回不去了。</p><p>贵树在轨道的那头，看着空空如也的另一端，像是在对一直留念曾经的自己，做个道别。</p><hr><p>人类要是可以简简单单该多好</p>]]></content>
      
      
      <categories>
          
          <category> 兴趣 </category>
          
          <category> 观影 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 观影 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello MongoDB</title>
      <link href="posts/a0735a7e/"/>
      <url>posts/a0735a7e/</url>
      
        <content type="html"><![CDATA[<h1 id="HelloMongoDB-MongoDB的学习之路-还很长"><a href="#HelloMongoDB-MongoDB的学习之路-还很长" class="headerlink" title="HelloMongoDB - MongoDB的学习之路(还很长)"></a>HelloMongoDB - MongoDB的学习之路(还很长)</h1><blockquote><p>官网：<a href="https://www.mongodb.com/try">https://www.mongodb.com/try</a></p></blockquote><h2 id="一-安装和使用"><a href="#一-安装和使用" class="headerlink" title="一.安装和使用"></a>一.安装和使用</h2><p>进入官网，一般本地使用的话还是选择On-Premises，学习的话下载社区版就够用了。</p><p>我使用的是社区版msi安装，版本v4.4.2。</p><p>安装路径最好还是custom，下一步网不好的话还是不勾选**”install mongoDB compass”**图形界面(其实在国内网都好不到哪去，不建议在这里下载浪费时间)，后面可以自己单独去官网<a href="https://www.mongodb.com/download-center/compass">下载</a>，用IDM的话还是可以几分钟就下好的。</p><h3 id="1-配置MongoDB目录结构"><a href="#1-配置MongoDB目录结构" class="headerlink" title="1.配置MongoDB目录结构"></a>1.配置MongoDB目录结构</h3><p>以Windows操作系统为例，在安装MongoDB的盘符的根目录创建一个 <code>data</code> 的目录然后在 data 目录里创建 <code>db</code> 目录：</p><p>比如我安装在G盘下</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">g:md <span class="token string">"\data\db"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>在安装目录的bin路径下执行：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">G:<span class="token punctuation">\</span>MongoDB<span class="token punctuation">\</span>bin<span class="token punctuation">\</span>mongod --dbpath g:<span class="token punctuation">\</span>data<span class="token punctuation">\</span>db<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-命令行下的使用"><a href="#2-命令行下的使用" class="headerlink" title="2.命令行下的使用"></a>2.命令行下的使用</h3><p>在bin目录下使用命令mongo即可进入命令行客户端，进行增删改查等。</p><p><img src="/img/image-20201231104927831.png"></p><p>当然也可以将这个目录加入到环境变量方便在任何地方打开。</p><h3 id="3-安装MongoDB服务"><a href="#3-安装MongoDB服务" class="headerlink" title="3.安装MongoDB服务"></a>3.安装MongoDB服务</h3><p>在data文件夹下创建log文件夹，mongodb安装目录下创建配置文件mongod.cfg内容如下：</p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml">systemLog:    destination: file    path: g:\data\log\mongod.logstorage:    dbPath: g:\data\db<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>也可以配置ip、端口等更详细的内容，参考：<a href="https://www.cnblogs.com/phpandmysql/p/7763394.html">https://www.cnblogs.com/phpandmysql/p/7763394.html</a></p><p>然后bin下执行：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">mongod --config <span class="token string">"C:\mongodb\mongod.cfg"</span> --install<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="二-密码权限设置"><a href="#二-密码权限设置" class="headerlink" title="二.密码权限设置"></a>二.密码权限设置</h2><h3 id="1-先看看之前配置是否正确可以查看数据库"><a href="#1-先看看之前配置是否正确可以查看数据库" class="headerlink" title="1.先看看之前配置是否正确可以查看数据库"></a>1.先看看之前配置是否正确可以查看数据库</h3><p>在执行mongo命令后输入：</p><pre class="line-numbers language-mongo" data-language="mongo"><code class="language-mongo">show dbs<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可以看到admin库：</p><p><img src="/img/image-20201231111142370.png"></p><h3 id="2-进入admin数据库"><a href="#2-进入admin数据库" class="headerlink" title="2.进入admin数据库"></a>2.进入admin数据库</h3><pre class="line-numbers language-mongo" data-language="mongo"><code class="language-mongo">use admin<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-创建管理员账户"><a href="#3-创建管理员账户" class="headerlink" title="3.创建管理员账户"></a>3.创建管理员账户</h3><pre class="line-numbers language-mongo" data-language="mongo"><code class="language-mongo">db.createUser({ user: "admin", pwd: "password", roles: [{ role: "userAdminAnyDatabase", db: "admin" }] })<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这里自己设置用户名和密码，该账户角色是<code>userAdminAnyDatabase</code>，用来管理其他账户。</p><h3 id="4-创建root账户，管理数据库，相当于mysql的root账户"><a href="#4-创建root账户，管理数据库，相当于mysql的root账户" class="headerlink" title="4.创建root账户，管理数据库，相当于mysql的root账户"></a>4.创建root账户，管理数据库，相当于mysql的root账户</h3><pre class="line-numbers language-mongo" data-language="mongo"><code class="language-mongo">db.createUser({user: "root",pwd: "password", roles: [ { role: "root", db: "admin" } ]})<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="5-可选-给某个数据库创建管理员"><a href="#5-可选-给某个数据库创建管理员" class="headerlink" title="5.(可选)给某个数据库创建管理员"></a>5.(可选)给某个数据库创建管理员</h3><p>比如使用<code>fine</code>数据库，先进入之：</p><pre class="line-numbers language-mongo" data-language="mongo"><code class="language-mongo">use fine<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后创建账户：</p><pre class="line-numbers language-mongo" data-language="mongo"><code class="language-mongo">db.createUser({user: "user",pwd: "password",roles: [ { role: "dbOwner", db: "fine" } ]})<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这里的role选<code>dbOwner</code>的话代表拥有该数据库的最高权限，选<code>readWrite</code>的话顾名思义只有读写权。</p><h3 id="6-切换用户"><a href="#6-切换用户" class="headerlink" title="6.切换用户"></a>6.切换用户</h3><pre class="line-numbers language-mongo" data-language="mongo"><code class="language-mongo">use admindb.auth("admin","password")<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="7-使用url连接mongodb"><a href="#7-使用url连接mongodb" class="headerlink" title="7.使用url连接mongodb"></a>7.使用url连接mongodb</h3><pre class="line-numbers language-url" data-language="url"><code class="language-url">mongodb://user:password2@localhost/database<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="三-使用MongoDB-Compass"><a href="#三-使用MongoDB-Compass" class="headerlink" title="三.使用MongoDB Compass"></a>三.使用MongoDB Compass</h2><h3 id="1-官网下载安装即可。"><a href="#1-官网下载安装即可。" class="headerlink" title="1.官网下载安装即可。"></a>1.官网下载安装即可。</h3><h3 id="2-连接"><a href="#2-连接" class="headerlink" title="2.连接"></a>2.连接</h3><p>按以下格式连接</p><p><img src="/img/image-20201231112712882.png"></p><p>如果没设置密码，也可以直接连接(不过不建议，如果在公网上极其容易被黑然后被勒索比特币😂)：</p><pre class="line-numbers language-url" data-language="url"><code class="language-url">mongodb://127.0.0.1:27017<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-手动输入每一项的连接方式"><a href="#3-手动输入每一项的连接方式" class="headerlink" title="3.手动输入每一项的连接方式"></a>3.手动输入每一项的连接方式</h3><p>点击右上角的<code>Fill in connection fields individually</code>，下面选用户名密码即可。</p><img src="/img/image-20201231113114765.png" style="zoom:67%;"><h3 id="4-操作"><a href="#4-操作" class="headerlink" title="4.操作"></a>4.操作</h3><p>图形界面很方便明了。</p><img src="/img/image-20201231113242418.png" alt="image-20201231113242418" style="zoom:67%;"><h2 id="四-MongoDB语法"><a href="#四-MongoDB语法" class="headerlink" title="四.MongoDB语法"></a>四.MongoDB语法</h2><h3 id="1-查看所有数据库"><a href="#1-查看所有数据库" class="headerlink" title="1.查看所有数据库"></a>1.查看所有数据库</h3><pre class="line-numbers language-mongo" data-language="mongo"><code class="language-mongo">show dbs<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-进入数据库"><a href="#2-进入数据库" class="headerlink" title="2.进入数据库"></a>2.进入数据库</h3><pre class="line-numbers language-mongo" data-language="mongo"><code class="language-mongo">use {dbname}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-查询数据"><a href="#3-查询数据" class="headerlink" title="3.查询数据"></a>3.查询数据</h3><pre class="line-numbers language-mongo" data-language="mongo"><code class="language-mongo">db.{collection}.find({query}, {projection})<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><strong>query</strong> ：可选，使用查询操作符指定查询条件。</li><li><strong>projection</strong> ：可选，使用投影操作符指定返回的键。查询时返回文档中所有键值， 只需省略该参数即可（默认省略）。</li></ul><p>可以在后面再加一个格式化方便阅读，语法如下：</p><pre class="line-numbers language-mongo" data-language="mongo"><code class="language-mongo">db.{collection}.find({query}, {projection}).pretty() <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4-查询条件语法"><a href="#4-查询条件语法" class="headerlink" title="4.查询条件语法"></a>4.查询条件语法</h3><pre class="line-numbers language-mongo" data-language="mongo"><code class="language-mongo">等于：find({"key":"value"})小于：find({"key":{$lt:100}})小于等于：find({"key":{$lte:100}})大于：find({"key":{$gt:100}})大于等于：find({"key":{$gte:100}})不大于：find({"key":{$ne:100}})<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>and条件：</p><pre class="line-numbers language-mongo" data-language="mongo"><code class="language-mongo">find({key1:value1, key2:value2})<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>or条件：</p><pre class="line-numbers language-mongo" data-language="mongo"><code class="language-mongo">find({$or: [{key1: value1}, {key2:value2}]})<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>两者结合：</p><pre class="line-numbers language-mongo" data-language="mongo"><code class="language-mongo">find({"key1": {$gt:100}, $or: [{"key2": "10"},{"key3": "20"}]})<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="五-java中使用"><a href="#五-java中使用" class="headerlink" title="五.java中使用"></a>五.java中使用</h2><h3 id="1-准备"><a href="#1-准备" class="headerlink" title="1.准备"></a>1.准备</h3><p>使用<code>mongo-java-driver-3.12.7</code>为例，配置依赖。</p><h3 id="2-数据库连接"><a href="#2-数据库连接" class="headerlink" title="2.数据库连接"></a>2.数据库连接</h3><p>可以使用lambda表达式创建mongo client：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">MongoClient</span> client <span class="token operator">=</span> <span class="token class-name">MongoClients</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>                <span class="token class-name">MongoClientSettings</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">applyToClusterSettings</span><span class="token punctuation">(</span>builder <span class="token operator">-&gt;</span> builder<span class="token punctuation">.</span><span class="token function">hosts</span><span class="token punctuation">(</span><span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">singletonList</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ServerAddress</span><span class="token punctuation">(</span><span class="token punctuation">{</span>host<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>port<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">credential</span><span class="token punctuation">(</span><span class="token class-name">MongoCredential</span><span class="token punctuation">.</span><span class="token function">createCredential</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">{</span>username<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>authDB<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>pwd<span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-获取数据库"><a href="#3-获取数据库" class="headerlink" title="3.获取数据库"></a>3.获取数据库</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">MongoDatabase</span> db <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">getDatabase</span><span class="token punctuation">(</span><span class="token punctuation">{</span>db<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4-获取文档集合"><a href="#4-获取文档集合" class="headerlink" title="4.获取文档集合"></a>4.获取文档集合</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">MongoCollection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Document</span><span class="token punctuation">&gt;</span></span> col <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token function">getCollection</span><span class="token punctuation">(</span><span class="token punctuation">{</span>collection<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="5-创建过滤条件-可选"><a href="#5-创建过滤条件-可选" class="headerlink" title="5.创建过滤条件(可选)"></a>5.创建过滤条件(可选)</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Bson</span><span class="token punctuation">&gt;</span></span> filter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>filter<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token punctuation">{</span>key<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>value<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="6-按条件查询出文档"><a href="#6-按条件查询出文档" class="headerlink" title="6.按条件查询出文档"></a>6.按条件查询出文档</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">FindIterable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Document</span><span class="token punctuation">&gt;</span></span> documents <span class="token operator">=</span> coll<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token function">and</span><span class="token punctuation">(</span>filter<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">projection</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BasicDBObject</span><span class="token punctuation">(</span><span class="token string">"_id"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>这里的projection后面值为0表示不查询<code>_id</code>字段</p></blockquote><h3 id="7-对文档遍历"><a href="#7-对文档遍历" class="headerlink" title="7.对文档遍历"></a>7.对文档遍历</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">MongoCursor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Document</span><span class="token punctuation">&gt;</span></span> cursor <span class="token operator">=</span> documents<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>cursor<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">Document</span> next <span class="token operator">=</span> cursor<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> keys <span class="token operator">=</span> next<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> key <span class="token operator">:</span> keys<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">Object</span> o <span class="token operator">=</span> next<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//dosomething...</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-关闭客户端防止内存泄漏"><a href="#8-关闭客户端防止内存泄漏" class="headerlink" title="8.关闭客户端防止内存泄漏"></a>8.关闭客户端防止内存泄漏</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">client<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><p>待更新…</p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mongodb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用JProfiler进行dump分析记</title>
      <link href="posts/80a0aeb/"/>
      <url>posts/80a0aeb/</url>
      
        <content type="html"><![CDATA[<h1 id="dump分析"><a href="#dump分析" class="headerlink" title="dump分析"></a>dump分析</h1><blockquote><p>工具：<a href="https://gaattc.lanzous.com/iWNckjv8fgj">JProfilter10.0</a></p><p>激活码：L-qOQRsFcEcF-LqVM1lqxQm#1437</p></blockquote><h3 id="0-使用工具JProfiler载入dump-hprof文件"><a href="#0-使用工具JProfiler载入dump-hprof文件" class="headerlink" title="0.使用工具JProfiler载入dump.hprof文件"></a>0.使用工具JProfiler载入dump.hprof文件</h3><p><img src="/img/image-20201230142646333.png"></p><h3 id="1-首先打开Biggest-Objects，看到一个6G的ArrayList，明显有问题"><a href="#1-首先打开Biggest-Objects，看到一个6G的ArrayList，明显有问题" class="headerlink" title="1.首先打开Biggest Objects，看到一个6G的ArrayList，明显有问题"></a>1.首先打开Biggest Objects，看到一个6G的ArrayList，明显有问题</h3><p><img src="/img/image-20201230142012452.png"></p><h3 id="2-右键之，选择Use-Selected-Instances，然后下拉框选择Outgoing-references"><a href="#2-右键之，选择Use-Selected-Instances，然后下拉框选择Outgoing-references" class="headerlink" title="2.右键之，选择Use Selected Instances，然后下拉框选择Outgoing references"></a>2.右键之，选择Use Selected Instances，然后下拉框选择Outgoing references</h3><p><img src="/img/image-20201230142356820.png"></p><p><img src="/img/image-20201230142432445.png"></p><h3 id="3-展开发现其长度达到四千万，且都是相同数组元素"><a href="#3-展开发现其长度达到四千万，且都是相同数组元素" class="headerlink" title="3.展开发现其长度达到四千万，且都是相同数组元素"></a>3.展开发现其长度达到四千万，且都是相同数组元素</h3><p><font color="red" size="4">故认定这是个填报的笛卡尔积问题</font></p><p><img src="/img/image-20201230143230570.png"></p><h3 id="4-再寻找引用，选择Incoming-reference，点击Show-Paths-To-GC-Root"><a href="#4-再寻找引用，选择Incoming-reference，点击Show-Paths-To-GC-Root" class="headerlink" title="4.再寻找引用，选择Incoming reference，点击Show Paths To GC Root"></a>4.再寻找引用，选择Incoming reference，点击Show Paths To GC Root</h3><p><img src="/img/image-20201230143843921.png"></p><p>可以发现是线程 http-apr-8080-exec-55 的栈的引用</p><h3 id="5-点击Go-To-Start"><a href="#5-点击Go-To-Start" class="headerlink" title="5.点击Go To Start"></a>5.点击Go To Start</h3><p><img src="/img/image-20201230144424412.png"></p><h3 id="6-依次选择如图选项，选择http-apr-8080-exec-55线程，点击Calculate-inspection-and-create-a-new-object-set"><a href="#6-依次选择如图选项，选择http-apr-8080-exec-55线程，点击Calculate-inspection-and-create-a-new-object-set" class="headerlink" title="6.依次选择如图选项，选择http-apr-8080-exec-55线程，点击Calculate inspection and create a new object set"></a>6.依次选择如图选项，选择http-apr-8080-exec-55线程，点击Calculate inspection and create a new object set</h3><p><img src="/img/image-20201230144907513.png"></p><h3 id="7-再次选择Outgoing-reference，然后ctrl-F搜索ReportSessionIdInfo"><a href="#7-再次选择Outgoing-reference，然后ctrl-F搜索ReportSessionIdInfo" class="headerlink" title="7.再次选择Outgoing reference，然后ctrl+F搜索ReportSessionIdInfo"></a>7.再次选择Outgoing reference，然后ctrl+F搜索ReportSessionIdInfo</h3><p><img src="/img/image-20201230145258394.png"></p><h3 id="8-找出问题模板，可以从模板设计和填报数据两个方面分析"><a href="#8-找出问题模板，可以从模板设计和填报数据两个方面分析" class="headerlink" title="8.找出问题模板，可以从模板设计和填报数据两个方面分析"></a>8.找出问题模板，可以从模板设计和填报数据两个方面分析</h3><p><img src="/img/image-20201230145450925.png"></p><h3 id="9-结论"><a href="#9-结论" class="headerlink" title="9.结论"></a>9.结论</h3><p>考虑是填报时的输入数据有误，当数据库记录中有多条记录的某个字段相同，例如上面的id有重复，当把这个字段作为单元格值的过滤条件时，单元格会有多个值，数据的过滤关系丢失，填报时计算笛卡尔积占用过多内存资源导致宕机。</p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习心得 </tag>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>评论、TOC、顶部按钮样式适配</title>
      <link href="posts/e38270af/"/>
      <url>posts/e38270af/</url>
      
        <content type="html"><![CDATA[<h1 id="评论、TOC、顶部按钮样式适配"><a href="#评论、TOC、顶部按钮样式适配" class="headerlink" title="评论、TOC、顶部按钮样式适配"></a>评论、TOC、顶部按钮样式适配</h1><h2 id="1-修改按钮背景CSS样式"><a href="#1-修改按钮背景CSS样式" class="headerlink" title="1.修改按钮背景CSS样式"></a>1.修改按钮背景CSS样式</h2><pre class="line-numbers language-dir" data-language="dir"><code class="language-dir">hexo\themes\hexo-theme-matery-master\source\css\matery.css<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在matery.css文件中找到并修改四个样式：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.top-scroll .btn-floating</span> <span class="token punctuation">{</span>    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span>to bottom right<span class="token punctuation">,</span> #a8cbe2 0%<span class="token punctuation">,</span> #05c6f1 100%<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 35px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 35px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.top-scroll .btn-floating i</span> <span class="token punctuation">{</span>    <span class="token property">line-height</span><span class="token punctuation">:</span> 35px<span class="token punctuation">;</span>    <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>    <span class="token property">right</span><span class="token punctuation">:</span> 0px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.comment-scroll .btn-floating</span> <span class="token punctuation">{</span>    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span>to bottom right<span class="token punctuation">,</span> #a8cbe2 0%<span class="token punctuation">,</span> #05c6f1 100%<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 35px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 35px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.comment-scroll .btn-floating i</span> <span class="token punctuation">{</span>    <span class="token property">line-height</span><span class="token punctuation">:</span> 35px<span class="token punctuation">;</span>    <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>    <span class="token property">right</span><span class="token punctuation">:</span> 0px<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-修改图标CSS样式"><a href="#2-修改图标CSS样式" class="headerlink" title="2.修改图标CSS样式"></a>2.修改图标CSS样式</h2><pre class="line-numbers language-dir" data-language="dir"><code class="language-dir">hexo\themes\hexo-theme-matery-master\layout\_partial\back-comment.ejshexo\themes\hexo-theme-matery-master\layout\_partial\post-detail-toc.ejshexo\themes\hexo-theme-matery-master\layout\_partial\back-top.ejs<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>在以上三个文件中找到并修改：</p><p>back-comment.ejs：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!-- 直达评论 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>to_comment<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>comment-scroll<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn-floating btn-large waves-effect waves-light<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#vcomments<span class="token punctuation">"</span></span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>直达评论<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fas fa-comments<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">zoom</span><span class="token punctuation">:</span> 0.88<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>post-detail-toc.ejs：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">#floating-toc-btn .btn-floating {    background: linear-gradient(to bottom right, #a8cbe2 0%, #05c6f1 100%);    width: 35px;    height: 35px;}#floating-toc-btn .btn-floating i {    line-height: 35px;    position: absolute;    right: 0px;}<span class="token comment">&lt;!-- TOC 悬浮按钮. --&gt;</span>&lt;% if (theme.toc.enable &amp;&amp; theme.toc.showToggleBtn) { %&gt;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>floating-toc-btn<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hide-on-med-and-down<span class="token punctuation">"</span></span> <span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn-floating btn-large waves-effect waves-light<span class="token punctuation">"</span></span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>展开/关闭TOC<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fas fa-list-ul<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">zoom</span><span class="token punctuation">:</span> 0.88<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>&lt;% } %&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>back-top.ejs：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!-- 回到顶部按钮 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>backTop<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>top-scroll<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn-floating btn-large waves-effect waves-light<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#!<span class="token punctuation">"</span></span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>返回顶部<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fas fa-arrow-up<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">zoom</span><span class="token punctuation">:</span> 0.88<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-效果"><a href="#3-效果" class="headerlink" title="3.效果"></a>3.效果</h2><p><img src="/img/image-20201217233634866.png"></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习心得 </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>matery添加夜晚模式</title>
      <link href="posts/de48a9ab/"/>
      <url>posts/de48a9ab/</url>
      
        <content type="html"><![CDATA[<h1 id="matery添加夜晚模式"><a href="#matery添加夜晚模式" class="headerlink" title="matery添加夜晚模式"></a>matery添加夜晚模式</h1><h2 id="1-在layout-ejs中添加按钮"><a href="#1-在layout-ejs中添加按钮" class="headerlink" title="1.在layout.ejs中添加按钮"></a>1.在layout.ejs中添加按钮</h2><p>在layout的body标签中添加代码。按惯例还是加在最后面尽量让页面主体先加载。</p><pre class="line-numbers language-dir" data-language="dir"><code class="language-dir">hexo\themes\hexo-theme-matery-master\layout\layout.ejs<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!--夜晚模式--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">if</span> <span class="token punctuation">(</span>localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">'dark'</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'1'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">'dark'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getHours</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;=</span> <span class="token number">22</span> <span class="token operator">||</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getHours</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">7</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">'dark'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">matchMedia</span><span class="token punctuation">(</span><span class="token string">'(prefers-color-scheme: dark)'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>matches<span class="token punctuation">)</span> <span class="token punctuation">{</span>    document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">'dark'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>switchNightMode()<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sma<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fa fa-moon-o<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>nightMode<span class="token punctuation">"</span></span> <span class="token attr-name">aria-hidden</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-添加css样式"><a href="#2-添加css样式" class="headerlink" title="2.添加css样式"></a>2.添加css样式</h2><pre class="line-numbers language-dir" data-language="dir"><code class="language-dir">hexo\themes\hexo-theme-matery-master\source\css\matery.css<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>精心适配的css：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token comment">/* 深色模式按钮设置 */</span><span class="token selector">#sma</span> <span class="token punctuation">{</span>    <span class="token property">background</span><span class="token punctuation">:</span> #000<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 30px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 30px<span class="token punctuation">;</span>    <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>    <span class="token property">position</span><span class="token punctuation">:</span> fixed<span class="token punctuation">;</span>    <span class="token property">border-radius</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>    <span class="token property">right</span><span class="token punctuation">:</span> 15px<span class="token punctuation">;</span>    <span class="token property">bottom</span><span class="token punctuation">:</span> 670px<span class="token punctuation">;</span>    <span class="token property">padding-top</span><span class="token punctuation">:</span> 15px<span class="token punctuation">;</span>    <span class="token property">margin-bottom</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>    <span class="token property">z-index</span><span class="token punctuation">:</span> 998<span class="token punctuation">;</span>    <span class="token property">cursor</span><span class="token punctuation">:</span> pointer<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">#sma .fa-moon-o</span> <span class="token punctuation">{</span>    <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>    <span class="token property">right</span><span class="token punctuation">:</span> 8px<span class="token punctuation">;</span>    <span class="token property">bottom</span><span class="token punctuation">:</span> 6px<span class="token punctuation">;</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> 1.3rem<span class="token important">!important</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">#sma .fa-lightbulb</span>  <span class="token punctuation">{</span>    <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>    <span class="token property">right</span><span class="token punctuation">:</span> 8px<span class="token punctuation">;</span>    <span class="token property">bottom</span><span class="token punctuation">:</span> 6px<span class="token punctuation">;</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> 1.35rem<span class="token important">!important</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.fa-moon-o:before</span> <span class="token punctuation">{</span>    <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">"\f186"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.fa-comments:before</span> <span class="token punctuation">{</span>    <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">"\f086"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">/* 深色模式设置 */</span>    <span class="token selector">body.dark .bg-cover .post-title,body.dark .card .card-content p,body.dark .card .card-image .card-title,body.dark .chip-container .tag-title,body.dark .fa-lightbulb:before,body.dark .fa-moon-o:before,body.dark .fas,body.dark .friends-container .tag-title,body.dark .frind-ship .title h1,body.dark .row .text,body.dark .title,body.dark .v[data-class=v] .vcount,body.dark .v[data-class=v] .vcount .vnum,body.dark a,body.dark article .article-content .summary,body.dark article .article-tags .chip,body.dark div.jqcloud a,body.dark h1,body.dark h2,body.dark h3,body.dark h4,body.dark h5,body.dark h6,body.dark header .side-nav .menu-list a,body.dark header .side-nav .mobile-head .logo-desc,body.dark header .side-nav .mobile-head .logo-name,body.dark li,body.dark p,body.dark pre code</span> <span class="token punctuation">{</span>        <span class="token property">color</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span>255<span class="token punctuation">,</span>255<span class="token punctuation">,</span>255<span class="token punctuation">,</span>.6<span class="token punctuation">)</span>    <span class="token punctuation">}</span>        <span class="token selector">body.dark .block-with-text:after,body.dark .card</span> <span class="token punctuation">{</span>        <span class="token property">background-color</span><span class="token punctuation">:</span> #282c34    <span class="token punctuation">}</span>        <span class="token selector">body.dark,body.dark #rewardModal .modal-content,body.dark .modal,body.dark .v[data-class=v] .vcount,body.dark header .side-nav,body.dark header .side-nav .menu-list .m-nav-show</span> <span class="token punctuation">{</span>        <span class="token property">background-color</span><span class="token punctuation">:</span> #12121c    <span class="token punctuation">}</span>        <span class="token selector">body.dark .aplayer</span> <span class="token punctuation">{</span>        <span class="token property">background</span><span class="token punctuation">:</span> #2f3742<span class="token important">!important</span>    <span class="token punctuation">}</span>        <span class="token selector">body.dark img,body.dark strong</span> <span class="token punctuation">{</span>        <span class="token property">filter</span><span class="token punctuation">:</span> <span class="token function">brightness</span><span class="token punctuation">(</span>.7<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>右下角东西太多了不好看，就把按钮放右上角了。。。<br>想调整就改改#sma的bottom。</p></blockquote><p><font color="red" size="5">更新：移动端按钮和全屏按钮冲突了，还是改到下面吧。。。</font></p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">#sma</span> <span class="token punctuation">{</span>    <span class="token property">background</span><span class="token punctuation">:</span> #000<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 35px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 35px<span class="token punctuation">;</span>    <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>    <span class="token property">position</span><span class="token punctuation">:</span> fixed<span class="token punctuation">;</span>    <span class="token property">border-radius</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>    <span class="token property">right</span><span class="token punctuation">:</span> 15px<span class="token punctuation">;</span>    <span class="token property">bottom</span><span class="token punctuation">:</span> 190px<span class="token punctuation">;</span>    <span class="token property">padding-top</span><span class="token punctuation">:</span> 15px<span class="token punctuation">;</span>    <span class="token property">margin-bottom</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>    <span class="token property">z-index</span><span class="token punctuation">:</span> 998<span class="token punctuation">;</span>    <span class="token property">cursor</span><span class="token punctuation">:</span> pointer<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-添加按钮js"><a href="#3-添加按钮js" class="headerlink" title="3.添加按钮js"></a>3.添加按钮js</h2><p>找到文件：</p><pre class="line-numbers language-dir" data-language="dir"><code class="language-dir">hexo\themes\hexo-theme-matery-master\source\js\matery.js<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在文件末尾添加代码：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 深色模式设置</span><span class="token keyword">function</span> <span class="token function">switchNightMode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> body <span class="token operator">=</span> document<span class="token punctuation">.</span>body<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>body<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">'dark'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">'dark'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">'dark'</span><span class="token punctuation">,</span> <span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#nightMode'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">removeClass</span><span class="token punctuation">(</span><span class="token string">"fa-lightbulb"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addClass</span><span class="token punctuation">(</span><span class="token string">"fa-moon-o"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">'dark'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">'dark'</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#nightMode'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">removeClass</span><span class="token punctuation">(</span><span class="token string">"fa-moon-o"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addClass</span><span class="token punctuation">(</span><span class="token string">"fa-lightbulb"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-效果"><a href="#4-效果" class="headerlink" title="4.效果"></a>4.效果</h2><p><img src="/img/image-20201217210126248.png"></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习心得 </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>markdown语法总结</title>
      <link href="posts/5417bea/"/>
      <url>posts/5417bea/</url>
      
        <content type="html"><![CDATA[<h1 id="markdown语法总结"><a href="#markdown语法总结" class="headerlink" title="markdown语法总结"></a>markdown语法总结</h1><h2 id="1-基本语法"><a href="#1-基本语法" class="headerlink" title="1.基本语法"></a>1.基本语法</h2><h3 id="1-标题"><a href="#1-标题" class="headerlink" title="1.标题"></a>1.标题</h3><p>使用 <code>#号+空格</code>可表示 1-6 级标题。</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 一级标题</span><span class="token title important"><span class="token punctuation">##</span> 二级标题</span><span class="token title important"><span class="token punctuation">###</span> 三级标题</span><span class="token title important"><span class="token punctuation">####</span> 四级标题</span><span class="token title important"><span class="token punctuation">#####</span> 五级标题</span><span class="token title important"><span class="token punctuation">######</span> 六级标题</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-换行"><a href="#2-换行" class="headerlink" title="2.换行"></a>2.换行</h3><p>①使用<code>两个空格+回车</code>换行</p><p>②使用<code>&lt;br&gt;</code>标签换行</p><p>③使用一个空行表示一个新的段落</p><h3 id="3-字体变化"><a href="#3-字体变化" class="headerlink" title="3.字体变化"></a>3.字体变化</h3><p>斜体：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token italic"><span class="token punctuation">*</span><span class="token content">斜体文本</span><span class="token punctuation">*</span></span><span class="token italic"><span class="token punctuation">_</span><span class="token content">斜体文本</span><span class="token punctuation">_</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>粗体：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token bold"><span class="token punctuation">**</span><span class="token content">粗体文本</span><span class="token punctuation">**</span></span><span class="token bold"><span class="token punctuation">__</span><span class="token content">粗体文本</span><span class="token punctuation">__</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>粗斜体：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token bold"><span class="token punctuation">**</span><span class="token content"><span class="token italic"><span class="token punctuation">*</span><span class="token content">粗斜体文本</span><span class="token punctuation">*</span></span></span><span class="token punctuation">**</span></span><span class="token bold"><span class="token punctuation">__</span><span class="token content"><span class="token italic"><span class="token punctuation">_</span><span class="token content">粗斜体文本</span><span class="token punctuation">_</span></span></span><span class="token punctuation">__</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>删除体：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token strike"><span class="token punctuation">~~</span><span class="token content">删除体文本</span><span class="token punctuation">~~</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>下划线：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>u</span><span class="token punctuation">&gt;</span></span>下划线<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>u</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>小代码片：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token code keyword">`代码`</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注释：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token comment">&lt;!--注释--&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4-分隔线"><a href="#4-分隔线" class="headerlink" title="4.分隔线"></a>4.分隔线</h3><p>可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格。下面每种写法都可以建立分隔线：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">&gt;</span></span><span class="token hr punctuation">***</span><span class="token hr punctuation">* * *</span><span class="token hr punctuation">*****</span><span class="token hr punctuation">- - -</span><span class="token hr punctuation">----------</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-脚注"><a href="#5-脚注" class="headerlink" title="5.脚注"></a>5.脚注</h3><p>创建脚注格式：</p><p> [^演示]<br>[^演示]: 我是脚注</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"> [^演示]<span class="token url-reference url"><span class="token punctuation">[</span><span class="token variable">^演示</span><span class="token punctuation">]</span><span class="token punctuation">:</span> 我是脚注</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="6-无序列表"><a href="#6-无序列表" class="headerlink" title="6.无序列表"></a>6.无序列表</h3><p>无序列表使用<code>星号(*)、加号(+)或减号(-)</code> + <code>空格</code> 来表示,如：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token list punctuation">-</span> 第一项<span class="token list punctuation">-</span> 第二项<span class="token list punctuation">-</span> 第三项<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="7-有序列表"><a href="#7-有序列表" class="headerlink" title="7.有序列表"></a>7.有序列表</h3><p>有序列表使用<code>数字</code>+<code>.</code>来表示，如：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token list punctuation">1.</span> 第一项<span class="token list punctuation">2.</span> 第二项<span class="token list punctuation">3.</span> 第三项<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="8-列表嵌套"><a href="#8-列表嵌套" class="headerlink" title="8.列表嵌套"></a>8.列表嵌套</h3><p>在子列表中的选项前面添加四个空格即可。</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token list punctuation">1.</span> 第一项：    <span class="token list punctuation">-</span> 第一项嵌套的第一个元素    <span class="token list punctuation">-</span> 第一项嵌套的第二个元素<span class="token list punctuation">2.</span> 第二项：    <span class="token list punctuation">-</span> 第二项嵌套的第一个元素    <span class="token list punctuation">-</span> 第二项嵌套的第二个元素<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="9-引用块"><a href="#9-引用块" class="headerlink" title="9.引用块"></a>9.引用块</h3><p><code>&gt;</code>+<code>空格</code>：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token blockquote punctuation">&gt;</span> 111<span class="token blockquote punctuation">&gt;</span> 222<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>111<br>222</p></blockquote><p>嵌套引用块：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token blockquote punctuation">&gt;</span> 最外层<span class="token blockquote punctuation">&gt; &gt;</span> 第一层嵌套<span class="token blockquote punctuation">&gt; &gt; &gt;</span> 第二层嵌套<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>最外层</p><blockquote><p>第一层嵌套</p><blockquote><p>第二层嵌套</p></blockquote></blockquote></blockquote><p>也可以和有序/无序列表搭配使用。</p><h3 id="10-代码块"><a href="#10-代码块" class="headerlink" title="10.代码块"></a>10.代码块</h3><p>①<code>```</code>包裹起来：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token code"><span class="token punctuation">```</span><span class="token code-language">java</span><span class="token code-block language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span> args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"HelloMarkdown"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></span><span class="token punctuation">```</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>②前面加四个空格或一个tab</p><h3 id="11-链接"><a href="#11-链接" class="headerlink" title="11.链接"></a>11.链接</h3><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token url">[<span class="token content">链接名称</span>](链接地址)</span>或<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>链接地址</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>也可以类似脚注的写法：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token url">[<span class="token content">GAATTC</span>][<span class="token variable">123</span>]</span><span class="token url-reference url"><span class="token punctuation">[</span><span class="token variable">123</span><span class="token punctuation">]</span><span class="token punctuation">:</span> https://gaattc.gitee.io</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="12-图片"><a href="#12-图片" class="headerlink" title="12.图片"></a>12.图片</h3><p>类似链接，前面加一个感叹号</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token url">![<span class="token content">alt</span>](http://#)</span>或<span class="token url">![<span class="token content">alt</span>](http://# <span class="token string">"title"</span>)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>也可以类似脚注写法。</p><p>也可以使用html写法：</p><pre class="line-numbers language-none"><code class="language-none">&lt;img src="http://#" width="50%"&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="13-表格"><a href="#13-表格" class="headerlink" title="13.表格"></a>13.表格</h3><p>使用 <code>|</code> 来分隔不同的单元格，使用 <code>-</code> 来分隔表头和其他行。</p><p>表格的对齐方式：</p><ul><li><strong>-:</strong> 设置内容和标题栏居右对齐。</li><li><strong>:-</strong> 设置内容和标题栏居左对齐。</li><li><strong>:-:</strong> 设置内容和标题栏居中对齐。</li></ul><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token table"><span class="token table-header-row"><span class="token punctuation">|</span><span class="token table-header important"> 左对齐 </span><span class="token punctuation">|</span><span class="token table-header important"> 右对齐 </span><span class="token punctuation">|</span><span class="token table-header important"> 居中对齐</span><span class="token punctuation">|</span></span><span class="token table-line"><span class="token punctuation">|</span> <span class="token punctuation">:-----</span><span class="token punctuation">|</span> <span class="token punctuation">----:</span> <span class="token punctuation">|</span> <span class="token punctuation">:----:</span><span class="token punctuation">|</span></span><span class="token table-data-rows"><span class="token punctuation">|</span><span class="token table-data"> 单元格 </span><span class="token punctuation">|</span><span class="token table-data"> 单元格 </span><span class="token punctuation">|</span><span class="token table-data"> 单元格 </span><span class="token punctuation">|</span><span class="token punctuation">|</span><span class="token table-data"> 单元格 </span><span class="token punctuation">|</span><span class="token table-data"> 单元格 </span><span class="token punctuation">|</span><span class="token table-data"> 单元格 </span><span class="token punctuation">|</span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-高级用法"><a href="#2-高级用法" class="headerlink" title="2.高级用法"></a>2.高级用法</h2><h3 id="1-文字大小变"><a href="#1-文字大小变" class="headerlink" title="1.文字大小变"></a>1.文字大小变</h3><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>4</span><span class="token punctuation">&gt;</span></span>我是变大的字<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>small</span><span class="token punctuation">&gt;</span></span>字体变小<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>small</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>big</span><span class="token punctuation">&gt;</span></span>字体变大<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>big</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><font size="4">我是变大的字</font><br><small>字体变小</small><br><big>字体变大</big></p><h3 id="2-文字颜色和字体标签"><a href="#2-文字颜色和字体标签" class="headerlink" title="2.文字颜色和字体标签"></a>2.文字颜色和字体标签</h3><p>可以使用font标签：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>red</span> <span class="token attr-name">face</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>Consolas</span><span class="token punctuation">&gt;</span></span>文字<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><font color="red" face="Consolas">文字</font></p><h3 id="3-其他支持的标签："><a href="#3-其他支持的标签：" class="headerlink" title="3.其他支持的标签："></a>3.其他支持的标签：</h3><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>kbd</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>em</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sup</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sub</span><span class="token punctuation">&gt;</span></span>等<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4-转义字符"><a href="#4-转义字符" class="headerlink" title="4.转义字符"></a>4.转义字符</h3><p>如果需要显示特定的符号则需要使用转义字符，可以使用反斜杠转义特殊字符：</p><pre class="line-numbers language-none"><code class="language-none">\   反斜线`   反引号*   星号_   下划线{}  花括号[]  方括号()  小括号#   井字号+   加号-   减号.   英文句点!   感叹号<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-数学公式-需要mathjax"><a href="#5-数学公式-需要mathjax" class="headerlink" title="5.数学公式(需要mathjax)"></a>5.数学公式(需要mathjax)</h3><p>可以使用两个美元符 $$ 包裹 TeX 或 LaTeX 格式的数学公式来实现：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">$$\mathbf{V}_1 \times \mathbf{V}_2 =  \begin{vmatrix} \mathbf{i} &amp; \mathbf{j} &amp; \mathbf{k} \\\frac{\partial X}{\partial u} &amp;  \frac{\partial Y}{\partial u} &amp; 0 \\\frac{\partial X}{\partial v} &amp;  \frac{\partial Y}{\partial v} &amp; 0 \\\end{vmatrix}${$tep1}{\style{visibility:hidden}{(x+1)(x+1)}}$$<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>$$<br>\mathbf{V}_1 \times \mathbf{V}_2 =  \begin{vmatrix}<br>\mathbf{i} &amp; \mathbf{j} &amp; \mathbf{k} \<br>\frac{\partial X}{\partial u} &amp;  \frac{\partial Y}{\partial u} &amp; 0 \<br>\frac{\partial X}{\partial v} &amp;  \frac{\partial Y}{\partial v} &amp; 0 \<br>\end{vmatrix}<br>${$tep1}{\style{visibility:hidden}{(x+1)(x+1)}}<br>$$</p><h3 id="6-流程图"><a href="#6-流程图" class="headerlink" title="6.流程图"></a>6.流程图</h3><p><a href="https://www.jianshu.com/p/b421cc723da5">参考</a></p><h3 id="7-嵌入iframe"><a href="#7-嵌入iframe" class="headerlink" title="7.嵌入iframe"></a>7.嵌入iframe</h3><blockquote><p>可以嵌入很多扩展网页或者插件</p></blockquote><p>比如b站视频：</p><p><img src="/img/image-20210117122139210.png"></p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>iframe</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>//player.bilibili.com/player.html?aid=543638785&amp;bvid=BV1ui4y1c7Zm&amp;cid=281537346&amp;page=1<span class="token punctuation">"</span></span> <span class="token attr-name">scrolling</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>no<span class="token punctuation">"</span></span> <span class="token attr-name">border</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">frameborder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>no<span class="token punctuation">"</span></span> <span class="token attr-name">framespacing</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">allowfullscreen</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>iframe</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><font color="red">注意：嵌入视频最好指定高度宽度，如：</font></p><pre class="line-numbers language-html" data-language="html"><code class="language-html">width="800" height="450"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>比如网易云：</p><img src="/img/image-20210117121723072.png" style="zoom:67%;"><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>iframe</span> <span class="token attr-name">frameborder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>no<span class="token punctuation">"</span></span> <span class="token attr-name">border</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">marginwidth</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">marginheight</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>330</span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>86</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>//music.163.com/outchain/player?type=2&amp;id=28283406&amp;auto=1&amp;height=66<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>iframe</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>修改音乐id即可。</p><h3 id="8-折叠块"><a href="#8-折叠块" class="headerlink" title="8.折叠块"></a>8.折叠块</h3><p>语法：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>details</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span>折叠代码块<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pre</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>code</span><span class="token punctuation">&gt;</span></span>      System.out.println("我是代码");  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>code</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pre</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>details</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>效果：</p><details>  <summary>折叠代码块</summary>  <pre><code>      System.out.println("我是代码");  </code></pre></details>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sql查询语法总结</title>
      <link href="posts/23d9d6c0/"/>
      <url>posts/23d9d6c0/</url>
      
        <content type="html"><![CDATA[<h1 id="sql查询语法总结"><a href="#sql查询语法总结" class="headerlink" title="sql查询语法总结"></a>sql查询语法总结</h1><p>mybatis用到很多基础都忘了，复习一下…</p><blockquote><p>环境：mysql5.7</p></blockquote><h2 id="1-SELECT语句的执行顺序"><a href="#1-SELECT语句的执行顺序" class="headerlink" title="1.SELECT语句的执行顺序"></a>1.SELECT语句的执行顺序</h2><p>(6) SELECT column_name, …<br>(1) FROM table_name, …<br>(2) [WHERE …]<br>(3) [GROUP BY …]<br>(4) [HAVING …]<br>(5) [ORDER BY …];<br>(7) LIMIT<br>即：</p><blockquote><p>1.关键字的顺序<br>   SELECT…FROM…WHERE…GROUP BY…HAVING…ORDER BY…LIMIT;<br>2.底层执行的顺序<br>   FROM &gt; WHERE &gt; GROUP BY &gt; HAVING &gt; SELECT字段 &gt; DISCTINCT &gt; ORDER BY &gt; LIMIT;</p></blockquote><h2 id="2-简单查询"><a href="#2-简单查询" class="headerlink" title="2.简单查询"></a>2.简单查询</h2><p><a href="https://gaattc.lanzoui.com/ii65ej1cz1i">演示用数据准备1</a></p><h3 id="计算表达式和函数的值"><a href="#计算表达式和函数的值" class="headerlink" title="计算表达式和函数的值"></a>计算表达式和函数的值</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">select</span> concat<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">,</span><span class="token string">'d'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">select</span> sqrt<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="查询表中的字段"><a href="#查询表中的字段" class="headerlink" title="查询表中的字段"></a>查询表中的字段</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> name <span class="token keyword">from</span> heros<span class="token punctuation">;</span><span class="token keyword">select</span> name<span class="token punctuation">,</span>hp_max<span class="token punctuation">,</span>mp_max<span class="token punctuation">,</span>role_main <span class="token keyword">from</span> heros<span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> heros<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="使用-WHERE-子句过滤记录（where）"><a href="#使用-WHERE-子句过滤记录（where）" class="headerlink" title="使用 WHERE 子句过滤记录（where）"></a>使用 WHERE 子句过滤记录（where）</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment"># 查询主要角色定位为'法师'的英雄有哪些?</span><span class="token keyword">select</span> name<span class="token punctuation">,</span>role_main <span class="token keyword">from</span> heros <span class="token keyword">where</span> role_main<span class="token operator">=</span><span class="token string">'法师'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="给字段起别名（as）"><a href="#给字段起别名（as）" class="headerlink" title="给字段起别名（as）"></a>给字段起别名（as）</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> name<span class="token punctuation">,</span> hp_max <span class="token keyword">as</span> hp<span class="token punctuation">,</span> mp_max <span class="token keyword">as</span> mp <span class="token keyword">from</span> heros<span class="token punctuation">;</span><span class="token keyword">select</span> name<span class="token punctuation">,</span> hp_max hp<span class="token punctuation">,</span> mp_max mp <span class="token keyword">from</span> heros<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>AS 关键字可以省略，但是不推荐这样做。 AS 关键字不仅仅可以给字段起别名，还可以给表起别名。</p><h3 id="去除重复行（distinct）"><a href="#去除重复行（distinct）" class="headerlink" title="去除重复行（distinct）"></a>去除重复行（distinct）</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment"># 查询主要角色定义有哪些？ </span><span class="token comment"># select role_main from heros;</span><span class="token keyword">select</span> <span class="token keyword">distinct</span> role_main <span class="token keyword">from</span> heros<span class="token punctuation">;</span><span class="token comment"># 查询不同的主要角色定位和辅助角色定位。 </span><span class="token keyword">select</span> <span class="token keyword">distinct</span> role_main<span class="token punctuation">,</span> role_assist <span class="token keyword">from</span> heros<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意：<br>a.DISTINCT 是对所有查询字段的组合进行去重，也就是说每个字段都相同，才认为两条记录是相同的。<br>b. DISTINCT 关键字必须放在所有查询字段的前面.</p><h3 id="排序（order-by）"><a href="#排序（order-by）" class="headerlink" title="排序（order by）"></a>排序（order by）</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> name<span class="token punctuation">,</span>hp_max <span class="token keyword">from</span> heros <span class="token keyword">order</span> <span class="token keyword">by</span> hp_max<span class="token punctuation">;</span> <span class="token comment"># 升序</span><span class="token keyword">select</span> name<span class="token punctuation">,</span>hp_max <span class="token keyword">from</span> heros <span class="token keyword">order</span> <span class="token keyword">by</span> hp_max <span class="token keyword">asc</span><span class="token punctuation">;</span> <span class="token comment"># 升序</span><span class="token keyword">select</span> name<span class="token punctuation">,</span>hp_max <span class="token keyword">from</span> heros <span class="token keyword">order</span> <span class="token keyword">by</span> hp_max <span class="token keyword">desc</span><span class="token punctuation">;</span> <span class="token comment"># 降序 </span><span class="token comment"># 按照多个字段排序 </span><span class="token keyword">select</span> name<span class="token punctuation">,</span>hp_max<span class="token punctuation">,</span>mp_max <span class="token keyword">from</span> heros <span class="token keyword">order</span> <span class="token keyword">by</span> hp_max<span class="token punctuation">,</span> mp_max<span class="token punctuation">;</span><span class="token keyword">select</span> name<span class="token punctuation">,</span>hp_max<span class="token punctuation">,</span>mp_max <span class="token keyword">from</span> heros <span class="token keyword">order</span> <span class="token keyword">by</span> hp_max<span class="token punctuation">,</span> mp_max <span class="token keyword">desc</span><span class="token punctuation">;</span><span class="token keyword">select</span> name<span class="token punctuation">,</span>hp_max<span class="token punctuation">,</span>mp_max <span class="token keyword">from</span> heros <span class="token keyword">order</span> <span class="token keyword">by</span> hp_max <span class="token keyword">asc</span><span class="token punctuation">,</span> mp_max <span class="token keyword">desc</span><span class="token punctuation">;</span><span class="token comment"># 对非选择字段进行排序 </span><span class="token keyword">select</span> name<span class="token punctuation">,</span>hp_max <span class="token keyword">from</span> heros <span class="token keyword">order</span> <span class="token keyword">by</span> hp_max <span class="token keyword">asc</span><span class="token punctuation">,</span> mp_max <span class="token keyword">desc</span><span class="token punctuation">;</span><span class="token comment"># 对计算字段排序 </span><span class="token keyword">select</span> name<span class="token punctuation">,</span>hp_max<span class="token punctuation">,</span>mp_max <span class="token keyword">from</span> heros <span class="token keyword">order</span> <span class="token keyword">by</span> <span class="token punctuation">(</span>hp_max <span class="token operator">+</span> mp_max<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="限制结果集的数量"><a href="#限制结果集的数量" class="headerlink" title="限制结果集的数量"></a>限制结果集的数量</h3><p>语法：①LIMIT offset, nums;      ② LIMIT nums OFFSET offset;</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment"># 练习：我们想查询最大生命值最高的5名英雄。</span><span class="token keyword">select</span> name<span class="token punctuation">,</span> hp_max <span class="token keyword">from</span> heros <span class="token keyword">order</span> <span class="token keyword">by</span> hp_max <span class="token keyword">desc</span> <span class="token keyword">limit</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token keyword">select</span> name<span class="token punctuation">,</span> hp_max <span class="token keyword">from</span> heros <span class="token keyword">order</span> <span class="token keyword">by</span> hp_max <span class="token keyword">desc</span> <span class="token keyword">limit</span> <span class="token number">5</span> <span class="token keyword">offset</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment"># 当偏移量为0时,我们可以省略offset</span><span class="token keyword">select</span> name<span class="token punctuation">,</span> hp_max <span class="token keyword">from</span> heros <span class="token keyword">order</span> <span class="token keyword">by</span> hp_max <span class="token keyword">desc</span> <span class="token keyword">limit</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token comment"># 分页查询(page, rows)</span><span class="token comment"># limit rows offset (page-1)*rows</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意：</strong></p><p>不同的 DBMS 用来限制结果集的关键字是不一样的，比如Microsoft SQL Server 和 Access  使用的是 TOP 关键字。<br>offset是指偏移量，从第1行查起，偏移量自然为0。此时，可以写成 LIMIT n;<br>可以使用 LIMIT 关键字实现分页查询。 LIMIT (page_num – 1) * page_size, page_size;</p><h3 id="计算字段"><a href="#计算字段" class="headerlink" title="计算字段"></a>计算字段</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> name<span class="token punctuation">,</span> hp_max <span class="token operator">+</span> mp_max <span class="token keyword">from</span> heros<span class="token punctuation">;</span><span class="token keyword">select</span> name<span class="token punctuation">,</span> hp_max <span class="token operator">+</span> mp_max <span class="token keyword">as</span> total <span class="token keyword">from</span> heros<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a>聚合函数</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">avg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">min</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment"># COUNT(*) 计算表中的总行数; </span><span class="token keyword">create</span> <span class="token keyword">table</span> t_count<span class="token punctuation">(</span>    a <span class="token keyword">int</span><span class="token punctuation">,</span>    b <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> t_count <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token boolean">null</span><span class="token punctuation">,</span> <span class="token boolean">null</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token boolean">null</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token boolean">null</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t_count<span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">as</span> nums <span class="token keyword">from</span> t_count<span class="token punctuation">;</span><span class="token comment"># COUNT() 作用于某个具体的字段，可以统计这个字段的非 `NULL` 值的个数。</span><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token keyword">from</span> t_count<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以下均忽略null值的行  ：</p><p>sum()</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token function">sum</span><span class="token punctuation">(</span>hp_max<span class="token punctuation">)</span> <span class="token keyword">from</span> heros<span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">distinct</span> hp_max<span class="token punctuation">)</span> <span class="token keyword">from</span> heros<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>avg()</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token function">avg</span><span class="token punctuation">(</span>hp_max<span class="token punctuation">)</span> <span class="token keyword">from</span> heros<span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token function">round</span><span class="token punctuation">(</span><span class="token function">avg</span><span class="token punctuation">(</span>hp_max<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">as</span> avg <span class="token keyword">from</span> heros<span class="token punctuation">;</span>  <span class="token comment">#指定小数点后多少位</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>max()，min()</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token function">max</span><span class="token punctuation">(</span>hp_max<span class="token punctuation">)</span> <span class="token keyword">from</span> heros<span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token function">min</span><span class="token punctuation">(</span>hp_max<span class="token punctuation">)</span> <span class="token keyword">from</span> heros<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h3><p> a.搭配聚合函数使用</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment"># 练习：按照主要角色定位进行分组，并统计每一组的英雄数目。</span><span class="token keyword">select</span> role_main<span class="token punctuation">,</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">from</span> heros <span class="token keyword">group</span> <span class="token keyword">by</span> role_main<span class="token punctuation">;</span><span class="token comment"># 练习：按照次要角色定位进行分组，并统计每一组的英雄数目。</span><span class="token keyword">select</span> role_assist<span class="token punctuation">,</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">from</span> heros <span class="token keyword">group</span> <span class="token keyword">by</span> role_assist<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>b.group_concat</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment"># 练习：我们想查询每种角色的英雄都有哪些？</span><span class="token keyword">select</span> role_main<span class="token punctuation">,</span> group_concat<span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token keyword">from</span> heros <span class="token keyword">group</span> <span class="token keyword">by</span> role_main<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/img/snipaste_2020-07-02_22-42-08.png"></p><p>c.多字段分组</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">as</span> num<span class="token punctuation">,</span> role_main<span class="token punctuation">,</span> role_assist <span class="token keyword">from</span> heros <span class="token keyword">group</span> <span class="token keyword">by</span> role_main<span class="token punctuation">,</span> role_assist <span class="token keyword">order</span> <span class="token keyword">by</span> num <span class="token keyword">desc</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p> d. having过滤分组</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment"># 练习：我们想要按照英雄的主要角色定位，次要角色定位进行分组，</span><span class="token comment"># 并且筛选分组中英雄数目大于 5 的组，最后根据每组的英雄数目从高到低进行排序。</span><span class="token keyword">SELECT</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> num<span class="token punctuation">,</span> role_main<span class="token punctuation">,</span> role_assist <span class="token keyword">FROM</span> heros <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> role_main<span class="token punctuation">,</span> role_assist <span class="token keyword">HAVING</span> num <span class="token operator">&gt;</span> <span class="token number">5</span><span class="token keyword">ORDER</span> <span class="token keyword">BY</span> num <span class="token keyword">DESC</span><span class="token punctuation">;</span><span class="token comment"># 练习：筛选最大生命值大于 6000 的英雄，按照主要角色定位，次要角色定位分组，</span><span class="token comment"># 并且筛选英雄数目大于 5 的分组，最后按照英雄数目从高到低进行排序。</span><span class="token keyword">SELECT</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> num<span class="token punctuation">,</span> role_main<span class="token punctuation">,</span> role_assist <span class="token keyword">FROM</span> heros <span class="token keyword">WHERE</span> hp_max <span class="token operator">&gt;</span> <span class="token number">6000</span><span class="token keyword">GROUP</span> <span class="token keyword">BY</span> role_main<span class="token punctuation">,</span> role_assist <span class="token keyword">HAVING</span> num <span class="token operator">&gt;</span> <span class="token number">5</span><span class="token keyword">ORDER</span> <span class="token keyword">BY</span> num <span class="token keyword">DESC</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="时间-datetime-相关"><a href="#时间-datetime-相关" class="headerlink" title="时间(datetime)相关"></a>时间(datetime)相关</h3><p>①时间转换</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">#时间之间转换</span><span class="token keyword">year</span><span class="token punctuation">(</span><span class="token keyword">date</span><span class="token punctuation">)</span><span class="token keyword">month</span><span class="token punctuation">(</span><span class="token keyword">date</span><span class="token punctuation">)</span><span class="token keyword">day</span><span class="token punctuation">(</span><span class="token keyword">date</span><span class="token punctuation">)</span>，to_days<span class="token punctuation">(</span><span class="token keyword">date</span><span class="token punctuation">)</span><span class="token keyword">hour</span><span class="token punctuation">(</span><span class="token keyword">date</span><span class="token punctuation">)</span><span class="token keyword">minute</span><span class="token punctuation">(</span><span class="token keyword">date</span><span class="token punctuation">)</span><span class="token keyword">second</span><span class="token punctuation">(</span><span class="token keyword">date</span><span class="token punctuation">)</span><span class="token punctuation">,</span>time_to_sec<span class="token punctuation">(</span><span class="token keyword">time</span><span class="token punctuation">)</span><span class="token comment">#字符串与时间转换</span>date_format<span class="token punctuation">(</span><span class="token keyword">date</span><span class="token punctuation">,</span>format<span class="token punctuation">)</span>time_format<span class="token punctuation">(</span><span class="token keyword">time</span><span class="token punctuation">,</span>format<span class="token punctuation">)</span>str_to_date<span class="token punctuation">(</span>str<span class="token punctuation">,</span>format<span class="token punctuation">)</span><span class="token comment">#时间转字符串</span>strftime<span class="token punctuation">(</span>format<span class="token punctuation">,</span><span class="token keyword">time</span><span class="token punctuation">)</span><span class="token comment">#%d 日期, 01-31、%f 小数形式的秒，SS.SSS、%H 小时, 00-23、%j 算出某一天是该年的第几天，001-366、%m 月份，00-12、</span><span class="token operator">%</span>M 分钟<span class="token punctuation">,</span> <span class="token number">00</span><span class="token operator">-</span><span class="token number">59</span>、<span class="token operator">%</span>s 从<span class="token number">1970</span>年<span class="token number">1</span>月<span class="token number">1</span>日到现在的秒数、<span class="token operator">%</span>S 秒<span class="token punctuation">,</span> <span class="token number">00</span><span class="token operator">-</span><span class="token number">59</span>、<span class="token operator">%</span>w 星期<span class="token punctuation">,</span> <span class="token number">0</span><span class="token operator">-</span><span class="token number">6</span> <span class="token punctuation">(</span><span class="token number">0</span>是星期天<span class="token punctuation">)</span>、<span class="token operator">%</span>W 算出某一天属于该年的第几周<span class="token punctuation">,</span> <span class="token number">01</span><span class="token operator">-</span><span class="token number">53</span>、<span class="token operator">%</span>Y 年<span class="token punctuation">,</span> YYYY、<span class="token operator">%</span><span class="token operator">%</span> 百分号<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>②获取当前时间</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">#获得当前日期+时间（date + time）</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>sysdate<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#获得当前时间戳</span><span class="token keyword">current_timestamp</span><span class="token keyword">current_timestamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>不同之处在于：now() 在执行开始时值就得到了， sysdate() 在函数执行时动态得到值</p><p>③时间计算</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">#加减法</span>date_add<span class="token punctuation">(</span><span class="token punctuation">)</span>date_sub<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#算差值</span>datediff<span class="token punctuation">(</span>date1<span class="token punctuation">,</span>date2<span class="token punctuation">)</span>timediff<span class="token punctuation">(</span>time1<span class="token punctuation">,</span>time2<span class="token punctuation">)</span><span class="token comment">#加减法</span>date_add<span class="token punctuation">(</span><span class="token punctuation">)</span>date_sub<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#算差值</span>datediff<span class="token punctuation">(</span>date1<span class="token punctuation">,</span>date2<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>④timestamp的函数</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">timestamp</span><span class="token punctuation">(</span><span class="token keyword">date</span><span class="token punctuation">)</span> <span class="token comment"># date to timestamp</span><span class="token keyword">timestamp</span><span class="token punctuation">(</span>dt<span class="token punctuation">,</span><span class="token keyword">time</span><span class="token punctuation">)</span> <span class="token comment"># dt + time</span>timestampadd<span class="token punctuation">(</span>unit<span class="token punctuation">,</span><span class="token keyword">interval</span><span class="token punctuation">,</span>datetime_expr<span class="token punctuation">)</span>timestampdiff<span class="token punctuation">(</span>unit<span class="token punctuation">,</span>datetime_expr1<span class="token punctuation">,</span>datetime_expr2<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>⑤时区（timezone）转换函数</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">convert_tz<span class="token punctuation">(</span>dt<span class="token punctuation">,</span>from_tz<span class="token punctuation">,</span>to_tz<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="小数类型转换"><a href="#小数类型转换" class="headerlink" title="小数类型转换"></a>小数类型转换</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">#取整</span><span class="token function">round</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span>n<span class="token punctuation">)</span> <span class="token comment">#num是小数，n为取小数点后位数</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="3-复杂查询"><a href="#3-复杂查询" class="headerlink" title="3.复杂查询"></a>3.复杂查询</h2><p><a href="https://gaattc.lanzoui.com/ifjqnj1l5yf">演示用数据准备2</a></p><h3 id="1-交叉连接"><a href="#1-交叉连接" class="headerlink" title="1 .交叉连接"></a>1 .交叉连接</h3><p>交叉连接也叫笛卡尔乘积</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> player <span class="token keyword">cross</span> <span class="token keyword">join</span> team<span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> player<span class="token punctuation">,</span>team<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="2-等值连接"><a href="#2-等值连接" class="headerlink" title="2 .等值连接"></a>2 .等值连接</h3><p>等值连接就是对多张表中相同的字段进行等值判断</p><p><strong>自然连接</strong></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> player_id<span class="token punctuation">,</span> team_id<span class="token punctuation">,</span> player_name<span class="token punctuation">,</span> height<span class="token punctuation">,</span> team_name <span class="token keyword">FROM</span> player <span class="token keyword">NATURAL</span> <span class="token keyword">JOIN</span> team<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>USING 连接</strong></p><pre class="line-numbers language-none"><code class="language-none">SELECT player_id, team_id, player_name, height, team_name FROM player JOIN team USING(team_id);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>ON 连接</strong></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> player_id<span class="token punctuation">,</span> player<span class="token punctuation">.</span>team_id<span class="token punctuation">,</span> player_name<span class="token punctuation">,</span> height<span class="token punctuation">,</span> team_name <span class="token keyword">FROM</span> player <span class="token keyword">JOIN</span> team <span class="token keyword">ON</span> player<span class="token punctuation">.</span>team_id <span class="token operator">=</span> team<span class="token punctuation">.</span>team_id<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-非等值连接"><a href="#3-非等值连接" class="headerlink" title="3.非等值连接"></a>3.非等值连接</h3><p>连接两张表的条件如果是相等判断，那就是等值连接，否则就是非等值连接。<br>比如说，查询每个球员的身高级别：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> player_name<span class="token punctuation">,</span> height<span class="token punctuation">,</span> height_level <span class="token keyword">FROM</span> player <span class="token keyword">JOIN</span> height_grades <span class="token keyword">AS</span> h <span class="token keyword">ON</span> player<span class="token punctuation">.</span>height <span class="token operator">BETWEEN</span> h<span class="token punctuation">.</span>height_lowest <span class="token operator">AND</span> h<span class="token punctuation">.</span>height_highest<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4-外连接"><a href="#4-外连接" class="headerlink" title="4.外连接"></a>4.外连接</h3><p>外连接除了查询满足条件的记录以外，还可以查询某一方不满足条件的记录。两张表做外连接，会有一张表是主表，另一张表是从表。</p><p><strong>左外连接</strong><br>左外连接，就是左边的表是主表，需要显示左边表的全部行。右边表是从表，只显示满足条件的行。关键字为 LEFT OUTER JOIN 。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> girls<span class="token punctuation">.</span>gid<span class="token punctuation">,</span> gname<span class="token punctuation">,</span> bname <span class="token keyword">from</span> girls <span class="token keyword">left</span> <span class="token keyword">join</span> boys <span class="token keyword">on</span> girls<span class="token punctuation">.</span>bid <span class="token operator">=</span> boys<span class="token punctuation">.</span>bid<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>右外连接</strong><br>右外连接，就是右边的表是主表，需要显示右边表的全部行。左边表是从表，只显示满足条件的行。关键字为 RIGHT OUTER JOIN 。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> boys<span class="token punctuation">.</span>bid<span class="token punctuation">,</span> bname<span class="token punctuation">,</span> gname <span class="token keyword">from</span> girls <span class="token keyword">right</span> <span class="token keyword">join</span> boys <span class="token keyword">using</span> <span class="token punctuation">(</span>gid<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>全外连接</strong><br>两张表都是主表，都需要显示全部行。但是MySQL不支持全外连接。关键字为 FULL OUTER JOIN 。</p><h3 id="5-自连接"><a href="#5-自连接" class="headerlink" title="5.自连接"></a>5.自连接</h3><p>对同一张表进行连接</p><p>比如我们想要查看比布雷克-格里芬高的球员都有谁：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> b<span class="token punctuation">.</span>player_name<span class="token punctuation">,</span> b<span class="token punctuation">.</span>height <span class="token keyword">FROM</span> player <span class="token keyword">as</span> a <span class="token keyword">JOIN</span> player <span class="token keyword">as</span> b <span class="token keyword">ON</span> a<span class="token punctuation">.</span>player_name <span class="token operator">=</span> <span class="token string">'布雷克-格里芬'</span> <span class="token operator">and</span> a<span class="token punctuation">.</span>height <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>height<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="4-联合查询"><a href="#4-联合查询" class="headerlink" title="4.联合查询"></a>4.联合查询</h2><p>可以用 <code>UNION</code> 关键字，将多个结果集合并成一个结果集，这样的查询我们叫联合查询。<br>应用场景： 要查询的结果来自多个表，且多个表没有直接的连接关系，但查询的信息一致时。<br><strong>注意事项:</strong> a. 列数一致 b. 对应的数据最好一致 c. UNION会去重, <code>UNION ALL</code>不会去重。</p><h2 id="5-子查询"><a href="#5-子查询" class="headerlink" title="5.子查询"></a>5.子查询</h2><p>子查询可以分为<code>关联子查询</code>和<code>非关联子查询</code>。</p><p>①如果子查询只执行一次，然后子查询的结果集会作为外部查询的条件进行判断，那么这样的子查询叫做<strong>非关联子查询</strong><br>比如：我们想要查询哪个球员的身高最高，最高身高是多少？</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> player_name<span class="token punctuation">,</span> height <span class="token keyword">FROM</span> player <span class="token keyword">WHERE</span> height <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token function">max</span><span class="token punctuation">(</span>height<span class="token punctuation">)</span> <span class="token keyword">FROM</span> player<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>②如果子查询依赖于外部查询，通常情况下是因为子查询用到了外部查询的某些字段。因此，每执行一次外部查询，子查询都要重新执行一次，这样的子查询叫做<strong>关联子查询</strong>。<br>比如：我们想要查询每个球队中大于平均身高的球员有哪些，并显示球员姓名，身高以及所在球队 ID。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> player_name<span class="token punctuation">,</span> height<span class="token punctuation">,</span> team_id <span class="token keyword">FROM</span> player <span class="token keyword">AS</span> a <span class="token keyword">WHERE</span> height <span class="token operator">&gt;</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token function">AVG</span><span class="token punctuation">(</span>height<span class="token punctuation">)</span> <span class="token keyword">FROM</span> player <span class="token keyword">AS</span> b <span class="token keyword">WHERE</span> a<span class="token punctuation">.</span>team_id <span class="token operator">=</span> b<span class="token punctuation">.</span>team_id<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="1-EXISTS-子查询"><a href="#1-EXISTS-子查询" class="headerlink" title="1. EXISTS 子查询"></a>1. EXISTS 子查询</h3><p>关联子查询可能会搭配 <code>EXISTS</code> 关键字一起使用。 <code>EXISTS</code> 用来判断子查询的结果集是否为空集。如果不为空集返回 True ，如果为空集返回 False 。<br>eg:查询出过场的球员都有哪些，并显示他们的球员ID，球员姓名，球队ID。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> player_id<span class="token punctuation">,</span> player_name<span class="token punctuation">,</span> team_id<span class="token keyword">from</span> player<span class="token keyword">where</span> <span class="token keyword">exists</span> <span class="token punctuation">(</span><span class="token keyword">select</span> player_id <span class="token keyword">from</span> player_score <span class="token keyword">where</span> player_score<span class="token punctuation">.</span>player_id <span class="token operator">=</span>player<span class="token punctuation">.</span>player_id<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同理，<code>NOT EXISTS</code> 自然就是不存在的意思。</p><h3 id="2-集合比较子查询"><a href="#2-集合比较子查询" class="headerlink" title="2.集合比较子查询"></a>2.集合比较子查询</h3><p>集合比较子查询的作用是与外部查询的结果集进行比较。主要有以下几个关键字：IN, SOME (ANY),<br>ALL。他们的含义如下：</p><table><thead><tr><th align="left">关键字</th><th>含义</th></tr></thead><tbody><tr><td align="left">IN</td><td>判断是否在子查询的结果集中</td></tr><tr><td align="left">SOME(ANY)</td><td>需要与比较操作符一起使用，与子查询结果集中的某个值进行比较</td></tr><tr><td align="left">ALL</td><td>需要与比较操作符一起使用，与子查询结果集中的所有值进行比较</td></tr></tbody></table><p>还是上面那个例子：查询出过场的球员都有哪些，并显示他们的球员ID，球员姓名，球队ID。我们可以<br>采用 <code>IN </code>来进行操作：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> player_id<span class="token punctuation">,</span> player_name<span class="token punctuation">,</span> team_id<span class="token keyword">from</span> player<span class="token keyword">where</span> player_id <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token keyword">distinct</span> player_id <span class="token keyword">from</span> player_score<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>SOME</code> 和 <code>ALL</code> 都需要和比较操作符一起使用，这些比较操作符包括： &gt; , = , &lt; , &gt;= , &lt;= , 和 &lt;&gt; 。</p><p>eg：我们要查询比印第安纳步行者 (team_id=1002) 中某个球员身高高的球员有哪些，显示它们的球员ID，球员姓名和球员身高。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> player_id<span class="token punctuation">,</span> player_name<span class="token punctuation">,</span> height<span class="token keyword">from</span> player<span class="token keyword">where</span> height <span class="token operator">&gt;</span> <span class="token keyword">some</span><span class="token punctuation">(</span><span class="token keyword">select</span> height <span class="token keyword">from</span> player <span class="token keyword">where</span> team_id <span class="token operator">=</span> <span class="token number">1002</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同样，如果我们想查询比印第安纳步行者 (team_id=1002) 中所有球员身高都高的球员有哪些，显示它们的球员ID，球员姓名和球员身高。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> player_id<span class="token punctuation">,</span> player_name<span class="token punctuation">,</span> height<span class="token keyword">from</span> player<span class="token keyword">where</span> height <span class="token operator">&gt;</span> <span class="token keyword">all</span><span class="token punctuation">(</span><span class="token keyword">select</span> height <span class="token keyword">from</span> player <span class="token keyword">where</span> team_id <span class="token operator">=</span> <span class="token number">1002</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-子查询作为计算字段"><a href="#3-子查询作为计算字段" class="headerlink" title="3.子查询作为计算字段"></a>3.子查询作为计算字段</h3><p>子查询甚至可以作为计算字段存在。举个例子：查询每个球队的名称，和它们的球员数。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> team_name<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">from</span> player <span class="token keyword">where</span> player<span class="token punctuation">.</span>team_id <span class="token operator">=</span> team<span class="token punctuation">.</span>team_id<span class="token punctuation">)</span> <span class="token keyword">AS</span> player_num <span class="token keyword">from</span> team<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>通常会给这个计算字段起个别名表达更明确。</p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>matery下自定义动态背景⭐⭐⭐</title>
      <link href="posts/e95bf6a/"/>
      <url>posts/e95bf6a/</url>
      
        <content type="html"><![CDATA[<h1 id="matery下自定义动态背景"><a href="#matery下自定义动态背景" class="headerlink" title="matery下自定义动态背景"></a>matery下自定义动态背景</h1><h2 id="第一版-不建议，cpu占用太高"><a href="#第一版-不建议，cpu占用太高" class="headerlink" title="第一版(不建议，cpu占用太高)"></a>第一版(不建议，cpu占用太高)</h2><blockquote><p>ref：<a href="https://www.jq22.com/jquery-info22256">https://www.jq22.com/jquery-info22256</a></p></blockquote><h3 id="1-添加css样式"><a href="#1-添加css样式" class="headerlink" title="1.添加css样式"></a>1.添加css样式</h3><pre class="line-numbers language-dir" data-language="dir"><code class="language-dir">hexo\themes\hexo-theme-matery-master\source\css\matery.css<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>修改：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">body</span> <span class="token punctuation">{</span><span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">radial-gradient</span><span class="token punctuation">(</span>200% 100% at bottom center<span class="token punctuation">,</span> #f7f7b6<span class="token punctuation">,</span> #e96f92<span class="token punctuation">,</span> #75517d<span class="token punctuation">,</span> #1b2947<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">radial-gradient</span><span class="token punctuation">(</span>220% 105% at top center<span class="token punctuation">,</span> #1b2947 10%<span class="token punctuation">,</span> #75517d 40%<span class="token punctuation">,</span> #e96f92 65%<span class="token punctuation">,</span> #f7f7b6<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> #eaeaea<span class="token punctuation">;</span><span class="token property">background-attachment</span><span class="token punctuation">:</span> fixed<span class="token punctuation">;</span>    <span class="token property">margin</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>    <span class="token property">color</span><span class="token punctuation">:</span> #34495e<span class="token punctuation">;</span>    <span class="token property">overflow-x</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>    <span class="token property">overflow-y</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span><span class="token property">cursor</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>../medias/Arrow.cur<span class="token punctuation">)</span></span><span class="token punctuation">,</span>auto<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>添加：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token atrule"><span class="token rule">@keyframes</span> rotate</span> <span class="token punctuation">{</span>  <span class="token selector">0%</span> <span class="token punctuation">{</span>    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">perspective</span><span class="token punctuation">(</span>400px<span class="token punctuation">)</span> <span class="token function">rotateZ</span><span class="token punctuation">(</span>20deg<span class="token punctuation">)</span> <span class="token function">rotateX</span><span class="token punctuation">(</span>-40deg<span class="token punctuation">)</span> <span class="token function">rotateY</span><span class="token punctuation">(</span>0<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector">100%</span> <span class="token punctuation">{</span>    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">perspective</span><span class="token punctuation">(</span>400px<span class="token punctuation">)</span> <span class="token function">rotateZ</span><span class="token punctuation">(</span>20deg<span class="token punctuation">)</span> <span class="token function">rotateX</span><span class="token punctuation">(</span>-40deg<span class="token punctuation">)</span> <span class="token function">rotateY</span><span class="token punctuation">(</span>-360deg<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token selector">.stars</span> <span class="token punctuation">{</span>  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">perspective</span><span class="token punctuation">(</span>500px<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token property">transform-style</span><span class="token punctuation">:</span> preserve-3d<span class="token punctuation">;</span>  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>  <span class="token property">bottom</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>  <span class="token property">perspective-origin</span><span class="token punctuation">:</span> 50% 100%<span class="token punctuation">;</span>  <span class="token property">left</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>  <span class="token property">animation</span><span class="token punctuation">:</span> rotate 90s infinite linear<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.star</span> <span class="token punctuation">{</span>  <span class="token property">width</span><span class="token punctuation">:</span> 4px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 4px<span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> #F7F7B6<span class="token punctuation">;</span>  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>  <span class="token property">top</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>  <span class="token property">left</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>  <span class="token property">transform-origin</span><span class="token punctuation">:</span> 0 0 -300px<span class="token punctuation">;</span>  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate3d</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> -300px<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token property">backface-visibility</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.table</span><span class="token punctuation">{</span><span class="token property">width</span><span class="token punctuation">:</span> 400px<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span> 350px<span class="token punctuation">;</span><span class="token property">margin</span><span class="token punctuation">:</span> 80px auto<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.table form</span><span class="token punctuation">{</span><span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.table .name</span><span class="token punctuation">{</span><span class="token property">width</span><span class="token punctuation">:</span> 280px<span class="token punctuation">;</span><span class="token property">margin</span><span class="token punctuation">:</span> 20px auto 30px auto<span class="token punctuation">;</span><span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span> 30px<span class="token punctuation">;</span><span class="token property">border-radius</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span><span class="token property">border</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span><span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span>0<span class="token punctuation">,</span>0<span class="token punctuation">,</span>0.2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token property">text-indent</span><span class="token punctuation">:</span> 0.5em<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.table .btn</span><span class="token punctuation">{</span><span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span> 30px<span class="token punctuation">;</span><span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span>0<span class="token punctuation">,</span>0<span class="token punctuation">,</span>0.1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token property">border-radius</span><span class="token punctuation">:</span> 8px<span class="token punctuation">;</span><span class="token property">border</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span><span class="token property">color</span><span class="token punctuation">:</span> white<span class="token punctuation">;</span><span class="token property">margin</span><span class="token punctuation">:</span> 0 auto<span class="token punctuation">;</span><span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-添加js"><a href="#2-添加js" class="headerlink" title="2.添加js"></a>2.添加js</h3><pre class="line-numbers language-dir" data-language="dir"><code class="language-dir">hexo\themes\hexo-theme-matery-master\layout\layout.ejs<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在&lt;body&gt;标签中添加以下代码：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stars<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"><span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">var</span> stars<span class="token operator">=</span><span class="token number">800</span><span class="token punctuation">;</span><span class="token keyword">var</span> $stars<span class="token operator">=</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">".stars"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> r<span class="token operator">=</span><span class="token number">800</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>stars<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">var</span> $star<span class="token operator">=</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"&lt;div/&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addClass</span><span class="token punctuation">(</span><span class="token string">"star"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>$stars<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>$star<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">".star"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">each</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">var</span> cur<span class="token operator">=</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> s<span class="token operator">=</span><span class="token number">0.2</span><span class="token operator">+</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> curR<span class="token operator">=</span>r<span class="token operator">+</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cur<span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token punctuation">{</span>transformOrigin<span class="token operator">:</span><span class="token string">"0 0 "</span><span class="token operator">+</span>curR<span class="token operator">+</span><span class="token string">"px"</span><span class="token punctuation">,</span>transform<span class="token operator">:</span><span class="token string">" translate3d(0,0,-"</span><span class="token operator">+</span>curR<span class="token operator">+</span><span class="token string">"px) rotateY("</span><span class="token operator">+</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">360</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"deg) rotateX("</span><span class="token operator">+</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token operator">-</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"deg) scale("</span><span class="token operator">+</span>s<span class="token operator">+</span><span class="token string">","</span><span class="token operator">+</span>s<span class="token operator">+</span><span class="token string">")"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/img/image-20201203204217012.png"></p><h3 id="3-效果-假装星星在动…"><a href="#3-效果-假装星星在动…" class="headerlink" title="3.效果(假装星星在动…)"></a>3.效果(假装星星在动…)</h3><p><img src="/img/Snipaste_2020-12-03_20-45-25.jpg"></p><h3 id="4-问题"><a href="#4-问题" class="headerlink" title="4.问题"></a>4.问题</h3><p>有点吃cpu，一打开就30%多占用，以后再换一换。</p><h2 id="第二版-目前在用"><a href="#第二版-目前在用" class="headerlink" title="第二版(目前在用)"></a>第二版(目前在用)</h2><blockquote><p>ref：<a href="https://www.jq22.com/jquery-info22305">https://www.jq22.com/jquery-info22305</a></p></blockquote><h3 id="1-添加css样式-1"><a href="#1-添加css样式-1" class="headerlink" title="1.添加css样式"></a>1.添加css样式</h3><pre class="line-numbers language-dir" data-language="dir"><code class="language-dir">hexo\themes\hexo-theme-matery-master\source\css\matery.css<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token comment">/*动态背景*/</span><span class="token selector">#bg</span> <span class="token punctuation">{</span><span class="token property">position</span><span class="token punctuation">:</span> fixed<span class="token punctuation">;</span><span class="token property">top</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span><span class="token property">left</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span><span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span><span class="token property">z-index</span><span class="token punctuation">:</span> -1<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">#bg canvas</span> <span class="token punctuation">{</span><span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span><span class="token property">top</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span><span class="token property">left</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span><span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-添加js-1"><a href="#2-添加js-1" class="headerlink" title="2.添加js"></a>2.添加js</h3><pre class="line-numbers language-dir" data-language="dir"><code class="language-dir">hexo\themes\hexo-theme-matery-master\layout\layout.ejs<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在&lt;body&gt;标签中添加以下代码：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!--动态背景--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bg<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>canvas</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>canvas</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>canvas</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>canvas</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>canvas</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>canvas</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/js/canva_moving_effect.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre> <img src="/img/image-20201203223146002.png" style="zoom: 67%;"><h3 id="3-单独引入js文件，因为太多了放body里不好看"><a href="#3-单独引入js文件，因为太多了放body里不好看" class="headerlink" title="3.单独引入js文件，因为太多了放body里不好看"></a>3.单独引入js文件，因为太多了放body里不好看</h3><pre class="line-numbers language-dir" data-language="dir"><code class="language-dir">hexo\themes\hexo-theme-matery-master\source\js<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在这个目录新建一个文件<code>canva_moving_effect.js</code>，添加以下代码:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">$</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">var</span> canvas <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#bg'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">children</span><span class="token punctuation">(</span><span class="token string">'canvas'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>background <span class="token operator">=</span> canvas<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>foreground1 <span class="token operator">=</span> canvas<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>foreground2 <span class="token operator">=</span> canvas<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>config <span class="token operator">=</span> <span class="token punctuation">{</span>circle<span class="token operator">:</span> <span class="token punctuation">{</span>amount<span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span>layer<span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>color<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">157</span><span class="token punctuation">,</span> <span class="token number">97</span><span class="token punctuation">,</span> <span class="token number">207</span><span class="token punctuation">]</span><span class="token punctuation">,</span>alpha<span class="token operator">:</span> <span class="token number">0.3</span><span class="token punctuation">}</span><span class="token punctuation">,</span>line<span class="token operator">:</span> <span class="token punctuation">{</span>amount<span class="token operator">:</span> <span class="token number">12</span><span class="token punctuation">,</span>layer<span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>color<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">]</span><span class="token punctuation">,</span>alpha<span class="token operator">:</span> <span class="token number">0.3</span><span class="token punctuation">}</span><span class="token punctuation">,</span>speed<span class="token operator">:</span> <span class="token number">0.5</span><span class="token punctuation">,</span>angle<span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>background<span class="token punctuation">.</span>getContext<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">var</span> bctx <span class="token operator">=</span> background<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token string">'2d'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>fctx1 <span class="token operator">=</span> foreground1<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token string">'2d'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>fctx2 <span class="token operator">=</span> foreground2<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token string">'2d'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token constant">M</span> <span class="token operator">=</span> window<span class="token punctuation">.</span>Math<span class="token punctuation">,</span> <span class="token comment">// Cached Math</span>degree <span class="token operator">=</span> config<span class="token punctuation">.</span>angle<span class="token operator">/</span><span class="token number">360</span><span class="token operator">*</span><span class="token constant">M</span><span class="token punctuation">.</span><span class="token constant">PI</span><span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">,</span>circles <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>lines <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>wWidth<span class="token punctuation">,</span> wHeight<span class="token punctuation">,</span> timer<span class="token punctuation">;</span>requestAnimationFrame <span class="token operator">=</span> window<span class="token punctuation">.</span>requestAnimationFrame <span class="token operator">||</span> window<span class="token punctuation">.</span>mozRequestAnimationFrame <span class="token operator">||</span>window<span class="token punctuation">.</span>webkitRequestAnimationFrame <span class="token operator">||</span>window<span class="token punctuation">.</span>msRequestAnimationFrame <span class="token operator">||</span>window<span class="token punctuation">.</span>oRequestAnimationFrame <span class="token operator">||</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">callback<span class="token punctuation">,</span> element</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>callback<span class="token punctuation">,</span> <span class="token number">1000</span> <span class="token operator">/</span> <span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>cancelAnimationFrame <span class="token operator">=</span> window<span class="token punctuation">.</span>cancelAnimationFrame <span class="token operator">||</span>window<span class="token punctuation">.</span>mozCancelAnimationFrame <span class="token operator">||</span>window<span class="token punctuation">.</span>webkitCancelAnimationFrame <span class="token operator">||</span>window<span class="token punctuation">.</span>msCancelAnimationFrame <span class="token operator">||</span>window<span class="token punctuation">.</span>oCancelAnimationFrame <span class="token operator">||</span>clearTimeout<span class="token punctuation">;</span><span class="token keyword">var</span> <span class="token function-variable function">setCanvasHeight</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>wWidth <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span>window<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">width</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>wHeight <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span>window<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">height</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>canvas<span class="token punctuation">.</span><span class="token function">each</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>width <span class="token operator">=</span> wWidth<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>height <span class="token operator">=</span> wHeight<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">var</span> <span class="token function-variable function">drawCircle</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> radius<span class="token punctuation">,</span> color<span class="token punctuation">,</span> alpha</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">var</span> gradient <span class="token operator">=</span> fctx1<span class="token punctuation">.</span><span class="token function">createRadialGradient</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> radius<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>gradient<span class="token punctuation">.</span><span class="token function">addColorStop</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'rgba('</span><span class="token operator">+</span>color<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">','</span><span class="token operator">+</span>color<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">','</span><span class="token operator">+</span>color<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">','</span><span class="token operator">+</span>alpha<span class="token operator">+</span><span class="token string">')'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>gradient<span class="token punctuation">.</span><span class="token function">addColorStop</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'rgba('</span><span class="token operator">+</span>color<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">','</span><span class="token operator">+</span>color<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">','</span><span class="token operator">+</span>color<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">','</span><span class="token operator">+</span><span class="token punctuation">(</span>alpha<span class="token operator">-</span><span class="token number">0.1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">')'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>fctx1<span class="token punctuation">.</span><span class="token function">beginPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>fctx1<span class="token punctuation">.</span><span class="token function">arc</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> radius<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token constant">M</span><span class="token punctuation">.</span><span class="token constant">PI</span><span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>fctx1<span class="token punctuation">.</span>fillStyle <span class="token operator">=</span> gradient<span class="token punctuation">;</span>fctx1<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">var</span> <span class="token function-variable function">drawLine</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> width<span class="token punctuation">,</span> color<span class="token punctuation">,</span> alpha</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">var</span> endX <span class="token operator">=</span> x<span class="token operator">+</span><span class="token constant">M</span><span class="token punctuation">.</span><span class="token function">sin</span><span class="token punctuation">(</span>degree<span class="token punctuation">)</span><span class="token operator">*</span>width<span class="token punctuation">,</span>endY <span class="token operator">=</span> y<span class="token operator">-</span><span class="token constant">M</span><span class="token punctuation">.</span><span class="token function">cos</span><span class="token punctuation">(</span>degree<span class="token punctuation">)</span><span class="token operator">*</span>width<span class="token punctuation">,</span>gradient <span class="token operator">=</span> fctx2<span class="token punctuation">.</span><span class="token function">createLinearGradient</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> endX<span class="token punctuation">,</span> endY<span class="token punctuation">)</span><span class="token punctuation">;</span>gradient<span class="token punctuation">.</span><span class="token function">addColorStop</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'rgba('</span><span class="token operator">+</span>color<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">','</span><span class="token operator">+</span>color<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">','</span><span class="token operator">+</span>color<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">','</span><span class="token operator">+</span>alpha<span class="token operator">+</span><span class="token string">')'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>gradient<span class="token punctuation">.</span><span class="token function">addColorStop</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'rgba('</span><span class="token operator">+</span>color<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">','</span><span class="token operator">+</span>color<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">','</span><span class="token operator">+</span>color<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">','</span><span class="token operator">+</span><span class="token punctuation">(</span>alpha<span class="token operator">-</span><span class="token number">0.1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">')'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>fctx2<span class="token punctuation">.</span><span class="token function">beginPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>fctx2<span class="token punctuation">.</span><span class="token function">moveTo</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>fctx2<span class="token punctuation">.</span><span class="token function">lineTo</span><span class="token punctuation">(</span>endX<span class="token punctuation">,</span> endY<span class="token punctuation">)</span><span class="token punctuation">;</span>fctx2<span class="token punctuation">.</span>lineWidth <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>fctx2<span class="token punctuation">.</span>lineCap <span class="token operator">=</span> <span class="token string">'round'</span><span class="token punctuation">;</span>fctx2<span class="token punctuation">.</span>strokeStyle <span class="token operator">=</span> gradient<span class="token punctuation">;</span>fctx2<span class="token punctuation">.</span><span class="token function">stroke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">var</span> <span class="token function-variable function">drawBack</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>bctx<span class="token punctuation">.</span><span class="token function">clearRect</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> wWidth<span class="token punctuation">,</span> wHeight<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> gradient <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>gradient<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> bctx<span class="token punctuation">.</span><span class="token function">createRadialGradient</span><span class="token punctuation">(</span>wWidth<span class="token operator">*</span><span class="token number">0.3</span><span class="token punctuation">,</span> wHeight<span class="token operator">*</span><span class="token number">0.1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> wWidth<span class="token operator">*</span><span class="token number">0.3</span><span class="token punctuation">,</span> wHeight<span class="token operator">*</span><span class="token number">0.1</span><span class="token punctuation">,</span> wWidth<span class="token operator">*</span><span class="token number">0.9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>gradient<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">addColorStop</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'rgb(0, 26, 77)'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>gradient<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">addColorStop</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'transparent'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>bctx<span class="token punctuation">.</span><span class="token function">translate</span><span class="token punctuation">(</span>wWidth<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>bctx<span class="token punctuation">.</span><span class="token function">scale</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>bctx<span class="token punctuation">.</span><span class="token function">beginPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>bctx<span class="token punctuation">.</span>fillStyle <span class="token operator">=</span> gradient<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>bctx<span class="token punctuation">.</span><span class="token function">fillRect</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> wWidth<span class="token punctuation">,</span> wHeight<span class="token punctuation">)</span><span class="token punctuation">;</span>gradient<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> bctx<span class="token punctuation">.</span><span class="token function">createRadialGradient</span><span class="token punctuation">(</span>wWidth<span class="token operator">*</span><span class="token number">0.1</span><span class="token punctuation">,</span> wHeight<span class="token operator">*</span><span class="token number">0.1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> wWidth<span class="token operator">*</span><span class="token number">0.3</span><span class="token punctuation">,</span> wHeight<span class="token operator">*</span><span class="token number">0.1</span><span class="token punctuation">,</span> wWidth<span class="token punctuation">)</span><span class="token punctuation">;</span>gradient<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">addColorStop</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'rgb(0, 150, 240)'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>gradient<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">addColorStop</span><span class="token punctuation">(</span><span class="token number">0.8</span><span class="token punctuation">,</span> <span class="token string">'transparent'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>bctx<span class="token punctuation">.</span><span class="token function">translate</span><span class="token punctuation">(</span>wWidth<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>bctx<span class="token punctuation">.</span><span class="token function">scale</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>bctx<span class="token punctuation">.</span><span class="token function">beginPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>bctx<span class="token punctuation">.</span>fillStyle <span class="token operator">=</span> gradient<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>bctx<span class="token punctuation">.</span><span class="token function">fillRect</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> wWidth<span class="token punctuation">,</span> wHeight<span class="token punctuation">)</span><span class="token punctuation">;</span>gradient<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> bctx<span class="token punctuation">.</span><span class="token function">createRadialGradient</span><span class="token punctuation">(</span>wWidth<span class="token operator">*</span><span class="token number">0.1</span><span class="token punctuation">,</span> wHeight<span class="token operator">*</span><span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> wWidth<span class="token operator">*</span><span class="token number">0.1</span><span class="token punctuation">,</span> wHeight<span class="token operator">*</span><span class="token number">0.5</span><span class="token punctuation">,</span> wWidth<span class="token operator">*</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>gradient<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">addColorStop</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'rgb(40, 20, 105)'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>gradient<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">addColorStop</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'transparent'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>bctx<span class="token punctuation">.</span><span class="token function">beginPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>bctx<span class="token punctuation">.</span>fillStyle <span class="token operator">=</span> gradient<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>bctx<span class="token punctuation">.</span><span class="token function">fillRect</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> wWidth<span class="token punctuation">,</span> wHeight<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">var</span> <span class="token function-variable function">animate</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">var</span> sin <span class="token operator">=</span> <span class="token constant">M</span><span class="token punctuation">.</span><span class="token function">sin</span><span class="token punctuation">(</span>degree<span class="token punctuation">)</span><span class="token punctuation">,</span>cos <span class="token operator">=</span> <span class="token constant">M</span><span class="token punctuation">.</span><span class="token function">cos</span><span class="token punctuation">(</span>degree<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>config<span class="token punctuation">.</span>circle<span class="token punctuation">.</span>amount <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> config<span class="token punctuation">.</span>circle<span class="token punctuation">.</span>layer <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>fctx1<span class="token punctuation">.</span><span class="token function">clearRect</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> wWidth<span class="token punctuation">,</span> wHeight<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> len <span class="token operator">=</span> circles<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">var</span> item <span class="token operator">=</span> circles<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>x <span class="token operator">=</span> item<span class="token punctuation">.</span>x<span class="token punctuation">,</span>y <span class="token operator">=</span> item<span class="token punctuation">.</span>y<span class="token punctuation">,</span>radius <span class="token operator">=</span> item<span class="token punctuation">.</span>radius<span class="token punctuation">,</span>speed <span class="token operator">=</span> item<span class="token punctuation">.</span>speed<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">&gt;</span> wWidth <span class="token operator">+</span> radius<span class="token punctuation">)</span><span class="token punctuation">{</span>x <span class="token operator">=</span> <span class="token operator">-</span>radius<span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">&lt;</span> <span class="token operator">-</span>radius<span class="token punctuation">)</span><span class="token punctuation">{</span>x <span class="token operator">=</span> wWidth <span class="token operator">+</span> radius<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>x <span class="token operator">+=</span> sin<span class="token operator">*</span>speed<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span>y <span class="token operator">&gt;</span> wHeight <span class="token operator">+</span> radius<span class="token punctuation">)</span><span class="token punctuation">{</span>y <span class="token operator">=</span> <span class="token operator">-</span>radius<span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>y <span class="token operator">&lt;</span> <span class="token operator">-</span>radius<span class="token punctuation">)</span><span class="token punctuation">{</span>y <span class="token operator">=</span> wHeight <span class="token operator">+</span> radius<span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>y <span class="token operator">-=</span> cos<span class="token operator">*</span>speed<span class="token punctuation">;</span><span class="token punctuation">}</span>item<span class="token punctuation">.</span>x <span class="token operator">=</span> x<span class="token punctuation">;</span>item<span class="token punctuation">.</span>y <span class="token operator">=</span> y<span class="token punctuation">;</span><span class="token function">drawCircle</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> radius<span class="token punctuation">,</span> item<span class="token punctuation">.</span>color<span class="token punctuation">,</span> item<span class="token punctuation">.</span>alpha<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span>config<span class="token punctuation">.</span>line<span class="token punctuation">.</span>amount <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> config<span class="token punctuation">.</span>line<span class="token punctuation">.</span>layer <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>fctx2<span class="token punctuation">.</span><span class="token function">clearRect</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> wWidth<span class="token punctuation">,</span> wHeight<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> len <span class="token operator">=</span> lines<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">&lt;</span>len<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">var</span> item <span class="token operator">=</span> lines<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>x <span class="token operator">=</span> item<span class="token punctuation">.</span>x<span class="token punctuation">,</span>y <span class="token operator">=</span> item<span class="token punctuation">.</span>y<span class="token punctuation">,</span>width <span class="token operator">=</span> item<span class="token punctuation">.</span>width<span class="token punctuation">,</span>speed <span class="token operator">=</span> item<span class="token punctuation">.</span>speed<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">&gt;</span> wWidth <span class="token operator">+</span> width <span class="token operator">*</span> sin<span class="token punctuation">)</span><span class="token punctuation">{</span>x <span class="token operator">=</span> <span class="token operator">-</span>width <span class="token operator">*</span> sin<span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">&lt;</span> <span class="token operator">-</span>width <span class="token operator">*</span> sin<span class="token punctuation">)</span><span class="token punctuation">{</span>x <span class="token operator">=</span> wWidth <span class="token operator">+</span> width <span class="token operator">*</span> sin<span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>x <span class="token operator">+=</span> sin<span class="token operator">*</span>speed<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span>y <span class="token operator">&gt;</span> wHeight <span class="token operator">+</span> width <span class="token operator">*</span> cos<span class="token punctuation">)</span><span class="token punctuation">{</span>y <span class="token operator">=</span> <span class="token operator">-</span>width <span class="token operator">*</span> cos<span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>y <span class="token operator">&lt;</span> <span class="token operator">-</span>width <span class="token operator">*</span> cos<span class="token punctuation">)</span><span class="token punctuation">{</span>y <span class="token operator">=</span> wHeight <span class="token operator">+</span> width <span class="token operator">*</span> cos<span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>y <span class="token operator">-=</span> cos<span class="token operator">*</span>speed<span class="token punctuation">;</span><span class="token punctuation">}</span>item<span class="token punctuation">.</span>x <span class="token operator">=</span> x<span class="token punctuation">;</span>item<span class="token punctuation">.</span>y <span class="token operator">=</span> y<span class="token punctuation">;</span><span class="token function">drawLine</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> width<span class="token punctuation">,</span> item<span class="token punctuation">.</span>color<span class="token punctuation">,</span> item<span class="token punctuation">.</span>alpha<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span>timer <span class="token operator">=</span> <span class="token function">requestAnimationFrame</span><span class="token punctuation">(</span>animate<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">var</span> <span class="token function-variable function">createItem</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>circles <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>lines <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>config<span class="token punctuation">.</span>circle<span class="token punctuation">.</span>amount <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> config<span class="token punctuation">.</span>circle<span class="token punctuation">.</span>layer <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>config<span class="token punctuation">.</span>circle<span class="token punctuation">.</span>amount<span class="token operator">/</span>config<span class="token punctuation">.</span>circle<span class="token punctuation">.</span>layer<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span>config<span class="token punctuation">.</span>circle<span class="token punctuation">.</span>layer<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>circles<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>x<span class="token operator">:</span> <span class="token constant">M</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> wWidth<span class="token punctuation">,</span>y<span class="token operator">:</span> <span class="token constant">M</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> wHeight<span class="token punctuation">,</span>radius<span class="token operator">:</span> <span class="token constant">M</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token operator">+</span>j<span class="token operator">*</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token operator">+</span>j<span class="token operator">*</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span>color<span class="token operator">:</span> config<span class="token punctuation">.</span>circle<span class="token punctuation">.</span>color<span class="token punctuation">,</span>alpha<span class="token operator">:</span> <span class="token constant">M</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">0.2</span><span class="token operator">+</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>circle<span class="token punctuation">.</span>alpha<span class="token operator">-</span>j<span class="token operator">*</span><span class="token number">0.1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>speed<span class="token operator">:</span> config<span class="token punctuation">.</span>speed<span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">+</span>j<span class="token operator">*</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span>config<span class="token punctuation">.</span>line<span class="token punctuation">.</span>amount <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> config<span class="token punctuation">.</span>line<span class="token punctuation">.</span>layer <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> m<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> m<span class="token operator">&lt;</span>config<span class="token punctuation">.</span>line<span class="token punctuation">.</span>amount<span class="token operator">/</span>config<span class="token punctuation">.</span>line<span class="token punctuation">.</span>layer<span class="token punctuation">;</span> m<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> n<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> n<span class="token operator">&lt;</span>config<span class="token punctuation">.</span>line<span class="token punctuation">.</span>layer<span class="token punctuation">;</span> n<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>lines<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>x<span class="token operator">:</span> <span class="token constant">M</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> wWidth<span class="token punctuation">,</span>y<span class="token operator">:</span> <span class="token constant">M</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> wHeight<span class="token punctuation">,</span>width<span class="token operator">:</span> <span class="token constant">M</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token operator">+</span>n<span class="token operator">*</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token operator">+</span>n<span class="token operator">*</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span>color<span class="token operator">:</span> config<span class="token punctuation">.</span>line<span class="token punctuation">.</span>color<span class="token punctuation">,</span>alpha<span class="token operator">:</span> <span class="token constant">M</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">0.2</span><span class="token operator">+</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>line<span class="token punctuation">.</span>alpha<span class="token operator">-</span>n<span class="token operator">*</span><span class="token number">0.1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>speed<span class="token operator">:</span> config<span class="token punctuation">.</span>speed<span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">+</span>n<span class="token operator">*</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">cancelAnimationFrame</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span>timer <span class="token operator">=</span> <span class="token function">requestAnimationFrame</span><span class="token punctuation">(</span>animate<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">drawBack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">setCanvasHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">createItem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">$</span><span class="token punctuation">(</span>window<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">setCanvasHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">createItem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>jQuery<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-大功告成-附效果图-脑补圈圈在动"><a href="#4-大功告成-附效果图-脑补圈圈在动" class="headerlink" title="4.大功告成,附效果图(脑补圈圈在动~)"></a>4.大功告成,附效果图(脑补圈圈在动~)</h3><p><img src="/img/Snipaste_2020-12-03_22-26-45.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习心得 </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sql练习</title>
      <link href="posts/dd4b99ae/"/>
      <url>posts/dd4b99ae/</url>
      
        <content type="html"><![CDATA[<h1 id="SQL练习"><a href="#SQL练习" class="headerlink" title="SQL练习"></a>SQL练习</h1><blockquote><p>几十道简单的sql练习题，冬日暖手必备</p></blockquote><p><a href="https://gaattc.lanzoui.com/iRmaxizqzhg">数据准备</a></p><h2 id="1-单表查询"><a href="#1-单表查询" class="headerlink" title="1.单表查询"></a>1.单表查询</h2><p>–查询订购日期在1996年7月1日至1996年7月15日之间的订单的订购日期、订单ID、客户ID和雇员ID等字段的值</p><img src="/img/image-20201201225039555.png" alt="" style="zoom: 67%;">--查询供应商的ID、公司名称、地区、城市和电话字段的值。条件是“地区等于华北”并且“联系人头衔等于销售代表”。 <p> <img src="/img/image-20201201225442095.png"></p><p>–查询供应商的ID、公司名称、地区、城市和电话字段的值。其中的一些供应商位于华东或华南地区，另外一些供应商所在的城市是天津</p><p> <img src="/img/image-20201201225826327.png"></p><p>–查询位于“华东”或“华南”地区的供应商的ID、公司名称、地区、城市和电话字段的值</p><p> <img src="/img/image-20201201230047686.png"></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">#1</span><span class="token keyword">select</span> 订购日期<span class="token punctuation">,</span>订单ID<span class="token punctuation">,</span>客户ID<span class="token punctuation">,</span>雇员ID<span class="token keyword">from</span> 订单<span class="token keyword">where</span> 订购日期<span class="token operator">&gt;</span><span class="token string">'1996-7-1'</span> <span class="token operator">and</span> 订购日期<span class="token operator">&lt;</span><span class="token string">'1996-7-15'</span><span class="token punctuation">;</span><span class="token comment">#2</span><span class="token keyword">select</span> 供应商ID<span class="token punctuation">,</span>公司名称<span class="token punctuation">,</span>地区<span class="token punctuation">,</span>城市<span class="token punctuation">,</span>电话<span class="token keyword">from</span> 供应商<span class="token keyword">where</span> 地区<span class="token operator">=</span><span class="token string">'华北'</span> <span class="token operator">and</span> 联系人职务<span class="token operator">=</span><span class="token string">'销售代表'</span><span class="token punctuation">;</span><span class="token comment">#3</span><span class="token keyword">select</span> 供应商ID<span class="token punctuation">,</span>公司名称<span class="token punctuation">,</span>地区<span class="token punctuation">,</span>城市<span class="token punctuation">,</span>电话<span class="token keyword">from</span> 供应商<span class="token keyword">where</span> 地区<span class="token operator">=</span><span class="token string">'华东'</span> <span class="token operator">or</span> 地区<span class="token operator">=</span><span class="token string">'华南'</span> <span class="token operator">or</span> 城市<span class="token operator">=</span><span class="token string">'天津'</span><span class="token punctuation">;</span><span class="token comment">#4</span><span class="token keyword">select</span> 供应商ID<span class="token punctuation">,</span>公司名称<span class="token punctuation">,</span>地区<span class="token punctuation">,</span>城市<span class="token punctuation">,</span>电话<span class="token keyword">from</span> 供应商<span class="token keyword">where</span> 地区<span class="token operator">=</span><span class="token string">'华东'</span> <span class="token operator">or</span> 地区<span class="token operator">=</span><span class="token string">'华南'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-多表查询"><a href="#2-多表查询" class="headerlink" title="2.多表查询"></a>2.多表查询</h2><p>–查询订购日期在1996年7月1日至1996年7月15日之间的订单的订购日期、订单ID、相应订单的客户公司名称、负责订单的雇员的姓氏和名字等字段的值，并将查询结果按雇员的“姓氏”和“名字”字段的升序排列，“姓氏”和“名字”值相同的记录按“订单 ID”的降序排列</p><p> <img src="/img/image-20201201231615488.png"></p><p>–查询“10248”和“10254”号订单的订单ID、运货商的公司名称、订单上所订购的产品的名称</p><p> <img src="/img/image-20201201233000266.png"></p><p>–查询“10248”和“10254”号订单的订单ID、订单上所订购的产品的名称、数量、单价和折扣</p><p> <img src="/img/image-20201201233446848.png"></p><p>–查询“10248”和“10254”号订单的订单ID、订单上所订购的产品的名称及其销售金额</p><p> <img src="/img/image-20201201234636085.png"></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">#5</span><span class="token keyword">select</span> o<span class="token punctuation">.</span>订购日期<span class="token punctuation">,</span>o<span class="token punctuation">.</span>订单ID<span class="token punctuation">,</span>c<span class="token punctuation">.</span>公司名称<span class="token punctuation">,</span>e<span class="token punctuation">.</span>姓氏<span class="token punctuation">,</span>e<span class="token punctuation">.</span>名字<span class="token keyword">from</span> 订单 o <span class="token keyword">left</span> <span class="token keyword">join</span> 客户 c <span class="token keyword">on</span> o<span class="token punctuation">.</span>客户ID<span class="token operator">=</span>c<span class="token punctuation">.</span>客户ID<span class="token keyword">left</span> <span class="token keyword">join</span> 雇员 e <span class="token keyword">on</span> o<span class="token punctuation">.</span>雇员ID<span class="token operator">=</span>e<span class="token punctuation">.</span>雇员ID<span class="token keyword">where</span> o<span class="token punctuation">.</span>订购日期<span class="token operator">&gt;</span><span class="token string">'1996-7-1'</span> <span class="token operator">and</span> o<span class="token punctuation">.</span>订购日期<span class="token operator">&lt;</span><span class="token string">'1996-7-15'</span><span class="token keyword">order</span> <span class="token keyword">by</span> e<span class="token punctuation">.</span>姓氏<span class="token punctuation">,</span>e<span class="token punctuation">.</span>名字<span class="token punctuation">,</span>o<span class="token punctuation">.</span>订单ID <span class="token keyword">desc</span><span class="token punctuation">;</span><span class="token comment">#6</span><span class="token keyword">select</span> o<span class="token punctuation">.</span>订单ID<span class="token punctuation">,</span>s<span class="token punctuation">.</span>公司名称<span class="token punctuation">,</span>p<span class="token punctuation">.</span><span class="token punctuation">`</span>产品名称<span class="token punctuation">`</span><span class="token keyword">from</span> 订单 o<span class="token keyword">left</span> <span class="token keyword">join</span> 运货商 s <span class="token keyword">on</span> o<span class="token punctuation">.</span>运货商<span class="token operator">=</span>s<span class="token punctuation">.</span>运货商ID<span class="token keyword">left</span> <span class="token keyword">join</span> 订单明细 d <span class="token keyword">on</span> o<span class="token punctuation">.</span><span class="token punctuation">`</span>订单ID<span class="token punctuation">`</span><span class="token operator">=</span>d<span class="token punctuation">.</span><span class="token punctuation">`</span>订单ID<span class="token punctuation">`</span><span class="token keyword">left</span> <span class="token keyword">join</span> 产品 p <span class="token keyword">on</span> d<span class="token punctuation">.</span><span class="token punctuation">`</span>产品ID<span class="token punctuation">`</span><span class="token operator">=</span>p<span class="token punctuation">.</span><span class="token punctuation">`</span>产品ID<span class="token punctuation">`</span><span class="token keyword">where</span> o<span class="token punctuation">.</span><span class="token punctuation">`</span>订单ID<span class="token punctuation">`</span><span class="token operator">=</span><span class="token string">'10248'</span> <span class="token operator">or</span> o<span class="token punctuation">.</span><span class="token punctuation">`</span>订单ID<span class="token punctuation">`</span><span class="token operator">=</span><span class="token string">'10254'</span><span class="token punctuation">;</span><span class="token comment">#7</span><span class="token keyword">select</span> o<span class="token punctuation">.</span>订单ID<span class="token punctuation">,</span>p<span class="token punctuation">.</span><span class="token punctuation">`</span>产品名称<span class="token punctuation">`</span><span class="token punctuation">,</span>d<span class="token punctuation">.</span><span class="token punctuation">`</span>数量<span class="token punctuation">`</span><span class="token punctuation">,</span>d<span class="token punctuation">.</span><span class="token punctuation">`</span>单价<span class="token punctuation">`</span><span class="token punctuation">,</span>d<span class="token punctuation">.</span><span class="token punctuation">`</span>折扣<span class="token punctuation">`</span><span class="token keyword">from</span> 订单 o<span class="token keyword">left</span> <span class="token keyword">join</span> 订单明细 d <span class="token keyword">on</span> o<span class="token punctuation">.</span><span class="token punctuation">`</span>订单ID<span class="token punctuation">`</span><span class="token operator">=</span>d<span class="token punctuation">.</span><span class="token punctuation">`</span>订单ID<span class="token punctuation">`</span><span class="token keyword">left</span> <span class="token keyword">join</span> 产品 p <span class="token keyword">on</span> d<span class="token punctuation">.</span><span class="token punctuation">`</span>产品ID<span class="token punctuation">`</span><span class="token operator">=</span>p<span class="token punctuation">.</span><span class="token punctuation">`</span>产品ID<span class="token punctuation">`</span><span class="token keyword">where</span> o<span class="token punctuation">.</span><span class="token punctuation">`</span>订单ID<span class="token punctuation">`</span><span class="token operator">=</span><span class="token string">'10248'</span> <span class="token operator">or</span> o<span class="token punctuation">.</span><span class="token punctuation">`</span>订单ID<span class="token punctuation">`</span><span class="token operator">=</span><span class="token string">'10254'</span><span class="token punctuation">;</span><span class="token comment">#8</span><span class="token keyword">select</span> o<span class="token punctuation">.</span><span class="token punctuation">`</span>订单ID<span class="token punctuation">`</span><span class="token punctuation">,</span>p<span class="token punctuation">.</span><span class="token punctuation">`</span>产品名称<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token function">round</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span><span class="token punctuation">`</span>单价<span class="token punctuation">`</span><span class="token operator">*</span>d<span class="token punctuation">.</span><span class="token punctuation">`</span>数量<span class="token punctuation">`</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">-</span>d<span class="token punctuation">.</span><span class="token punctuation">`</span>折扣<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token string">'销售金额'</span><span class="token keyword">from</span> 订单 o<span class="token keyword">left</span> <span class="token keyword">join</span> 订单明细 d <span class="token keyword">on</span> o<span class="token punctuation">.</span><span class="token punctuation">`</span>订单ID<span class="token punctuation">`</span><span class="token operator">=</span>d<span class="token punctuation">.</span><span class="token punctuation">`</span>订单ID<span class="token punctuation">`</span><span class="token keyword">left</span> <span class="token keyword">join</span> 产品 p <span class="token keyword">on</span> d<span class="token punctuation">.</span><span class="token punctuation">`</span>产品ID<span class="token punctuation">`</span><span class="token operator">=</span>p<span class="token punctuation">.</span><span class="token punctuation">`</span>产品ID<span class="token punctuation">`</span><span class="token keyword">where</span> o<span class="token punctuation">.</span><span class="token punctuation">`</span>订单ID<span class="token punctuation">`</span><span class="token operator">=</span><span class="token string">'10248'</span> <span class="token operator">or</span> o<span class="token punctuation">.</span><span class="token punctuation">`</span>订单ID<span class="token punctuation">`</span><span class="token operator">=</span><span class="token string">'10254'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-综合查询"><a href="#3-综合查询" class="headerlink" title="3.综合查询"></a>3.综合查询</h2><p>–查询所有运货商的公司名称和电话</p><p> <img src="/img/image-20201202103928512.png"></p><p>–查询所有客户的公司名称、电话、传真、地址、联系人姓名和联系人头衔</p> <img src="/img/image-20201202104301446.png" alt="" style="zoom:67%;"><p>–查询单价介于10至30元的所有产品的产品ID、产品名称和库存量</p> <img src="/img/image-20201202104531488.png" alt="" style="zoom:67%;"><p>–查询单价大于20元的所有产品的产品名称、单价以及供应商的公司名称、电话</p> <img src="/img/image-20201202104957296.png" alt="" style="zoom:50%;"><p>–查询上海和北京的客户在1996年订购的所有订单的订单ID、所订购的产品名称和数量</p> <img src="/img/image-20201202110005483.png" alt="" style="zoom: 67%;"><p>–查询华北客户的每份订单的订单ID、产品名称和销售金额</p> <img src="/img/image-20201202110723614.png" alt="" style="zoom:67%;"><p>–按运货商公司名称，统计1997年由各个运货商承运的订单的总数量</p><p> <img src="/img/image-20201202114136297.png"></p><p>–统计1997年上半年的每份订单上所订购的产品的总数量</p> <img src="/img/image-20201202144646845.png" style="zoom:67%;"><p>–统计各类产品的平均价格</p><p> <img src="/img/image-20201202145300093.png"></p><p>–统计各地区客户的总数量</p><p> <img src="/img/image-20201202145620186.png"></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">#9</span><span class="token keyword">select</span> 公司名称<span class="token punctuation">,</span>电话<span class="token keyword">from</span> 运货商<span class="token punctuation">;</span><span class="token comment">#10</span><span class="token keyword">select</span> 公司名称<span class="token punctuation">,</span>电话<span class="token punctuation">,</span>传真<span class="token punctuation">,</span>联系人姓名<span class="token punctuation">,</span>联系人职务<span class="token keyword">from</span> 客户<span class="token punctuation">;</span><span class="token comment">#11</span><span class="token keyword">select</span> 产品ID<span class="token punctuation">,</span>产品名称<span class="token punctuation">,</span>库存量<span class="token keyword">from</span> 产品<span class="token keyword">where</span> 单价<span class="token operator">&gt;</span><span class="token number">10</span> <span class="token operator">and</span> 单价<span class="token operator">&lt;</span><span class="token number">30</span><span class="token punctuation">;</span><span class="token comment">#12</span><span class="token keyword">select</span> p<span class="token punctuation">.</span>产品名称<span class="token punctuation">,</span>p<span class="token punctuation">.</span>单价<span class="token punctuation">,</span>s<span class="token punctuation">.</span><span class="token punctuation">`</span>公司名称<span class="token punctuation">`</span> <span class="token keyword">as</span> 供应商公司名称<span class="token punctuation">,</span>s<span class="token punctuation">.</span><span class="token punctuation">`</span>电话<span class="token punctuation">`</span> <span class="token keyword">as</span> 供应商电话<span class="token keyword">from</span> 产品 p<span class="token keyword">left</span> <span class="token keyword">join</span> 供应商 s <span class="token keyword">on</span> p<span class="token punctuation">.</span><span class="token punctuation">`</span>供应商ID<span class="token punctuation">`</span><span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token punctuation">`</span>供应商ID<span class="token punctuation">`</span><span class="token keyword">where</span> p<span class="token punctuation">.</span><span class="token punctuation">`</span>单价<span class="token punctuation">`</span><span class="token operator">&gt;</span><span class="token number">20</span><span class="token punctuation">;</span><span class="token comment">#13</span><span class="token keyword">select</span> o<span class="token punctuation">.</span>订单ID<span class="token punctuation">,</span>p<span class="token punctuation">.</span>产品名称<span class="token punctuation">,</span>d<span class="token punctuation">.</span>数量<span class="token keyword">from</span> 订单 o<span class="token keyword">left</span> <span class="token keyword">join</span> 订单明细 d <span class="token keyword">on</span> o<span class="token punctuation">.</span><span class="token punctuation">`</span>订单ID<span class="token punctuation">`</span><span class="token operator">=</span>d<span class="token punctuation">.</span><span class="token punctuation">`</span>订单ID<span class="token punctuation">`</span><span class="token keyword">left</span> <span class="token keyword">join</span> 产品 p <span class="token keyword">on</span> d<span class="token punctuation">.</span><span class="token punctuation">`</span>产品ID<span class="token punctuation">`</span><span class="token operator">=</span>p<span class="token punctuation">.</span><span class="token punctuation">`</span>产品ID<span class="token punctuation">`</span><span class="token keyword">where</span> o<span class="token punctuation">.</span><span class="token punctuation">`</span>货主城市<span class="token punctuation">`</span> <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token string">'北京'</span><span class="token punctuation">,</span><span class="token string">'上海'</span><span class="token punctuation">)</span> <span class="token operator">and</span> <span class="token keyword">year</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span><span class="token punctuation">`</span>订购日期<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">1996</span><span class="token punctuation">;</span><span class="token comment">#14</span><span class="token keyword">select</span> o<span class="token punctuation">.</span><span class="token punctuation">`</span>订单ID<span class="token punctuation">`</span><span class="token punctuation">,</span>p<span class="token punctuation">.</span><span class="token punctuation">`</span>产品名称<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token function">round</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span><span class="token punctuation">`</span>单价<span class="token punctuation">`</span><span class="token operator">*</span>d<span class="token punctuation">.</span><span class="token punctuation">`</span>数量<span class="token punctuation">`</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">-</span>d<span class="token punctuation">.</span><span class="token punctuation">`</span>折扣<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">as</span> 销售金额<span class="token keyword">from</span> 订单 o<span class="token keyword">left</span> <span class="token keyword">join</span> 订单明细 d <span class="token keyword">on</span> o<span class="token punctuation">.</span><span class="token punctuation">`</span>订单ID<span class="token punctuation">`</span><span class="token operator">=</span>d<span class="token punctuation">.</span><span class="token punctuation">`</span>订单ID<span class="token punctuation">`</span><span class="token keyword">left</span> <span class="token keyword">join</span> 产品 p <span class="token keyword">on</span> d<span class="token punctuation">.</span><span class="token punctuation">`</span>产品ID<span class="token punctuation">`</span><span class="token operator">=</span>p<span class="token punctuation">.</span><span class="token punctuation">`</span>产品ID<span class="token punctuation">`</span><span class="token keyword">where</span> o<span class="token punctuation">.</span><span class="token punctuation">`</span>货主地区<span class="token punctuation">`</span><span class="token operator">=</span><span class="token string">'华北'</span><span class="token punctuation">;</span><span class="token comment">#15</span><span class="token keyword">select</span> t<span class="token punctuation">.</span><span class="token punctuation">`</span>公司名称<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">as</span> 总订单数<span class="token keyword">from</span> 订单 o<span class="token keyword">left</span> <span class="token keyword">join</span> 运货商 t <span class="token keyword">on</span> o<span class="token punctuation">.</span><span class="token punctuation">`</span>运货商<span class="token punctuation">`</span><span class="token operator">=</span>t<span class="token punctuation">.</span><span class="token punctuation">`</span>运货商ID<span class="token punctuation">`</span><span class="token keyword">where</span> <span class="token keyword">year</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span><span class="token punctuation">`</span>订购日期<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">1997</span><span class="token keyword">group</span> <span class="token keyword">by</span> t<span class="token punctuation">.</span><span class="token punctuation">`</span>公司名称<span class="token punctuation">`</span><span class="token punctuation">;</span><span class="token comment">#16</span><span class="token keyword">select</span> o<span class="token punctuation">.</span><span class="token punctuation">`</span>订单ID<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token function">sum</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span><span class="token punctuation">`</span>数量<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">as</span> 产品总数量<span class="token keyword">from</span> 订单 o <span class="token keyword">left</span> <span class="token keyword">join</span> 订单明细 d <span class="token keyword">on</span> o<span class="token punctuation">.</span><span class="token punctuation">`</span>订单ID<span class="token punctuation">`</span><span class="token operator">=</span>d<span class="token punctuation">.</span><span class="token punctuation">`</span>订单ID<span class="token punctuation">`</span><span class="token keyword">where</span> <span class="token keyword">year</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span><span class="token punctuation">`</span>订购日期<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">1997</span> <span class="token operator">and</span> <span class="token keyword">month</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span><span class="token punctuation">`</span>订购日期<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token number">7</span><span class="token keyword">group</span> <span class="token keyword">by</span> o<span class="token punctuation">.</span><span class="token punctuation">`</span>订单ID<span class="token punctuation">`</span><span class="token punctuation">;</span><span class="token comment">#17</span><span class="token keyword">select</span> c<span class="token punctuation">.</span><span class="token punctuation">`</span>类别名称<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token function">round</span><span class="token punctuation">(</span><span class="token function">avg</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token punctuation">`</span>单价<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">as</span> 平均价格<span class="token keyword">from</span> 产品 p<span class="token keyword">left</span> <span class="token keyword">join</span> 类别 c <span class="token keyword">on</span> p<span class="token punctuation">.</span><span class="token punctuation">`</span>类别ID<span class="token punctuation">`</span><span class="token operator">=</span>c<span class="token punctuation">.</span><span class="token punctuation">`</span>类别ID<span class="token punctuation">`</span><span class="token keyword">group</span> <span class="token keyword">by</span> c<span class="token punctuation">.</span><span class="token punctuation">`</span>类别名称<span class="token punctuation">`</span><span class="token punctuation">;</span><span class="token comment">#18</span><span class="token keyword">select</span> <span class="token punctuation">`</span>地区<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">as</span> 客户数<span class="token keyword">from</span> 客户<span class="token keyword">group</span> <span class="token keyword">by</span> <span class="token punctuation">`</span>地区<span class="token punctuation">`</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-练习30题"><a href="#4-练习30题" class="headerlink" title="4.练习30题"></a>4.练习30题</h2><ol><li><p>找出供应商名称，所在城市<br><img src="/img/image-20201202150320409.png"></p></li><li><p>找出华北地区能够供应海鲜的所有供应商列表。<br><img src="/img/image-20201202151530631.png"></p></li><li><p>找出订单销售额前五的订单是经由哪家运货商运送的。<br><img src="/img/image-20201202152902996.png"></p></li><li><p>找出按箱包装的产品名称。<br><img src="/img/image-20201202153304687.png"></p></li></ol><ol start="5"><li>找出重庆的供应商能够供应的所有产品列表。<br><img src="/img/image-20201202153809507.png"></li></ol><ol start="6"><li>找出雇员郑建杰所有的订单并根据订单销售额排序。<br><img src="/img/image-20201202154807148.png"></li></ol><ol start="7"><li>找出订单10284的所有产品以及订单金额，运货商。<br><img src="/img/image-20201202155416873.png"></li></ol><ol start="8"><li>建立产品与订单的关联。<br><img src="/img/image-20201202155740237.png"></li></ol><ol start="9"><li>计算销量前10位的订单明细，结果集返回订单ID，订单日期，公司名称，发货日期，销售额，并排序<img src="/img/image-20201202161127489.png" style="zoom:67%;"></li></ol><ol start="10"><li>按年度统计销售额<br><img src="/img/image-20201202161807701.png"></li></ol><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">#1</span><span class="token keyword">select</span> <span class="token punctuation">`</span>公司名称<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>城市<span class="token punctuation">`</span><span class="token keyword">from</span> 供应商<span class="token punctuation">;</span><span class="token comment">#2</span><span class="token keyword">select</span> s<span class="token punctuation">.</span><span class="token punctuation">`</span>公司名称<span class="token punctuation">`</span><span class="token keyword">from</span> 产品 p<span class="token keyword">left</span> <span class="token keyword">join</span> 类别 c <span class="token keyword">on</span> p<span class="token punctuation">.</span><span class="token punctuation">`</span>类别ID<span class="token punctuation">`</span><span class="token operator">=</span>c<span class="token punctuation">.</span><span class="token punctuation">`</span>类别ID<span class="token punctuation">`</span><span class="token keyword">left</span> <span class="token keyword">join</span> 供应商 s <span class="token keyword">on</span> p<span class="token punctuation">.</span><span class="token punctuation">`</span>供应商ID<span class="token punctuation">`</span><span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token punctuation">`</span>供应商ID<span class="token punctuation">`</span><span class="token keyword">where</span> c<span class="token punctuation">.</span><span class="token punctuation">`</span>类别名称<span class="token punctuation">`</span><span class="token operator">=</span><span class="token string">'海鲜'</span><span class="token keyword">group</span> <span class="token keyword">by</span> s<span class="token punctuation">.</span><span class="token punctuation">`</span>供应商ID<span class="token punctuation">`</span><span class="token punctuation">;</span><span class="token comment">#3</span><span class="token keyword">select</span> t<span class="token punctuation">.</span><span class="token punctuation">`</span>公司名称<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token function">round</span><span class="token punctuation">(</span><span class="token function">sum</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span><span class="token punctuation">`</span>单价<span class="token punctuation">`</span><span class="token operator">*</span>d<span class="token punctuation">.</span><span class="token punctuation">`</span>数量<span class="token punctuation">`</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">-</span>d<span class="token punctuation">.</span><span class="token punctuation">`</span>折扣<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">as</span> 销售额<span class="token keyword">from</span> 订单 o<span class="token keyword">left</span> <span class="token keyword">join</span> 订单明细 d <span class="token keyword">on</span> o<span class="token punctuation">.</span><span class="token punctuation">`</span>订单ID<span class="token punctuation">`</span><span class="token operator">=</span>d<span class="token punctuation">.</span><span class="token punctuation">`</span>订单ID<span class="token punctuation">`</span><span class="token keyword">left</span> <span class="token keyword">join</span> 运货商 t <span class="token keyword">on</span> o<span class="token punctuation">.</span><span class="token punctuation">`</span>运货商<span class="token punctuation">`</span><span class="token operator">=</span>t<span class="token punctuation">.</span><span class="token punctuation">`</span>运货商ID<span class="token punctuation">`</span><span class="token keyword">group</span> <span class="token keyword">by</span> o<span class="token punctuation">.</span><span class="token punctuation">`</span>订单ID<span class="token punctuation">`</span><span class="token keyword">order</span> <span class="token keyword">by</span> <span class="token function">sum</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span><span class="token punctuation">`</span>单价<span class="token punctuation">`</span><span class="token operator">*</span>d<span class="token punctuation">.</span><span class="token punctuation">`</span>数量<span class="token punctuation">`</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">-</span>d<span class="token punctuation">.</span><span class="token punctuation">`</span>折扣<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">desc</span><span class="token keyword">limit</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token comment">#4</span><span class="token keyword">select</span> <span class="token punctuation">`</span>产品名称<span class="token punctuation">`</span><span class="token keyword">from</span> 产品<span class="token keyword">where</span> <span class="token punctuation">`</span>单位数量<span class="token punctuation">`</span> <span class="token operator">like</span> <span class="token string">'%箱%'</span><span class="token punctuation">;</span><span class="token comment">#5</span><span class="token keyword">select</span> p<span class="token punctuation">.</span><span class="token punctuation">`</span>产品名称<span class="token punctuation">`</span><span class="token keyword">from</span> 产品 p<span class="token keyword">left</span> <span class="token keyword">join</span> 供应商 s <span class="token keyword">on</span> p<span class="token punctuation">.</span><span class="token punctuation">`</span>供应商ID<span class="token punctuation">`</span><span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token punctuation">`</span>供应商ID<span class="token punctuation">`</span><span class="token keyword">where</span> s<span class="token punctuation">.</span><span class="token punctuation">`</span>城市<span class="token punctuation">`</span><span class="token operator">=</span><span class="token string">'重庆'</span><span class="token punctuation">;</span><span class="token comment">#6</span><span class="token keyword">select</span> o<span class="token punctuation">.</span><span class="token punctuation">`</span>订单ID<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token function">round</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span><span class="token punctuation">`</span>单价<span class="token punctuation">`</span><span class="token operator">*</span>d<span class="token punctuation">.</span><span class="token punctuation">`</span>数量<span class="token punctuation">`</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">-</span>d<span class="token punctuation">.</span><span class="token punctuation">`</span>折扣<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> 销售额<span class="token keyword">from</span> 订单 o<span class="token keyword">left</span> <span class="token keyword">join</span> 雇员 e <span class="token keyword">on</span> o<span class="token punctuation">.</span><span class="token punctuation">`</span>雇员ID<span class="token punctuation">`</span><span class="token operator">=</span>e<span class="token punctuation">.</span><span class="token punctuation">`</span>雇员ID<span class="token punctuation">`</span><span class="token keyword">left</span> <span class="token keyword">join</span> 订单明细 d <span class="token keyword">on</span> o<span class="token punctuation">.</span><span class="token punctuation">`</span>订单ID<span class="token punctuation">`</span><span class="token operator">=</span>d<span class="token punctuation">.</span><span class="token punctuation">`</span>订单ID<span class="token punctuation">`</span><span class="token keyword">where</span> e<span class="token punctuation">.</span><span class="token punctuation">`</span>名字<span class="token punctuation">`</span><span class="token operator">=</span><span class="token string">'建杰'</span> <span class="token operator">and</span> e<span class="token punctuation">.</span><span class="token punctuation">`</span>姓氏<span class="token punctuation">`</span><span class="token operator">=</span><span class="token string">'郑'</span><span class="token keyword">order</span> <span class="token keyword">by</span> d<span class="token punctuation">.</span><span class="token punctuation">`</span>单价<span class="token punctuation">`</span><span class="token operator">*</span>d<span class="token punctuation">.</span><span class="token punctuation">`</span>数量<span class="token punctuation">`</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">-</span>d<span class="token punctuation">.</span><span class="token punctuation">`</span>折扣<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">desc</span><span class="token punctuation">;</span><span class="token comment">#7</span><span class="token keyword">select</span> p<span class="token punctuation">.</span><span class="token punctuation">`</span>产品名称<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token function">round</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span><span class="token punctuation">`</span>单价<span class="token punctuation">`</span><span class="token operator">*</span>d<span class="token punctuation">.</span><span class="token punctuation">`</span>数量<span class="token punctuation">`</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">-</span>d<span class="token punctuation">.</span><span class="token punctuation">`</span>折扣<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> 订单金额<span class="token punctuation">,</span>t<span class="token punctuation">.</span><span class="token punctuation">`</span>公司名称<span class="token punctuation">`</span><span class="token keyword">from</span> 订单 o<span class="token keyword">left</span> <span class="token keyword">join</span> 订单明细 d <span class="token keyword">on</span> o<span class="token punctuation">.</span><span class="token punctuation">`</span>订单ID<span class="token punctuation">`</span><span class="token operator">=</span>d<span class="token punctuation">.</span><span class="token punctuation">`</span>订单ID<span class="token punctuation">`</span><span class="token keyword">left</span> <span class="token keyword">join</span> 产品 p <span class="token keyword">on</span> d<span class="token punctuation">.</span><span class="token punctuation">`</span>产品ID<span class="token punctuation">`</span><span class="token operator">=</span>p<span class="token punctuation">.</span><span class="token punctuation">`</span>产品ID<span class="token punctuation">`</span><span class="token keyword">left</span> <span class="token keyword">join</span> 运货商 t <span class="token keyword">on</span> o<span class="token punctuation">.</span><span class="token punctuation">`</span>运货商<span class="token punctuation">`</span><span class="token operator">=</span>t<span class="token punctuation">.</span><span class="token punctuation">`</span>运货商ID<span class="token punctuation">`</span><span class="token keyword">where</span> o<span class="token punctuation">.</span><span class="token punctuation">`</span>订单ID<span class="token punctuation">`</span><span class="token operator">=</span><span class="token number">10284</span><span class="token punctuation">;</span><span class="token comment">#8</span><span class="token keyword">select</span> <span class="token operator">*</span><span class="token keyword">from</span> 订单 o<span class="token keyword">left</span> <span class="token keyword">join</span> 订单明细 d <span class="token keyword">on</span> o<span class="token punctuation">.</span><span class="token punctuation">`</span>订单ID<span class="token punctuation">`</span><span class="token operator">=</span>d<span class="token punctuation">.</span><span class="token punctuation">`</span>订单ID<span class="token punctuation">`</span><span class="token keyword">left</span> <span class="token keyword">join</span> 产品 p <span class="token keyword">on</span> d<span class="token punctuation">.</span><span class="token punctuation">`</span>产品ID<span class="token punctuation">`</span><span class="token operator">=</span>p<span class="token punctuation">.</span><span class="token punctuation">`</span>产品ID<span class="token punctuation">`</span><span class="token punctuation">;</span><span class="token comment">#9</span><span class="token keyword">select</span> o<span class="token punctuation">.</span><span class="token punctuation">`</span>订单ID<span class="token punctuation">`</span><span class="token punctuation">,</span>o<span class="token punctuation">.</span><span class="token punctuation">`</span>订购日期<span class="token punctuation">`</span><span class="token punctuation">,</span>t<span class="token punctuation">.</span><span class="token punctuation">`</span>公司名称<span class="token punctuation">`</span><span class="token punctuation">,</span>o<span class="token punctuation">.</span><span class="token punctuation">`</span>发货日期<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token function">round</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span><span class="token punctuation">`</span>单价<span class="token punctuation">`</span><span class="token operator">*</span>d<span class="token punctuation">.</span><span class="token punctuation">`</span>数量<span class="token punctuation">`</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">-</span>d<span class="token punctuation">.</span><span class="token punctuation">`</span>折扣<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> 销售额<span class="token keyword">from</span> 订单 o<span class="token keyword">left</span> <span class="token keyword">join</span> 订单明细 d <span class="token keyword">on</span> o<span class="token punctuation">.</span><span class="token punctuation">`</span>订单ID<span class="token punctuation">`</span><span class="token operator">=</span>d<span class="token punctuation">.</span><span class="token punctuation">`</span>订单ID<span class="token punctuation">`</span><span class="token keyword">left</span> <span class="token keyword">join</span> 运货商 t <span class="token keyword">on</span> o<span class="token punctuation">.</span><span class="token punctuation">`</span>运货商<span class="token punctuation">`</span><span class="token operator">=</span>t<span class="token punctuation">.</span><span class="token punctuation">`</span>运货商ID<span class="token punctuation">`</span><span class="token keyword">group</span> <span class="token keyword">by</span> o<span class="token punctuation">.</span><span class="token punctuation">`</span>订单ID<span class="token punctuation">`</span><span class="token keyword">order</span> <span class="token keyword">by</span> <span class="token function">sum</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span><span class="token punctuation">`</span>数量<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">desc</span><span class="token keyword">limit</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token comment">#10</span><span class="token keyword">select</span> <span class="token keyword">year</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span><span class="token punctuation">`</span>订购日期<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">as</span> 年份<span class="token punctuation">,</span><span class="token function">round</span><span class="token punctuation">(</span><span class="token function">sum</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span><span class="token punctuation">`</span>单价<span class="token punctuation">`</span><span class="token operator">*</span>d<span class="token punctuation">.</span><span class="token punctuation">`</span>数量<span class="token punctuation">`</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">-</span>d<span class="token punctuation">.</span><span class="token punctuation">`</span>折扣<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">as</span> 销售额<span class="token keyword">from</span> 订单 o<span class="token keyword">left</span> <span class="token keyword">join</span> 订单明细 d <span class="token keyword">on</span> o<span class="token punctuation">.</span><span class="token punctuation">`</span>订单ID<span class="token punctuation">`</span><span class="token operator">=</span>d<span class="token punctuation">.</span><span class="token punctuation">`</span>订单ID<span class="token punctuation">`</span><span class="token keyword">group</span> <span class="token keyword">by</span> <span class="token keyword">year</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span><span class="token punctuation">`</span>订购日期<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>11.查询供应商中能够供应的产品样数最多的供应商。<br> <img src="/img/image-20201202163652917.png"></p><p>12.查询产品类别中包含的产品数量最多的类别。<br> <img src="/img/image-20201202164619416.png"></p><p>13.找出所有的订单中经由哪家运货商运货次数最多。<br> <img src="/img/image-20201202165744300.png"></p><p>14.按类别，产品分组，统计销售额。<br> <img src="/img/image-20201202203524663.png"></p><p>15.查询海鲜类别最大的一笔订单。<br> <img src="/img/image-20201202172555454.png"></p><p>16.<strong>按季度统计销售量</strong><img src="/img/image-20201203084009488.png"></p><p>17.查出订单总额超出5000的所有订单，客户名称，客户所在地区。<img src="/img/image-20201202230711289.png"></p><p>18.查询哪些产品的年度销售额低于2000<img src="/img/image-20201202231252894.png"></p><p>19.查询所有订单ID开头为102的订单<img src="/img/image-20201202232702056.png"></p><p>20.查询所有“中硕贸易”，“学仁贸易”，“正人资源”，“中通”客户的订单，（要求使用in函数）<img src="/img/image-20201202234724081.png"></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">#11</span><span class="token keyword">select</span> s<span class="token punctuation">.</span><span class="token punctuation">`</span>公司名称<span class="token punctuation">`</span><span class="token keyword">from</span> 产品 p<span class="token keyword">left</span> <span class="token keyword">join</span> 供应商 s <span class="token keyword">on</span> p<span class="token punctuation">.</span><span class="token punctuation">`</span>供应商ID<span class="token punctuation">`</span><span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token punctuation">`</span>供应商ID<span class="token punctuation">`</span><span class="token keyword">group</span> <span class="token keyword">by</span> s<span class="token punctuation">.</span><span class="token punctuation">`</span>供应商ID<span class="token punctuation">`</span><span class="token keyword">order</span> <span class="token keyword">by</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">desc</span><span class="token keyword">limit</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">#12</span><span class="token keyword">select</span> c<span class="token punctuation">.</span><span class="token punctuation">`</span>类别名称<span class="token punctuation">`</span><span class="token keyword">from</span> 产品 p<span class="token keyword">left</span> <span class="token keyword">join</span> 类别 c <span class="token keyword">on</span> p<span class="token punctuation">.</span><span class="token punctuation">`</span>类别ID<span class="token punctuation">`</span><span class="token operator">=</span>c<span class="token punctuation">.</span><span class="token punctuation">`</span>类别ID<span class="token punctuation">`</span><span class="token keyword">group</span> <span class="token keyword">by</span> c<span class="token punctuation">.</span><span class="token punctuation">`</span>类别ID<span class="token punctuation">`</span><span class="token keyword">order</span> <span class="token keyword">by</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">desc</span><span class="token keyword">limit</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">#13</span><span class="token keyword">select</span> t<span class="token punctuation">.</span><span class="token punctuation">`</span>公司名称<span class="token punctuation">`</span><span class="token keyword">from</span> 订单 o<span class="token keyword">left</span> <span class="token keyword">join</span> 运货商 t <span class="token keyword">on</span> o<span class="token punctuation">.</span><span class="token punctuation">`</span>运货商<span class="token punctuation">`</span><span class="token operator">=</span>t<span class="token punctuation">.</span><span class="token punctuation">`</span>运货商ID<span class="token punctuation">`</span><span class="token keyword">group</span> <span class="token keyword">by</span> t<span class="token punctuation">.</span><span class="token punctuation">`</span>运货商ID<span class="token punctuation">`</span><span class="token keyword">order</span> <span class="token keyword">by</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">desc</span><span class="token keyword">limit</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">#14</span><span class="token keyword">select</span> c<span class="token punctuation">.</span><span class="token punctuation">`</span>类别名称<span class="token punctuation">`</span><span class="token punctuation">,</span>p<span class="token punctuation">.</span><span class="token punctuation">`</span>产品名称<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token function">round</span><span class="token punctuation">(</span><span class="token function">sum</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span><span class="token punctuation">`</span>单价<span class="token punctuation">`</span><span class="token operator">*</span>d<span class="token punctuation">.</span><span class="token punctuation">`</span>数量<span class="token punctuation">`</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">-</span>d<span class="token punctuation">.</span><span class="token punctuation">`</span>折扣<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">as</span> 销售额<span class="token keyword">from</span> 订单 o<span class="token keyword">left</span> <span class="token keyword">join</span> 订单明细 d <span class="token keyword">on</span> o<span class="token punctuation">.</span><span class="token punctuation">`</span>订单ID<span class="token punctuation">`</span><span class="token operator">=</span>d<span class="token punctuation">.</span><span class="token punctuation">`</span>订单ID<span class="token punctuation">`</span><span class="token keyword">left</span> <span class="token keyword">join</span> 产品 p <span class="token keyword">on</span> d<span class="token punctuation">.</span><span class="token punctuation">`</span>产品ID<span class="token punctuation">`</span><span class="token operator">=</span>p<span class="token punctuation">.</span><span class="token punctuation">`</span>产品ID<span class="token punctuation">`</span><span class="token keyword">left</span> <span class="token keyword">join</span> 类别 c <span class="token keyword">on</span> p<span class="token punctuation">.</span><span class="token punctuation">`</span>类别ID<span class="token punctuation">`</span><span class="token operator">=</span>c<span class="token punctuation">.</span><span class="token punctuation">`</span>类别ID<span class="token punctuation">`</span><span class="token keyword">group</span> <span class="token keyword">by</span> c<span class="token punctuation">.</span><span class="token punctuation">`</span>类别ID<span class="token punctuation">`</span><span class="token punctuation">,</span>p<span class="token punctuation">.</span><span class="token punctuation">`</span>产品ID<span class="token punctuation">`</span><span class="token punctuation">;</span><span class="token comment">#15</span><span class="token keyword">select</span> <span class="token operator">*</span><span class="token keyword">from</span> 订单 o<span class="token keyword">left</span> <span class="token keyword">join</span> 订单明细 d <span class="token keyword">on</span> o<span class="token punctuation">.</span><span class="token punctuation">`</span>订单ID<span class="token punctuation">`</span><span class="token operator">=</span>d<span class="token punctuation">.</span><span class="token punctuation">`</span>订单ID<span class="token punctuation">`</span><span class="token keyword">left</span> <span class="token keyword">join</span> 产品 p <span class="token keyword">on</span> d<span class="token punctuation">.</span><span class="token punctuation">`</span>产品ID<span class="token punctuation">`</span><span class="token operator">=</span>p<span class="token punctuation">.</span><span class="token punctuation">`</span>产品ID<span class="token punctuation">`</span><span class="token keyword">left</span> <span class="token keyword">join</span> 类别 c <span class="token keyword">on</span> p<span class="token punctuation">.</span><span class="token punctuation">`</span>类别ID<span class="token punctuation">`</span><span class="token operator">=</span>c<span class="token punctuation">.</span><span class="token punctuation">`</span>类别ID<span class="token punctuation">`</span><span class="token keyword">group</span> <span class="token keyword">by</span> c<span class="token punctuation">.</span><span class="token punctuation">`</span>类别ID<span class="token punctuation">`</span><span class="token keyword">having</span> c<span class="token punctuation">.</span><span class="token punctuation">`</span>类别名称<span class="token punctuation">`</span><span class="token operator">=</span><span class="token string">'海鲜'</span><span class="token keyword">order</span> <span class="token keyword">by</span> <span class="token function">sum</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span><span class="token punctuation">`</span>单价<span class="token punctuation">`</span><span class="token operator">*</span>d<span class="token punctuation">.</span><span class="token punctuation">`</span>数量<span class="token punctuation">`</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">-</span>d<span class="token punctuation">.</span><span class="token punctuation">`</span>折扣<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">#16</span><span class="token keyword">select</span> <span class="token keyword">year</span><span class="token punctuation">(</span>订购日期<span class="token punctuation">)</span> 年<span class="token punctuation">,</span><span class="token function">round</span><span class="token punctuation">(</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">case</span> <span class="token keyword">when</span>  <span class="token keyword">month</span><span class="token punctuation">(</span>订购日期<span class="token punctuation">)</span> <span class="token operator">between</span> <span class="token number">1</span> <span class="token operator">and</span> <span class="token number">3</span> <span class="token keyword">then</span> d<span class="token punctuation">.</span>单价<span class="token operator">*</span>数量<span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">-</span>折扣<span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token number">0</span> <span class="token keyword">end</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> 一季度<span class="token punctuation">,</span><span class="token function">round</span><span class="token punctuation">(</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">case</span> <span class="token keyword">when</span>  <span class="token keyword">month</span><span class="token punctuation">(</span>订购日期<span class="token punctuation">)</span> <span class="token operator">between</span> <span class="token number">4</span> <span class="token operator">and</span> <span class="token number">6</span> <span class="token keyword">then</span> d<span class="token punctuation">.</span>单价<span class="token operator">*</span>数量<span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">-</span>折扣<span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token number">0</span> <span class="token keyword">end</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> 二季度<span class="token punctuation">,</span><span class="token function">round</span><span class="token punctuation">(</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">case</span> <span class="token keyword">when</span>  <span class="token keyword">month</span><span class="token punctuation">(</span>订购日期<span class="token punctuation">)</span> <span class="token operator">between</span> <span class="token number">7</span> <span class="token operator">and</span> <span class="token number">9</span> <span class="token keyword">then</span> d<span class="token punctuation">.</span>单价<span class="token operator">*</span>数量<span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">-</span>折扣<span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token number">0</span> <span class="token keyword">end</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> 三季度<span class="token punctuation">,</span><span class="token function">round</span><span class="token punctuation">(</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">case</span> <span class="token keyword">when</span>  <span class="token keyword">month</span><span class="token punctuation">(</span>订购日期<span class="token punctuation">)</span> <span class="token operator">between</span> <span class="token number">10</span> <span class="token operator">and</span> <span class="token number">12</span> <span class="token keyword">then</span> d<span class="token punctuation">.</span>单价<span class="token operator">*</span>数量<span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">-</span>折扣<span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token number">0</span> <span class="token keyword">end</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> 四季度<span class="token keyword">from</span> 订单 o <span class="token keyword">join</span> 订单明细 d <span class="token keyword">on</span> o<span class="token punctuation">.</span>订单ID<span class="token operator">=</span>d<span class="token punctuation">.</span>订单ID<span class="token keyword">group</span> <span class="token keyword">by</span> 年<span class="token punctuation">;</span><span class="token comment">#17</span><span class="token keyword">select</span> o<span class="token punctuation">.</span><span class="token punctuation">`</span>订单ID<span class="token punctuation">`</span><span class="token punctuation">,</span>c<span class="token punctuation">.</span><span class="token punctuation">`</span>联系人姓名<span class="token punctuation">`</span><span class="token punctuation">,</span>c<span class="token punctuation">.</span><span class="token punctuation">`</span>地区<span class="token punctuation">`</span><span class="token keyword">from</span> 订单 o<span class="token keyword">left</span> <span class="token keyword">join</span> 订单明细 d <span class="token keyword">on</span> o<span class="token punctuation">.</span><span class="token punctuation">`</span>订单ID<span class="token punctuation">`</span><span class="token operator">=</span>d<span class="token punctuation">.</span><span class="token punctuation">`</span>订单ID<span class="token punctuation">`</span><span class="token keyword">left</span> <span class="token keyword">join</span> 客户 c <span class="token keyword">on</span> o<span class="token punctuation">.</span><span class="token punctuation">`</span>客户ID<span class="token punctuation">`</span><span class="token operator">=</span>c<span class="token punctuation">.</span><span class="token punctuation">`</span>客户ID<span class="token punctuation">`</span><span class="token keyword">group</span> <span class="token keyword">by</span> o<span class="token punctuation">.</span><span class="token punctuation">`</span>订单ID<span class="token punctuation">`</span><span class="token keyword">having</span> <span class="token function">sum</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span><span class="token punctuation">`</span>单价<span class="token punctuation">`</span><span class="token operator">*</span>d<span class="token punctuation">.</span><span class="token punctuation">`</span>数量<span class="token punctuation">`</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">-</span>d<span class="token punctuation">.</span><span class="token punctuation">`</span>折扣<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token number">5000</span><span class="token punctuation">;</span><span class="token comment">#18</span><span class="token keyword">select</span> p<span class="token punctuation">.</span><span class="token punctuation">`</span>产品名称<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token function">round</span><span class="token punctuation">(</span><span class="token function">sum</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span><span class="token punctuation">`</span>单价<span class="token punctuation">`</span><span class="token operator">*</span>d<span class="token punctuation">.</span><span class="token punctuation">`</span>数量<span class="token punctuation">`</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">-</span>d<span class="token punctuation">.</span><span class="token punctuation">`</span>折扣<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">as</span> 销售额<span class="token keyword">from</span> 订单 o<span class="token keyword">left</span> <span class="token keyword">join</span> 订单明细 d <span class="token keyword">on</span> o<span class="token punctuation">.</span><span class="token punctuation">`</span>订单ID<span class="token punctuation">`</span><span class="token operator">=</span>d<span class="token punctuation">.</span><span class="token punctuation">`</span>订单ID<span class="token punctuation">`</span><span class="token keyword">left</span> <span class="token keyword">join</span> 产品 p <span class="token keyword">on</span> d<span class="token punctuation">.</span><span class="token punctuation">`</span>产品ID<span class="token punctuation">`</span><span class="token operator">=</span>p<span class="token punctuation">.</span><span class="token punctuation">`</span>产品ID<span class="token punctuation">`</span><span class="token keyword">group</span> <span class="token keyword">by</span> d<span class="token punctuation">.</span><span class="token punctuation">`</span>产品ID<span class="token punctuation">`</span><span class="token keyword">having</span> <span class="token function">sum</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span><span class="token punctuation">`</span>单价<span class="token punctuation">`</span><span class="token operator">*</span>d<span class="token punctuation">.</span><span class="token punctuation">`</span>数量<span class="token punctuation">`</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">-</span>d<span class="token punctuation">.</span><span class="token punctuation">`</span>折扣<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token number">2000</span><span class="token punctuation">;</span><span class="token comment">#19</span><span class="token keyword">select</span> <span class="token operator">*</span><span class="token keyword">from</span> 订单<span class="token keyword">where</span> <span class="token punctuation">`</span>订单ID<span class="token punctuation">`</span> <span class="token operator">like</span> <span class="token string">'102%'</span><span class="token punctuation">;</span><span class="token comment">#20</span><span class="token keyword">select</span> <span class="token operator">*</span><span class="token keyword">from</span> 订单 o<span class="token keyword">left</span> <span class="token keyword">join</span> 客户 c <span class="token keyword">on</span> o<span class="token punctuation">.</span><span class="token punctuation">`</span>客户ID<span class="token punctuation">`</span><span class="token operator">=</span>c<span class="token punctuation">.</span><span class="token punctuation">`</span>客户ID<span class="token punctuation">`</span><span class="token keyword">where</span> c<span class="token punctuation">.</span><span class="token punctuation">`</span>公司名称<span class="token punctuation">`</span> <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token string">'中硕贸易'</span><span class="token punctuation">,</span><span class="token string">'学仁贸易'</span><span class="token punctuation">,</span><span class="token string">'正人资源'</span><span class="token punctuation">,</span><span class="token string">'中通'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>21.查询所有订单中月份不是单数的订单。<img src="/img/image-20201203081426282.png"></p><p>22.<strong>分别各写一个查询，得到订单中折扣为15%，20%的所有订单，并将两个查询再组成一个。</strong><img src="/img/image-20201203084348790.png"></p><p>23.找出在入职时已超过30岁的所有员工信息<img src="/img/image-20201203084620189.png"></p><p>24.找出所有单价大于30的产品(附加要求，产品类别，供应商作为参数，当产品类别和供应商都为空的时候，nofilter)<img src="/img/image-20201203085600912.png"></p><p>25.查询所有库存产品的总额，并按照总额排序<img src="/img/image-20201203085921577.png"></p><p>26.<strong>检索出职务为销售代表的所有订单中，每笔订单总额低于2000的订单明细，以及相关供应商名称。</strong><img src="/img/image-20201203092542779.png"></p><p>27.检索出向艾德高科技提供产品的供应商所在的城市</p><p> <img src="/img/image-20201203093732504.png"></p><p>28.计算每一笔订单的发货期（从订购到发货），运货期（从发货到到货）的时常，并按照发货期从长到短的顺序进行排序。<img src="/img/image-20201203100239023.png" alt="数据造假"><img src="/img/image-20201203100341454.png"></p><p>29.将产品表和运货商两个无关的表整合为一个表<img src="/img/image-20201203101453373.png"></p><p>30.获取在北京工作并向福星制衣厂股份有限公司发送过订单的职工名称。</p><p><img src="/img/image-20201203101918390.png"></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">#21</span><span class="token keyword">select</span> <span class="token operator">*</span><span class="token keyword">from</span> 订单<span class="token keyword">where</span> <span class="token keyword">month</span><span class="token punctuation">(</span><span class="token punctuation">`</span>订购日期<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">2</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">#22</span><span class="token keyword">select</span> o<span class="token punctuation">.</span><span class="token punctuation">`</span>订单ID<span class="token punctuation">`</span><span class="token punctuation">,</span>d<span class="token punctuation">.</span><span class="token punctuation">`</span>折扣<span class="token punctuation">`</span> <span class="token keyword">from</span> 订单 o <span class="token keyword">left</span> <span class="token keyword">join</span> 订单明细 d <span class="token keyword">on</span> o<span class="token punctuation">.</span><span class="token punctuation">`</span>订单ID<span class="token punctuation">`</span><span class="token operator">=</span>d<span class="token punctuation">.</span><span class="token punctuation">`</span>订单ID<span class="token punctuation">`</span> <span class="token keyword">where</span> d<span class="token punctuation">.</span><span class="token punctuation">`</span>折扣<span class="token punctuation">`</span> <span class="token operator">like</span> <span class="token number">0.15</span><span class="token keyword">union</span><span class="token keyword">select</span> o<span class="token punctuation">.</span><span class="token punctuation">`</span>订单ID<span class="token punctuation">`</span><span class="token punctuation">,</span>d<span class="token punctuation">.</span><span class="token punctuation">`</span>折扣<span class="token punctuation">`</span> <span class="token keyword">from</span> 订单 o <span class="token keyword">left</span> <span class="token keyword">join</span> 订单明细 d <span class="token keyword">on</span> o<span class="token punctuation">.</span><span class="token punctuation">`</span>订单ID<span class="token punctuation">`</span><span class="token operator">=</span>d<span class="token punctuation">.</span><span class="token punctuation">`</span>订单ID<span class="token punctuation">`</span> <span class="token keyword">where</span> d<span class="token punctuation">.</span><span class="token punctuation">`</span>折扣<span class="token punctuation">`</span> <span class="token operator">like</span> <span class="token number">0.2</span><span class="token punctuation">;</span><span class="token comment">#23</span><span class="token keyword">select</span> <span class="token operator">*</span><span class="token keyword">from</span> 雇员<span class="token keyword">where</span> <span class="token keyword">year</span><span class="token punctuation">(</span><span class="token punctuation">`</span>雇用日期<span class="token punctuation">`</span><span class="token operator">-</span><span class="token punctuation">`</span>出生日期<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token number">30</span><span class="token punctuation">;</span><span class="token comment">#24</span><span class="token keyword">select</span> <span class="token operator">*</span><span class="token keyword">from</span> 产品 p<span class="token keyword">left</span> <span class="token keyword">join</span> 类别 c <span class="token keyword">on</span> p<span class="token punctuation">.</span><span class="token punctuation">`</span>类别ID<span class="token punctuation">`</span><span class="token operator">=</span>c<span class="token punctuation">.</span><span class="token punctuation">`</span>类别ID<span class="token punctuation">`</span><span class="token keyword">left</span> <span class="token keyword">join</span> 供应商 s <span class="token keyword">on</span> p<span class="token punctuation">.</span><span class="token punctuation">`</span>供应商ID<span class="token punctuation">`</span><span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token punctuation">`</span>供应商ID<span class="token punctuation">`</span><span class="token keyword">where</span> c<span class="token punctuation">.</span><span class="token punctuation">`</span>类别ID<span class="token punctuation">`</span> <span class="token operator">is</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token operator">or</span> s<span class="token punctuation">.</span><span class="token punctuation">`</span>供应商ID<span class="token punctuation">`</span> <span class="token operator">is</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">;</span><span class="token comment">#25</span><span class="token keyword">select</span> <span class="token punctuation">`</span>产品名称<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token function">round</span><span class="token punctuation">(</span><span class="token punctuation">`</span>单价<span class="token punctuation">`</span><span class="token operator">*</span><span class="token punctuation">`</span>库存量<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">as</span> 总额<span class="token keyword">from</span> 产品<span class="token keyword">order</span> <span class="token keyword">by</span> <span class="token punctuation">`</span>单价<span class="token punctuation">`</span><span class="token operator">*</span><span class="token punctuation">`</span>库存量<span class="token punctuation">`</span> <span class="token keyword">desc</span><span class="token punctuation">;</span><span class="token comment">#26</span><span class="token keyword">select</span> d<span class="token punctuation">.</span><span class="token punctuation">`</span>订单ID<span class="token punctuation">`</span><span class="token punctuation">,</span>group_concat<span class="token punctuation">(</span>d<span class="token punctuation">.</span><span class="token punctuation">`</span>产品ID<span class="token punctuation">`</span><span class="token punctuation">)</span> 产品<span class="token punctuation">,</span>group_concat<span class="token punctuation">(</span>d<span class="token punctuation">.</span><span class="token punctuation">`</span>单价<span class="token punctuation">`</span><span class="token punctuation">)</span> 单价<span class="token punctuation">,</span>group_concat<span class="token punctuation">(</span>d<span class="token punctuation">.</span><span class="token punctuation">`</span>数量<span class="token punctuation">`</span><span class="token punctuation">)</span> 数量<span class="token punctuation">,</span>group_concat<span class="token punctuation">(</span>d<span class="token punctuation">.</span><span class="token punctuation">`</span>折扣<span class="token punctuation">`</span><span class="token punctuation">)</span> 折扣<span class="token punctuation">,</span>group_concat<span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token punctuation">`</span>公司名称<span class="token punctuation">`</span><span class="token punctuation">)</span> 公司<span class="token keyword">from</span> 订单 o<span class="token keyword">left</span> <span class="token keyword">join</span> <span class="token punctuation">`</span>订单明细<span class="token punctuation">`</span> d <span class="token keyword">on</span> o<span class="token punctuation">.</span><span class="token punctuation">`</span>订单ID<span class="token punctuation">`</span><span class="token operator">=</span>d<span class="token punctuation">.</span><span class="token punctuation">`</span>订单ID<span class="token punctuation">`</span><span class="token keyword">left</span> <span class="token keyword">join</span> <span class="token punctuation">`</span>客户<span class="token punctuation">`</span> c <span class="token keyword">on</span> o<span class="token punctuation">.</span><span class="token punctuation">`</span>客户ID<span class="token punctuation">`</span><span class="token operator">=</span>c<span class="token punctuation">.</span><span class="token punctuation">`</span>客户ID<span class="token punctuation">`</span><span class="token keyword">left</span> <span class="token keyword">join</span> <span class="token punctuation">`</span>产品<span class="token punctuation">`</span> p <span class="token keyword">on</span> d<span class="token punctuation">.</span><span class="token punctuation">`</span>产品ID<span class="token punctuation">`</span><span class="token operator">=</span>p<span class="token punctuation">.</span><span class="token punctuation">`</span>产品ID<span class="token punctuation">`</span><span class="token keyword">left</span> <span class="token keyword">join</span> <span class="token punctuation">`</span>供应商<span class="token punctuation">`</span> s <span class="token keyword">on</span> p<span class="token punctuation">.</span><span class="token punctuation">`</span>供应商ID<span class="token punctuation">`</span><span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token punctuation">`</span>供应商ID<span class="token punctuation">`</span><span class="token keyword">where</span> c<span class="token punctuation">.</span><span class="token punctuation">`</span>联系人职务<span class="token punctuation">`</span><span class="token operator">=</span><span class="token string">'销售代表'</span><span class="token keyword">group</span> <span class="token keyword">by</span> o<span class="token punctuation">.</span><span class="token punctuation">`</span>订单ID<span class="token punctuation">`</span><span class="token keyword">having</span> <span class="token function">sum</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span><span class="token punctuation">`</span>单价<span class="token punctuation">`</span><span class="token operator">*</span>d<span class="token punctuation">.</span><span class="token punctuation">`</span>数量<span class="token punctuation">`</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">-</span>d<span class="token punctuation">.</span><span class="token punctuation">`</span>折扣<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token number">2000</span><span class="token punctuation">;</span><span class="token comment">#27</span><span class="token keyword">select</span> <span class="token keyword">distinct</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token punctuation">`</span>公司名称<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">,</span>s<span class="token punctuation">.</span><span class="token punctuation">`</span>城市<span class="token punctuation">`</span><span class="token keyword">from</span> 订单 o<span class="token keyword">left</span> <span class="token keyword">join</span> 客户 c <span class="token keyword">on</span> o<span class="token punctuation">.</span><span class="token punctuation">`</span>客户ID<span class="token punctuation">`</span><span class="token operator">=</span>c<span class="token punctuation">.</span><span class="token punctuation">`</span>客户ID<span class="token punctuation">`</span><span class="token keyword">left</span> <span class="token keyword">join</span> 订单明细 d <span class="token keyword">on</span> o<span class="token punctuation">.</span><span class="token punctuation">`</span>订单ID<span class="token punctuation">`</span><span class="token operator">=</span>d<span class="token punctuation">.</span><span class="token punctuation">`</span>订单ID<span class="token punctuation">`</span><span class="token keyword">left</span> <span class="token keyword">join</span> 产品 p <span class="token keyword">on</span> d<span class="token punctuation">.</span><span class="token punctuation">`</span>产品ID<span class="token punctuation">`</span><span class="token operator">=</span>p<span class="token punctuation">.</span><span class="token punctuation">`</span>产品ID<span class="token punctuation">`</span><span class="token keyword">left</span> <span class="token keyword">join</span> 供应商 s <span class="token keyword">on</span> p<span class="token punctuation">.</span><span class="token punctuation">`</span>供应商ID<span class="token punctuation">`</span><span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token punctuation">`</span>供应商ID<span class="token punctuation">`</span><span class="token keyword">where</span> c<span class="token punctuation">.</span><span class="token punctuation">`</span>公司名称<span class="token punctuation">`</span><span class="token operator">=</span><span class="token string">'艾德高科技'</span><span class="token punctuation">;</span><span class="token comment">#28</span><span class="token keyword">select</span> <span class="token punctuation">`</span>订单ID<span class="token punctuation">`</span><span class="token punctuation">,</span>datediff<span class="token punctuation">(</span><span class="token punctuation">`</span>发货日期<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>订购日期<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">as</span> 发货期<span class="token punctuation">,</span>datediff<span class="token punctuation">(</span><span class="token punctuation">`</span>到货日期<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>发货日期<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">as</span> 运货期<span class="token keyword">from</span> 订单<span class="token keyword">where</span> <span class="token punctuation">`</span>订购日期<span class="token punctuation">`</span> <span class="token operator">is</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token operator">and</span> <span class="token punctuation">`</span>发货日期<span class="token punctuation">`</span> <span class="token operator">is</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token operator">and</span> <span class="token punctuation">`</span>到货日期<span class="token punctuation">`</span> <span class="token operator">is</span> <span class="token operator">not</span>  <span class="token boolean">null</span><span class="token keyword">order</span> <span class="token keyword">by</span> 发货期 <span class="token keyword">desc</span><span class="token punctuation">;</span><span class="token comment">#29</span><span class="token keyword">select</span> p<span class="token punctuation">.</span><span class="token operator">*</span><span class="token punctuation">,</span>group_concat<span class="token punctuation">(</span><span class="token keyword">distinct</span> t<span class="token punctuation">.</span><span class="token punctuation">`</span>公司名称<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">as</span> 可运公司<span class="token keyword">from</span> 订单 o<span class="token keyword">left</span> <span class="token keyword">join</span> <span class="token punctuation">`</span>订单明细<span class="token punctuation">`</span> d <span class="token keyword">on</span> o<span class="token punctuation">.</span><span class="token punctuation">`</span>订单ID<span class="token punctuation">`</span><span class="token operator">=</span>d<span class="token punctuation">.</span><span class="token punctuation">`</span>订单ID<span class="token punctuation">`</span><span class="token keyword">left</span> <span class="token keyword">join</span> <span class="token punctuation">`</span>产品<span class="token punctuation">`</span> p <span class="token keyword">on</span> d<span class="token punctuation">.</span><span class="token punctuation">`</span>产品ID<span class="token punctuation">`</span><span class="token operator">=</span>p<span class="token punctuation">.</span><span class="token punctuation">`</span>产品ID<span class="token punctuation">`</span><span class="token keyword">left</span> <span class="token keyword">join</span> <span class="token punctuation">`</span>运货商<span class="token punctuation">`</span> t <span class="token keyword">on</span> o<span class="token punctuation">.</span><span class="token punctuation">`</span>运货商<span class="token punctuation">`</span><span class="token operator">=</span>t<span class="token punctuation">.</span><span class="token punctuation">`</span>运货商ID<span class="token punctuation">`</span><span class="token keyword">group</span> <span class="token keyword">by</span> p<span class="token punctuation">.</span><span class="token punctuation">`</span>产品ID<span class="token punctuation">`</span><span class="token punctuation">;</span><span class="token comment">#30</span><span class="token keyword">select</span> <span class="token keyword">distinct</span> concat<span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token punctuation">`</span>姓氏<span class="token punctuation">`</span><span class="token punctuation">,</span>e<span class="token punctuation">.</span><span class="token punctuation">`</span>名字<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">as</span> 名单<span class="token keyword">from</span> 雇员 e<span class="token keyword">left</span> <span class="token keyword">join</span> 订单 o <span class="token keyword">on</span> e<span class="token punctuation">.</span><span class="token punctuation">`</span>雇员ID<span class="token punctuation">`</span><span class="token operator">=</span>o<span class="token punctuation">.</span><span class="token punctuation">`</span>雇员ID<span class="token punctuation">`</span><span class="token keyword">left</span> <span class="token keyword">join</span> 客户 c <span class="token keyword">on</span> o<span class="token punctuation">.</span><span class="token punctuation">`</span>客户ID<span class="token punctuation">`</span><span class="token operator">=</span>c<span class="token punctuation">.</span><span class="token punctuation">`</span>客户ID<span class="token punctuation">`</span><span class="token keyword">where</span> e<span class="token punctuation">.</span><span class="token punctuation">`</span>城市<span class="token punctuation">`</span><span class="token operator">=</span><span class="token string">'北京'</span> <span class="token operator">and</span> c<span class="token punctuation">.</span><span class="token punctuation">`</span>公司名称<span class="token punctuation">`</span><span class="token operator">=</span><span class="token string">'福星制衣厂股份有限公司'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在分类中手动添加思维导图</title>
      <link href="posts/6bace565/"/>
      <url>posts/6bace565/</url>
      
        <content type="html"><![CDATA[<h1 id="在分类中手动添加思维导图"><a href="#在分类中手动添加思维导图" class="headerlink" title="在分类中手动添加思维导图"></a>在分类中手动添加思维导图</h1><p><strong><font color="red" size="5">本文最后面有重要更新</font></strong></p><blockquote><p>不会js也不会ejs的我竟然摸索着弄出来了哈哈哈</p></blockquote><h2 id="1-添加一个widget"><a href="#1-添加一个widget" class="headerlink" title="1.添加一个widget"></a>1.添加一个widget</h2><p>找到文件categories.ejs：</p><pre class="line-numbers language-none"><code class="language-none">hexo\themes\hexo-theme-matery-master\layout\categories.ejs<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>添加代码：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">-</span> <span class="token function">partial</span><span class="token punctuation">(</span><span class="token string">'_widget/category-mind'</span><span class="token punctuation">)</span> <span class="token operator">%</span><span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这个加的位置就是想放置的位置，比如我加在list下面了。</p><h2 id="2-创建category-mind-ejs文件"><a href="#2-创建category-mind-ejs文件" class="headerlink" title="2.创建category-mind.ejs文件"></a>2.创建category-mind.ejs文件</h2><p>在目录：</p><pre class="line-numbers language-none"><code class="language-none">hexo\themes\hexo-theme-matery-master\layout\_widget\<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>添加代码如下：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"container"</span> data<span class="token operator">-</span>aos<span class="token operator">=</span><span class="token string">"fade-up"</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"card  card-categories-list-spcail"</span><span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"categories-title center-align"</span><span class="token operator">&gt;</span>                <span class="token operator">&lt;</span>i <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"fas fa-bookmark"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>i<span class="token operator">&gt;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> 分类导图        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"card-content col s12  m12"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>div  id<span class="token operator">=</span><span class="token string">"mind"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"container "</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token string">"/img/category.jpg"</span> style<span class="token operator">=</span><span class="token string">"zoom: 60%;"</span><span class="token operator">/</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>   <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>img标签就是导图的截图了hhh，所以说是手动添加导图</p><p>有点low不过不影响观看~</p><h2 id="3-调整大小"><a href="#3-调整大小" class="headerlink" title="3.调整大小"></a>3.调整大小</h2><p>在img标签添加属性style，本地部署调试看看大小怎么样合适吧，我这个60%刚好。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>xxx<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">zoom</span><span class="token punctuation">:</span> 60%<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="4-效果"><a href="#4-效果" class="headerlink" title="4.效果"></a>4.效果</h2><p><img src="/img/image-20201129125553047.png" alt="image-20201129125553047"></p><hr><h2 id="更新：导图渲染插件"><a href="#更新：导图渲染插件" class="headerlink" title="更新：导图渲染插件"></a>更新：导图渲染插件</h2><p>虽然没xmind的主题好看不过还是很不错的，参考：</p><p><a href="https://zhangxiaocai.cn/posts/5a2c12e2.html">Hexo 博客添加思维导图渲染</a></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习心得 </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于做好面向考核学习的准备这件事</title>
      <link href="posts/3888dc59/"/>
      <url>posts/3888dc59/</url>
      
        <content type="html"><![CDATA[<p>关于做好面向考核学习的准备这件事</p><blockquote><p>暂定12月下旬去帆软总部考核了，虽然之前已经做了计划，不过还是记录下来吧</p><p>主要是finereport的学习</p></blockquote><h2 id="1-参考"><a href="#1-参考" class="headerlink" title="1.参考"></a>1.参考</h2><blockquote><p>参考官方计划：<a href="https://bbs.fanruan.com/thread-77147-1-1.html">https://bbs.fanruan.com/thread-77147-1-1.html</a></p></blockquote><ul><li>操作：FineReport的使用技巧，按照大功能可分为数据表、图表、参数查询、数据填报、移动端、平台搭建、定时调度、部署集成。</li><li>扩展：FineReport外围但非常相关，主要是底层的数据处理，需要掌握的有数据库知识SQL语言、ETL等，前端的一些实现开发，需要掌握的是JS</li><li>开发：FineReport支持各类插件，不满足的功能可以自己开发定制，需要掌握java</li></ul><blockquote><p>参考官方文档：<a href="https://help.fanruan.com/finereport/">https://help.fanruan.com/finereport/</a></p></blockquote><blockquote><p>参考入门视频：<a href="https://bbs.fanruan.com/course-81.html">https://bbs.fanruan.com/course-81.html</a></p></blockquote><h2 id="2-学习计划"><a href="#2-学习计划" class="headerlink" title="2.学习计划"></a>2.学习计划</h2><ol><li>先复习一下sql</li><li>结合入门视频和文档学习fr基础</li><li>完成10道上机<a href="https://bbs.fanruan.com/forum.php?mod=attachment&amp;aid=NDI5Njl8ZDZiMWM0YjR8MTYwNjU3ODA3NXw1MDc3NTd8NzcxNDc=">练习题</a></li><li>做一些题库<a href="https://bbs.fanruan.com/plugin.php?id=threed_index:timulist&amp;ptid=1">练习题</a></li><li>进阶学习<a href="https://bbs.fanruan.com/edu">视频</a></li></ol><h2 id="3-疑惑"><a href="#3-疑惑" class="headerlink" title="3.疑惑"></a>3.疑惑</h2><p>不知道要不要学js呀，几乎是0.01基础的我瑟瑟发抖</p><p>比较熟悉mysql，对SQL server和Oracle数据库不熟悉需不需要再看看</p><p>finebi和简道云看上去挺有意思的，考核不知道要不要考</p><p>至今不知道考核具体形式是做题还是做项目还是都有。</p><p><img src="/img/sticker%20(28).png" alt="遇到困难，睡大觉"></p>]]></content>
      
      
      <categories>
          
          <category> 工作 </category>
          
          <category> 帆软 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> todo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>matery下的二级分类使用方式</title>
      <link href="posts/c35239f4/"/>
      <url>posts/c35239f4/</url>
      
        <content type="html"><![CDATA[<h1 id="matery下的二级分类使用方式"><a href="#matery下的二级分类使用方式" class="headerlink" title="matery下的二级分类使用方式"></a>matery下的二级分类使用方式</h1><blockquote><p>ref：<a href="https://zhangxiaocai.cn/posts/5a99eb4d.html#toc-heading-1">https://zhangxiaocai.cn/posts/5a99eb4d.html#toc-heading-1</a></p></blockquote><h2 id="1、新建category-list-ejs文件"><a href="#1、新建category-list-ejs文件" class="headerlink" title="1、新建category-list.ejs文件"></a>1、新建category-list.ejs文件</h2><p>文件路径：</p><pre class="line-numbers language-none"><code class="language-none">hexo\themes\hexo-theme-matery-master\layout\_widget\category-list.ejs<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>内容如下：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">&lt;% var orderBy =  'name' ;  %&gt;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css"><span class="token comment">/*.category:not(:last-child) {  margin-bottom: 1rem;}*/</span><span class="token selector">.category-item</span> <span class="token punctuation">{</span>  <span class="token property">font-size</span><span class="token punctuation">:</span> 1.25rem<span class="token punctuation">;</span>  <span class="token property">font-weight</span><span class="token punctuation">:</span> bold<span class="token punctuation">;</span>  <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>  <span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.category-subitem</span> <span class="token punctuation">{</span>  <span class="token property">font-size</span><span class="token punctuation">:</span> 1rem<span class="token punctuation">;</span>  <span class="token property">font-weight</span><span class="token punctuation">:</span> bold<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.category-collapse</span> <span class="token punctuation">{</span>  <span class="token property">margin-left</span><span class="token punctuation">:</span> 1.25rem<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.category-count</span> <span class="token punctuation">{</span>  <span class="token property">font-size</span><span class="token punctuation">:</span> 0.9rem<span class="token punctuation">;</span>  <span class="token property">font-weight</span><span class="token punctuation">:</span> initial<span class="token punctuation">;</span>  <span class="token property">min-width</span><span class="token punctuation">:</span> 1.3em<span class="token punctuation">;</span>  <span class="token property">line-height</span><span class="token punctuation">:</span> 1.3em<span class="token punctuation">;</span>  <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>  <span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.category-count i</span> <span class="token punctuation">{</span>  <span class="token property">padding-right</span><span class="token punctuation">:</span> 0.25rem<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.category-count span</span> <span class="token punctuation">{</span>  <span class="token property">width</span><span class="token punctuation">:</span> 2rem<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.category-item-action:not(.collapsed) &gt; i</span> <span class="token punctuation">{</span>  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>90deg<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token property">transform-origin</span><span class="token punctuation">:</span> center center<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.category-item-action i</span> <span class="token punctuation">{</span>  <span class="token property">transition</span><span class="token punctuation">:</span> transform 0.3s ease-out<span class="token punctuation">;</span>  <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span>  <span class="token property">margin-left</span><span class="token punctuation">:</span> 0.25rem<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.category-item-action:hover</span> <span class="token punctuation">{</span>  <span class="token property">z-index</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span>  <span class="token property">color</span><span class="token punctuation">:</span> #38ACDF<span class="token punctuation">;</span>  <span class="token property">text-decoration</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> #F8F9FA<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.list-group-item:first-child</span> <span class="token punctuation">{</span>    <span class="token property">border-top-left-radius</span><span class="token punctuation">:</span> .25rem<span class="token punctuation">;</span>    <span class="token property">border-top-right-radius</span><span class="token punctuation">:</span> .25rem<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.category-item</span> <span class="token punctuation">{</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> 1.25rem<span class="token punctuation">;</span>    <span class="token property">font-weight</span><span class="token punctuation">:</span> 700<span class="token punctuation">;</span>    <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>    <span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.list-group-item</span> <span class="token punctuation">{</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> transparent<span class="token punctuation">;</span>    <span class="token property">border</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.list-group-item</span> <span class="token punctuation">{</span>    <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>    <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>    <span class="token property">padding</span><span class="token punctuation">:</span> .75rem 1.25rem<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> #fff<span class="token punctuation">;</span>    <span class="token comment">/* border: 1px solid rgba(0,0,0,.125); */</span><span class="token punctuation">}</span><span class="token selector">#card-list-zzy .list-group-item:hover</span> <span class="token punctuation">{</span>    <span class="token property">color</span><span class="token punctuation">:</span> #38ACDF<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> #F8F9FA<span class="token punctuation">;</span>    <span class="token comment">/*  border: 1px solid rgba(0,0,0,.125); */</span><span class="token punctuation">}</span><span class="token selector">.category-item-action i</span> <span class="token punctuation">{</span>    <span class="token property">transition</span><span class="token punctuation">:</span> transform .3s ease-out<span class="token punctuation">;</span>    <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span>    <span class="token property">margin-left</span><span class="token punctuation">:</span> .25rem<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.category-item-action a</span><span class="token punctuation">{</span>      <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>      <span class="token property">padding</span><span class="token punctuation">:</span> .75rem 1.25rem<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">card-categories-list-spcail &gt; div:hover</span><span class="token punctuation">{</span>  <span class="token property">color</span><span class="token punctuation">:</span>#38ACDF<span class="token punctuation">;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> #F8F9FA<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.fa</span> <span class="token punctuation">{</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> 1rem<span class="token punctuation">;</span>    <span class="token property">line-height</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.category-count</span> <span class="token punctuation">{</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> .9rem<span class="token punctuation">;</span>    <span class="token property">font-weight</span><span class="token punctuation">:</span> initial<span class="token punctuation">;</span>    <span class="token property">min-width</span><span class="token punctuation">:</span> 1.3em<span class="token punctuation">;</span>    <span class="token property">line-height</span><span class="token punctuation">:</span> 1.3em<span class="token punctuation">;</span>    <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>    <span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.category-content</span><span class="token punctuation">{</span>   <span class="token property">border-left</span><span class="token punctuation">:</span>0px<span class="token punctuation">;</span>   <span class="token property">padding</span><span class="token punctuation">:</span> .75rem 1.25rem<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.category-content a</span><span class="token punctuation">{</span>    <span class="token property">color</span><span class="token punctuation">:</span> black<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.category-content a:hover</span><span class="token punctuation">{</span>    <span class="token property">color</span><span class="token punctuation">:</span>#38ACDF<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> #F8F9FA<span class="token punctuation">;</span>    <span class="token property">box-shadow</span><span class="token punctuation">:</span>none<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token selector">.category-row</span> <span class="token punctuation">{</span>  <span class="token property">border-color</span><span class="token punctuation">:</span> #F8F9FA<span class="token punctuation">;</span><span class="token punctuation">;</span>  <span class="token property">border-bottom</span><span class="token punctuation">:</span>none<span class="token punctuation">;</span>  <span class="token property">box-shadow</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">#card-list-zzy</span><span class="token punctuation">{</span>    <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>    <span class="token comment">/* margin-top: -2rem; */</span>    <span class="token property">transition</span><span class="token punctuation">:</span> background-color .2s ease-in-out<span class="token punctuation">;</span>    <span class="token property">border-radius</span><span class="token punctuation">:</span> .5rem<span class="token punctuation">;</span>    <span class="token property">z-index</span><span class="token punctuation">:</span> 3<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.collapsible-header</span><span class="token punctuation">{</span>    <span class="token property">boder</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.collapsible</span><span class="token punctuation">{</span>  <span class="token property">box-shadow</span><span class="token punctuation">:</span>none <span class="token important">!important</span><span class="token punctuation">;</span>  <span class="token property">-webkit-box-shadow</span><span class="token punctuation">:</span> none <span class="token important">!important</span><span class="token punctuation">;</span>  <span class="token property">border-left</span><span class="token punctuation">:</span>none <span class="token important">!important</span><span class="token punctuation">;</span>  <span class="token property">border-right</span><span class="token punctuation">:</span>none <span class="token important">!important</span><span class="token punctuation">;</span>  <span class="token property">border-bottom</span><span class="token punctuation">:</span>none <span class="token important">!important</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.categories-title</span><span class="token punctuation">{</span>    <span class="token property">padding-top</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>    <span class="token comment">/* padding-bottom: 5px; */</span>    <span class="token property">margin-bottom</span><span class="token punctuation">:</span> -10px<span class="token punctuation">;</span><span class="token punctuation">}</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>  &lt;% function render_categories(cats, depth) { %&gt;  &lt;% depth = depth || 0 %&gt;  &lt;% return cats.each(function(cat){ %&gt;    &lt;% var subCats = site.categories.find({parent: cat._id}).sort(orderBy).filter(cat =&gt; cat.length) %&gt;    &lt;% var collapsed = subCats.length === 0 %&gt;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&lt;%= depth &lt;= 0 ? <span class="token punctuation">'</span>category-row<span class="token punctuation">'</span> : <span class="token punctuation">'</span>category-row category-sub<span class="token punctuation">'</span> %&gt;  row collapsible-header<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span>        <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span> &lt;%= depth &lt;= 0 ? <span class="token punctuation">'</span>category-item<span class="token punctuation">'</span> : <span class="token punctuation">'</span>category-subitem<span class="token punctuation">'</span> %&gt; &lt;%= subCats.length &gt; 0 ? <span class="token punctuation">'</span><span class="token punctuation">'</span> : <span class="token punctuation">'</span>collapsed<span class="token punctuation">'</span> %&gt; list-group-item category-item-action col s11 m11<span class="token punctuation">"</span></span>        <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>heading-&lt;%= cat._id %&gt;<span class="token punctuation">"</span></span>       <span class="token punctuation">&gt;</span></span>        &lt;%= cat.name %&gt;        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fas fa-chevron-right<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&lt;%= url_for(cat.path) %&gt;<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>category-count col s1 m1<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fa fa-list<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>&lt;%= cat.posts.length %&gt;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>        &lt;% if (subCats.length &gt; 0) { %&gt;      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>category-content collapsible-body<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>          &lt;%- render_sub_categories(subCats, cat, depth + 1) %&gt;       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>        &lt;% } else { %&gt;          &lt;%- render_posts(cat) %&gt;        &lt;% } %&gt;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>  &lt;% }) %&gt;&lt;% } %&gt;&lt;% function render_sub_categories(cats, parent, depth) { %&gt;        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>collapsible expandable category-row<span class="token punctuation">"</span></span>  <span class="token attr-name">data-collapsible</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>expandable<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            &lt;%- render_categories(cats, depth) %&gt;         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>&lt;% } %&gt;&lt;% function render_posts(cat) { %&gt;  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>collapse-&lt;%= cat._id %&gt;<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>category-content collapsible-body<span class="token punctuation">"</span></span> <span class="token punctuation">&gt;</span></span>    &lt;% var limit = theme.category.list || 10 ; %&gt;    &lt;% var posts = cat.posts.sort(config.index_generator.order_by || '-date') %&gt;    &lt;% for (var idx = 0; idx &lt; posts.length; idx++) { %&gt;      &lt;% var post = posts.data[idx] %&gt;      &lt;% if (idx &amp;&amp; limit &amp;&amp; idx &gt;= limit) { %&gt;        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&lt;%- url_for(cat.path) %&gt;<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>list-group-item list-group-item-action<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>category-post<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>More...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>        &lt;% break %&gt;      &lt;% } else { %&gt;        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&lt;%- url_for(post.path) %&gt;<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span> list-group-item list-group-item-action<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>category-post<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>&lt;%= post.title %&gt;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>      &lt;% } %&gt;    &lt;% } %&gt;  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>&lt;% } %&gt;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span> <span class="token attr-name">data-aos</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fade-up<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>card  card-categories-list-spcail<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>categories-title center-align<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fas fa-bookmark<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">&gt;</span></span><span class="token entity named-entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity named-entity" title="&nbsp;">&amp;nbsp;</span> 文章多级分类        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>card-content col s12  m12<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span>  <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>card-list-zzy<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container <span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>category-list collapsible expandable<span class="token punctuation">"</span></span>  <span class="token attr-name">data-collapsible</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>expandable<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>          &lt;% cats = site.categories.find({parent: {$exists: false}}).sort(orderBy).filter(cat =&gt; cat.length) %&gt;          &lt;%- render_categories(cats) %&gt;        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>//<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdnjs.cloudflare.com/ajax/libs/materialize/0.97.8/js/materialize.min.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.list-group-item'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hasClass</span><span class="token punctuation">(</span><span class="token string">'collapsed'</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">removeClass</span><span class="token punctuation">(</span><span class="token string">'collapsed'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slideDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>      <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addClass</span><span class="token punctuation">(</span><span class="token string">'collapsed'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slideUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> elem <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.collapsible .expandable'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> instance <span class="token operator">=</span> <span class="token constant">M</span><span class="token punctuation">.</span>Collapsible<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>elem<span class="token punctuation">,</span> <span class="token punctuation">{</span>  accordion<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2、在matery中引入category-list-ejs"><a href="#2、在matery中引入category-list-ejs" class="headerlink" title="2、在matery中引入category-list.ejs"></a>2、在matery中引入category-list.ejs</h2><p>在文件</p><pre class="line-numbers language-none"><code class="language-none">hexo\themes\hexo-theme-matery-master\layout\categories.ejs<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>中添加代码：</p><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">&lt;%- partial('_widget/category-list') %&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><left><img src="/img/image-20201126215205279.png" alt="" style="zoom: 67%;"></left></p><h2 id="3、主题的config中添加配置"><a href="#3、主题的config中添加配置" class="headerlink" title="3、主题的config中添加配置"></a>3、主题的config中添加配置</h2><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml">category:  list: 10  #每个分类下显示文章数<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="4、效果"><a href="#4、效果" class="headerlink" title="4、效果"></a>4、效果</h2><p><img src="/img/image-20201126220622877.png"></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习心得 </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Valine+matery全攻略⭐⭐</title>
      <link href="posts/708ac940/"/>
      <url>posts/708ac940/</url>
      
        <content type="html"><![CDATA[<h1 id="Valine-matery全攻略"><a href="#Valine-matery全攻略" class="headerlink" title="Valine+matery全攻略"></a>Valine+matery全攻略</h1><blockquote><p>官方文档：<a href="https://valine.js.org/">https://valine.js.org</a><br>ref:<a href="https://www.jianshu.com/p/205aaa14dff3">https://www.jianshu.com/p/205aaa14dff3</a><br><a href="https://zhangxiaocai.cn/posts/358175a6.html">https://zhangxiaocai.cn/posts/358175a6.html</a><br><a href="https://www.cnblogs.com/guoxinyu/p/12660236.html">https://www.cnblogs.com/guoxinyu/p/12660236.html</a><br>版本：v1.4.14</p></blockquote><p><font color="red" size="4"><strong>注意：本文有重要更新，更新内容单独写在最后面</strong></font></p><h2 id="1-LeanCloud注册-amp-创建应用"><a href="#1-LeanCloud注册-amp-创建应用" class="headerlink" title="1.LeanCloud注册&amp;创建应用"></a>1.LeanCloud注册&amp;创建应用</h2><p><a href="https://www.leancloud.cn/">leancloud官网</a></p><p>创建应用：</p><p><left><img src="/img/image-20201121123052704.png" alt="image-20201121123052704" style="zoom: 60%;"></left></p><p>获取key：</p><p><left><img src="/img/image-20201121123240863.png" alt="image-20201121123240863" style="zoom:66%;"></left></p><h2 id="2-配置文件"><a href="#2-配置文件" class="headerlink" title="2.配置文件"></a>2.配置文件</h2><p>matery主题已经集成了Valine，直接在主题的配置文件中修改：</p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml">valine:  enable: true  appId: &lt;你的这个&gt;  appKey: &lt;你的那个&gt;  notify: false  verify: false  visitor: true  avatar: 'retro' # Gravatar style可选 : mm/identicon/monsterid/wavatar/retro/hide  pageSize: 10 #一页显示条数  placeholder: '有什么不懂的问题，可以问我们，我们会亲切地告诉你们：听不见！  ——森下下士' # Comment Box placeholder  background: /medias/bg.webp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-可以将-nick、email、link-输入框分开-但没必要"><a href="#3-可以将-nick、email、link-输入框分开-但没必要" class="headerlink" title="3.可以将 nick、email、link 输入框分开(但没必要)"></a>3.可以将 nick、email、link 输入框分开(但没必要)</h2><p>在目录</p><pre class="line-numbers language-none"><code class="language-none">hexo\themes\hexo-theme-matery-master\source\css<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>中找到matery.css样式表，添加如下代码：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">#vcomments .vheader .vnick</span> <span class="token punctuation">{</span>      <span class="token property">width</span><span class="token punctuation">:</span> 31%<span class="token punctuation">;</span>      <span class="token property">border</span><span class="token punctuation">:</span> 2px solid #dedede<span class="token punctuation">;</span>      <span class="token property">padding-left</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>      <span class="token property">padding-right</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>      <span class="token property">border-radius</span><span class="token punctuation">:</span> 5px<span class="token punctuation">}</span><span class="token selector">#vcomments .vheader .vmail</span> <span class="token punctuation">{</span>      <span class="token property">width</span><span class="token punctuation">:</span> 31%<span class="token punctuation">;</span>      <span class="token property">border</span><span class="token punctuation">:</span> 2px solid #dedede<span class="token punctuation">;</span>      <span class="token property">margin-left</span><span class="token punctuation">:</span> 34px<span class="token punctuation">;</span>      <span class="token property">padding-left</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>      <span class="token property">padding-right</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>      <span class="token property">border-radius</span><span class="token punctuation">:</span> 5px<span class="token punctuation">}</span><span class="token selector">#vcomments .vheader .vlink</span> <span class="token punctuation">{</span>      <span class="token property">width</span><span class="token punctuation">:</span> 31%<span class="token punctuation">;</span>      <span class="token property">border</span><span class="token punctuation">:</span> 2px solid #dedede<span class="token punctuation">;</span>      <span class="token property">margin-left</span><span class="token punctuation">:</span> 34px<span class="token punctuation">;</span>      <span class="token property">padding-left</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>      <span class="token property">padding-right</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>      <span class="token property">border-radius</span><span class="token punctuation">:</span> 5px<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-鼠标over时头像旋转-这个海星"><a href="#4-鼠标over时头像旋转-这个海星" class="headerlink" title="4.鼠标over时头像旋转(这个海星)"></a>4.鼠标over时头像旋转(这个海星)</h2><p>同样是上面的css文件中添加：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">img.vimg</span> <span class="token punctuation">{</span>     <span class="token property">transition</span><span class="token punctuation">:</span> all 2s   <span class="token comment">/* 旋转时间为 2s */</span><span class="token punctuation">}</span><span class="token selector">img.vimg:hover</span> <span class="token punctuation">{</span>     <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>360deg<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token property">-webkit-transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>360deg<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token property">-moz-transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>360deg<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token property">-o-transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>360deg<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token property">-ms-transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>360deg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-评论卡片样式-也海星"><a href="#5-评论卡片样式-也海星" class="headerlink" title="5.评论卡片样式(也海星)"></a>5.评论卡片样式(也海星)</h2><p>同样是上面的css文件中添加：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">#vcomments .vcards .vcard</span> <span class="token punctuation">{</span>    <span class="token property">padding</span><span class="token punctuation">:</span> 15px 20px 0 20px<span class="token punctuation">;</span>    <span class="token property">border-radius</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>    <span class="token property">margin-bottom</span><span class="token punctuation">:</span> 15px<span class="token punctuation">;</span>    <span class="token property">box-shadow</span><span class="token punctuation">:</span> 0 0 4px 1px <span class="token function">rgba</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> .12<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token property">transition</span><span class="token punctuation">:</span> all .3s<span class="token punctuation">}</span><span class="token selector">#vcomments .vcards .vcard:hover</span> <span class="token punctuation">{</span>    <span class="token property">box-shadow</span><span class="token punctuation">:</span> 0 0 8px 3px <span class="token function">rgba</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> .12<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token selector">#vcomments .vcards .vcard .vh .vcard</span> <span class="token punctuation">{</span>    <span class="token property">border</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>    <span class="token property">box-shadow</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-增加博主、小伙伴标识以及浏览器图标-建议⭐"><a href="#6-增加博主、小伙伴标识以及浏览器图标-建议⭐" class="headerlink" title="6.增加博主、小伙伴标识以及浏览器图标(建议⭐)"></a>6.增加博主、小伙伴标识以及浏览器图标(建议⭐)</h2><p>将原生的 Valine 文件替换为下面的 <code>Valine.min.js</code> 文件目录为：</p><pre class="line-numbers language-none"><code class="language-none">hexo\themes\hexo-theme-matery-master\source\libs\valine\Valine.min.js<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>用这个替换：<a href="https://gaattc.lanzoui.com/iBXAHilyrte">Valine.min.js</a></p><p>可以在valine.ejs中多设置几个参数：</p><table><thead><tr><th align="center">参数</th><th align="center">类型</th><th align="center">说明</th><th align="center">默认</th><th align="center">示例</th></tr></thead><tbody><tr><td align="center">tagMeta</td><td align="center">Array</td><td align="center">标签要显示的文字</td><td align="center">[“博主”,“小伙伴”,“访客”]</td><td align="center">[“博主”,“小伙伴”,“访客”]</td></tr><tr><td align="center">master</td><td align="center">Array/String</td><td align="center">md5 加密后的博主邮箱</td><td align="center">[]</td><td align="center">[“fe01ce2a7fbac8fafaed7c982a04e229”]</td></tr><tr><td align="center">friends</td><td align="center">Array</td><td align="center">md5 加密后的小伙伴邮箱</td><td align="center">[]</td><td align="center">[“fe01ce2a7fbac8fafaed7c982a04e229”]</td></tr><tr><td align="center">metaPlaceholder</td><td align="center">Object</td><td align="center">meta placeholder 内容</td><td align="center">{}</td><td align="center">{“nick”:“昵称 / QQ 号”,“mail”:“邮箱 (必填)”}</td></tr><tr><td align="center">verify</td><td align="center">Boolean</td><td align="center">评论时是否需要验证，需 jQuery 支持</td><td align="center">false</td><td align="center">true</td></tr></tbody></table><p>valine.ejs文件路径：</p><pre class="line-numbers language-none"><code class="language-none">hexo\themes\hexo-theme-matery-master\layout\_partial<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>举例：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">new</span> <span class="token class-name">Valine</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        el<span class="token operator">:</span> <span class="token string">'#vcomments'</span><span class="token punctuation">,</span>        appId<span class="token operator">:</span> <span class="token string">'&lt;%- theme.valine.appId %&gt;'</span><span class="token punctuation">,</span>        appKey<span class="token operator">:</span> <span class="token string">'&lt;%- theme.valine.appKey %&gt;'</span><span class="token punctuation">,</span>        notify<span class="token operator">:</span> <span class="token string">'&lt;%- theme.valine.notify %&gt;'</span> <span class="token operator">===</span> <span class="token string">'true'</span><span class="token punctuation">,</span>        verify<span class="token operator">:</span> <span class="token string">'&lt;%- theme.valine.verify %&gt;'</span> <span class="token operator">===</span> <span class="token string">'true'</span><span class="token punctuation">,</span>        visitor<span class="token operator">:</span> <span class="token string">'&lt;%- theme.valine.visitor %&gt;'</span> <span class="token operator">===</span> <span class="token string">'true'</span><span class="token punctuation">,</span>        avatar<span class="token operator">:</span> <span class="token string">'&lt;%- theme.valine.avatar %&gt;'</span><span class="token punctuation">,</span>metaPlaceholder<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token string">"nick"</span><span class="token operator">:</span><span class="token string">"昵称/QQ号o(*￣▽￣*)o"</span><span class="token punctuation">,</span><span class="token string">"mail"</span><span class="token operator">:</span><span class="token string">"你的邮箱( ‵▽′)ψ"</span><span class="token punctuation">,</span><span class="token string">"link"</span><span class="token operator">:</span><span class="token string">"你的网站url(/▽＼)"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>        pageSize<span class="token operator">:</span> <span class="token string">'&lt;%- theme.valine.pageSize %&gt;'</span><span class="token punctuation">,</span>        lang<span class="token operator">:</span> <span class="token string">'&lt;% if (config.language == "zh-CN") {  %&gt;zh-cn&lt;% } else { %&gt;en&lt;% } %&gt;'</span><span class="token punctuation">,</span>        placeholder<span class="token operator">:</span> <span class="token string">'&lt;%= theme.valine.placeholder %&gt;'</span><span class="token punctuation">,</span>    tagMeta<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"博主"</span><span class="token punctuation">,</span><span class="token string">"小伙伴"</span><span class="token punctuation">,</span><span class="token string">"访客"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>     <span class="token comment">//标识字段名</span>master<span class="token operator">:</span> <span class="token string">'b576507dc8ba83a09ecfdfd257c7e9f9'</span><span class="token punctuation">,</span>  <span class="token comment">//博主邮箱md5</span>friends<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"103fa56afdf5169533b296368ce31d84"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token comment">//小伙伴邮箱Md5</span>enableQQ<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7-微信消息推送-墙裂建议⭐-后面有更新，所以这个作废"><a href="#7-微信消息推送-墙裂建议⭐-后面有更新，所以这个作废" class="headerlink" title="7.微信消息推送(墙裂建议⭐)后面有更新，所以这个作废"></a><del>7.微信消息推送(墙裂建议⭐)</del>后面有更新，所以这个作废</h2><blockquote><p>本博客使用Server酱实现，因为简单~也可以使用<a href="https://qmsg.zendee.cn/">Qmsg酱</a>实现qq推送</p></blockquote><p><a href="http://sc.ftqq.com/3.version">Server酱官网</a></p><p><strong>↑</strong>登录，绑定微信关注公众号，然后<a href="http://sc.ftqq.com/?c=code">获取SCKEY</a>，顺便可以在官网测试一下消息能否推送成功。</p><p>然后登录leancloud，在你的应用中部署代码：</p><p><left><img src="/img/image-20201121132414665.png" alt="image-20201121132414665" style="zoom:66%;"></left></p><p>值得注意的是：</p><p><left><img src="/img/image-20201121132538439.png" alt="image-20201121132538439" style="zoom:50%;"></left></p><p>代码如下，将token替换为自己的SCKEY：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"request"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> obj <span class="token operator">=</span> request<span class="token punctuation">.</span>object<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'收到一条新的评论：'</span> <span class="token operator">+</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> title <span class="token operator">=</span> <span class="token string">"收到一条新的评论"</span><span class="token punctuation">;</span><span class="token keyword">var</span> url <span class="token operator">=</span> request<span class="token punctuation">.</span>object<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'url'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> nick <span class="token operator">=</span> obj<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'nick'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>nick <span class="token operator">==</span> <span class="token string">'Anonymous'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      nick <span class="token operator">=</span> <span class="token string">'陌生人'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> comment <span class="token operator">=</span> obj<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'comment'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> content <span class="token operator">=</span> nick <span class="token operator">+</span> <span class="token string">"给你留言：\n\n"</span> <span class="token operator">+</span> comment <span class="token operator">+</span> <span class="token string">"\n\n详情请访问：\n\n"</span> <span class="token operator">+</span> url<span class="token punctuation">;</span><span class="token keyword">var</span> options <span class="token operator">=</span> <span class="token punctuation">{</span> method<span class="token operator">:</span> <span class="token string">'GET'</span><span class="token punctuation">,</span>    url<span class="token operator">:</span> <span class="token string">'https://sc.ftqq.com/&lt;在这里输入你的token&gt;.send'</span><span class="token punctuation">,</span>    qs<span class="token operator">:</span> <span class="token punctuation">{</span>         text<span class="token operator">:</span> title<span class="token punctuation">,</span>        desp<span class="token operator">:</span> content    <span class="token punctuation">}</span><span class="token punctuation">,</span>    headers<span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token function">http</span><span class="token punctuation">(</span>options<span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">error<span class="token punctuation">,</span> response<span class="token punctuation">,</span> body</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后点击部署即可。</p><h2 id="8-添加表情包⭐"><a href="#8-添加表情包⭐" class="headerlink" title="8.添加表情包⭐"></a>8.添加表情包⭐</h2><blockquote><p><a href="https://blog.csdn.net/cungudafa/article/details/106218905">https://blog.csdn.net/cungudafa/article/details/106218905</a><br><a href="https://www.jianshu.com/p/205aaa14dff3">https://www.jianshu.com/p/205aaa14dff3</a></p></blockquote><p>我的表情包源(fork来的+自己添加了一点)：</p><blockquote><p><a href="https://github.com/GAATTC0/Valine-Magic">https://github.com/GAATTC0/Valine-Magic</a></p></blockquote><h3 id="法一：在Valine-ejs中手动添加"><a href="#法一：在Valine-ejs中手动添加" class="headerlink" title="法一：在Valine.ejs中手动添加"></a>法一：在Valine.ejs中手动添加</h3><pre class="line-numbers language-none"><code class="language-none">hexo\themes\hexo-theme-matery-master\layout\_partial\Valine.ejs<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>添加bilibiliemoji示例：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">new</span> <span class="token class-name">Valine</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        el<span class="token operator">:</span> <span class="token string">'#vcomments'</span><span class="token punctuation">,</span>        appId<span class="token operator">:</span> <span class="token string">'&lt;%- theme.valine.appId %&gt;'</span><span class="token punctuation">,</span>        appKey<span class="token operator">:</span> <span class="token string">'&lt;%- theme.valine.appKey %&gt;'</span><span class="token punctuation">,</span>        notify<span class="token operator">:</span> <span class="token string">'&lt;%- theme.valine.notify %&gt;'</span> <span class="token operator">===</span> <span class="token string">'true'</span><span class="token punctuation">,</span>        verify<span class="token operator">:</span> <span class="token string">'&lt;%- theme.valine.verify %&gt;'</span> <span class="token operator">===</span> <span class="token string">'true'</span><span class="token punctuation">,</span>        visitor<span class="token operator">:</span> <span class="token string">'&lt;%- theme.valine.visitor %&gt;'</span> <span class="token operator">===</span> <span class="token string">'true'</span><span class="token punctuation">,</span>        avatar<span class="token operator">:</span> <span class="token string">'&lt;%- theme.valine.avatar %&gt;'</span><span class="token punctuation">,</span>metaPlaceholder<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token string">"nick"</span><span class="token operator">:</span><span class="token string">"你的QQ号"</span><span class="token punctuation">,</span><span class="token string">"mail"</span><span class="token operator">:</span><span class="token string">"你的邮箱"</span><span class="token punctuation">,</span><span class="token string">"link"</span><span class="token operator">:</span><span class="token string">"你的网站url"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>        pageSize<span class="token operator">:</span> <span class="token string">'&lt;%- theme.valine.pageSize %&gt;'</span><span class="token punctuation">,</span>        lang<span class="token operator">:</span> <span class="token string">'&lt;% if (config.language == "zh-CN") {  %&gt;zh-cn&lt;% } else { %&gt;en&lt;% } %&gt;'</span><span class="token punctuation">,</span>        placeholder<span class="token operator">:</span> <span class="token string">'&lt;%= theme.valine.placeholder %&gt;'</span><span class="token punctuation">,</span>master<span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span>friends<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">""</span><span class="token punctuation">]</span><span class="token punctuation">,</span>enableQQ<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span><span class="token comment">// 设置Bilibili表情包地址</span>        emojiCDN<span class="token operator">:</span> <span class="token string">'//i0.hdslb.com/bfs/emote/'</span><span class="token punctuation">,</span>         <span class="token comment">// 表情title和图片映射</span>        emojiMaps<span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token string">"tv_doge"</span><span class="token operator">:</span> <span class="token string">"6ea59c827c414b4a2955fe79e0f6fd3dcd515e24.png"</span><span class="token punctuation">,</span>        <span class="token string">"tv_亲亲"</span><span class="token operator">:</span> <span class="token string">"a8111ad55953ef5e3be3327ef94eb4a39d535d06.png"</span><span class="token punctuation">,</span>        <span class="token string">"tv_偷笑"</span><span class="token operator">:</span> <span class="token string">"bb690d4107620f1c15cff29509db529a73aee261.png"</span><span class="token punctuation">,</span>        <span class="token string">"tv_再见"</span><span class="token operator">:</span> <span class="token string">"180129b8ea851044ce71caf55cc8ce44bd4a4fc8.png"</span><span class="token punctuation">,</span>        <span class="token string">"tv_冷漠"</span><span class="token operator">:</span> <span class="token string">"b9cbc755c2b3ee43be07ca13de84e5b699a3f101.png"</span><span class="token punctuation">,</span>        <span class="token string">"tv_发怒"</span><span class="token operator">:</span> <span class="token string">"34ba3cd204d5b05fec70ce08fa9fa0dd612409ff.png"</span><span class="token punctuation">,</span>        <span class="token string">"tv_发财"</span><span class="token operator">:</span> <span class="token string">"34db290afd2963723c6eb3c4560667db7253a21a.png"</span><span class="token punctuation">,</span>        <span class="token string">"tv_可爱"</span><span class="token operator">:</span> <span class="token string">"9e55fd9b500ac4b96613539f1ce2f9499e314ed9.png"</span><span class="token punctuation">,</span>        <span class="token string">"tv_吐血"</span><span class="token operator">:</span> <span class="token string">"09dd16a7aa59b77baa1155d47484409624470c77.png"</span><span class="token punctuation">,</span>        <span class="token string">"tv_呆"</span><span class="token operator">:</span> <span class="token string">"fe1179ebaa191569b0d31cecafe7a2cd1c951c9d.png"</span><span class="token punctuation">,</span>        <span class="token string">"tv_呕吐"</span><span class="token operator">:</span> <span class="token string">"9f996894a39e282ccf5e66856af49483f81870f3.png"</span><span class="token punctuation">,</span>        <span class="token string">"tv_困"</span><span class="token operator">:</span> <span class="token string">"241ee304e44c0af029adceb294399391e4737ef2.png"</span><span class="token punctuation">,</span>        <span class="token string">"tv_坏笑"</span><span class="token operator">:</span> <span class="token string">"1f0b87f731a671079842116e0991c91c2c88645a.png"</span><span class="token punctuation">,</span>        <span class="token string">"tv_大佬"</span><span class="token operator">:</span> <span class="token string">"093c1e2c490161aca397afc45573c877cdead616.png"</span><span class="token punctuation">,</span>        <span class="token string">"tv_大哭"</span><span class="token operator">:</span> <span class="token string">"23269aeb35f99daee28dda129676f6e9ea87934f.png"</span><span class="token punctuation">,</span>        <span class="token string">"tv_委屈"</span><span class="token operator">:</span> <span class="token string">"d04dba7b5465779e9755d2ab6f0a897b9b33bb77.png"</span><span class="token punctuation">,</span>        <span class="token string">"tv_害羞"</span><span class="token operator">:</span> <span class="token string">"a37683fb5642fa3ddfc7f4e5525fd13e42a2bdb1.png"</span><span class="token punctuation">,</span>        <span class="token string">"tv_尴尬"</span><span class="token operator">:</span> <span class="token string">"7cfa62dafc59798a3d3fb262d421eeeff166cfa4.png"</span><span class="token punctuation">,</span>        <span class="token string">"tv_微笑"</span><span class="token operator">:</span> <span class="token string">"70dc5c7b56f93eb61bddba11e28fb1d18fddcd4c.png"</span><span class="token punctuation">,</span>        <span class="token string">"tv_思考"</span><span class="token operator">:</span> <span class="token string">"90cf159733e558137ed20aa04d09964436f618a1.png"</span><span class="token punctuation">,</span>        <span class="token string">"tv_惊吓"</span><span class="token operator">:</span> <span class="token string">"0d15c7e2ee58e935adc6a7193ee042388adc22af.png"</span><span class="token punctuation">,</span>        <span class="token string">"tv_打脸"</span><span class="token operator">:</span> <span class="token string">"56ab10b624063e966bfcb76ea5dc4794d87dfd47.png"</span><span class="token punctuation">,</span>        <span class="token string">"tv_抓狂"</span><span class="token operator">:</span> <span class="token string">"fe31c08edad661d63762b04e17b8d5ae3c71a757.png"</span><span class="token punctuation">,</span>        <span class="token string">"tv_抠鼻"</span><span class="token operator">:</span> <span class="token string">"c666f55e88d471e51bbd9fab9bb308110824a6eb.png"</span><span class="token punctuation">,</span>        <span class="token string">"tv_斜眼笑"</span><span class="token operator">:</span> <span class="token string">"911f987aa8bc1bee12d52aafe62bc41ef4474e6c.png"</span><span class="token punctuation">,</span>        <span class="token string">"tv_无奈"</span><span class="token operator">:</span> <span class="token string">"ea8ed89ee9878f2fece2dda0ea8a5dbfe21b5751.png"</span><span class="token punctuation">,</span>        <span class="token string">"tv_晕"</span><span class="token operator">:</span> <span class="token string">"5443c22b4d07fb1907ccc610c8e6db254f2461b7.png"</span><span class="token punctuation">,</span>        <span class="token string">"tv_流汗"</span><span class="token operator">:</span> <span class="token string">"cead1c351ab8d79e9f369605beb90148db0fbed3.png"</span><span class="token punctuation">,</span>        <span class="token string">"tv_流泪"</span><span class="token operator">:</span> <span class="token string">"7e71cde7858f0cd50d74b0264aa26db612a8a167.png"</span><span class="token punctuation">,</span>        <span class="token string">"tv_流鼻血"</span><span class="token operator">:</span> <span class="token string">"c32d39db2737f89b904ca32700d140a9241b0767.png"</span><span class="token punctuation">,</span>        <span class="token string">"tv_点赞"</span><span class="token operator">:</span> <span class="token string">"f85c354995bd99e28fc76c869bfe42ba6438eff4.png"</span><span class="token punctuation">,</span>        <span class="token string">"tv_生气"</span><span class="token operator">:</span> <span class="token string">"26702dcafdab5e8225b43ffd23c94ac1ff932654.png"</span><span class="token punctuation">,</span>        <span class="token string">"tv_生病"</span><span class="token operator">:</span> <span class="token string">"8b0ec90e6b86771092a498c54f09fc94621c1900.png"</span><span class="token punctuation">,</span>        <span class="token string">"tv_疑问"</span><span class="token operator">:</span> <span class="token string">"0793d949b18d7be716078349c202c15ff166f314.png"</span><span class="token punctuation">,</span>        <span class="token string">"tv_白眼"</span><span class="token operator">:</span> <span class="token string">"c1d59f439e379ee50eef488bcb5e5378e5044ea4.png"</span><span class="token punctuation">,</span>        <span class="token string">"tv_皱眉"</span><span class="token operator">:</span> <span class="token string">"72ccad6679fea0d14cce648b4d818e09b8ffea2d.png"</span><span class="token punctuation">,</span>        <span class="token string">"tv_目瞪口呆"</span><span class="token operator">:</span> <span class="token string">"0b8cb81a68de5d5365212c99375e7ace3e7891b7.png"</span><span class="token punctuation">,</span>        <span class="token string">"tv_睡着"</span><span class="token operator">:</span> <span class="token string">"8b196675b53af58264f383c50ad0945048290b33.png"</span><span class="token punctuation">,</span>        <span class="token string">"tv_笑哭"</span><span class="token operator">:</span> <span class="token string">"1abc628f6d4f4caf9d0e7800878f4697abbc8273.png"</span><span class="token punctuation">,</span>        <span class="token string">"tv_腼腆"</span><span class="token operator">:</span> <span class="token string">"89712c0d4af73e67f89e35cbc518420380a7f6f4.png"</span><span class="token punctuation">,</span>        <span class="token string">"tv_色"</span><span class="token operator">:</span> <span class="token string">"61822c7e9aae5da76475e7892534545336b23a6f.png"</span><span class="token punctuation">,</span>        <span class="token string">"tv_调侃"</span><span class="token operator">:</span> <span class="token string">"4bc022533ef31544ca0d72c12c808cf4a1cce3e3.png"</span><span class="token punctuation">,</span>        <span class="token string">"tv_调皮"</span><span class="token operator">:</span> <span class="token string">"b9c41de8e82dd7a8515ae5e3cb63e898bf245186.png"</span><span class="token punctuation">,</span>        <span class="token string">"tv_鄙视"</span><span class="token operator">:</span> <span class="token string">"6e72339f346a692a495b123174b49e4e8e781303.png"</span><span class="token punctuation">,</span>        <span class="token string">"tv_闭嘴"</span><span class="token operator">:</span> <span class="token string">"c9e990da7f6e93975e25fd8b70e2e290aa4086ef.png"</span><span class="token punctuation">,</span>        <span class="token string">"tv_难过"</span><span class="token operator">:</span> <span class="token string">"87f46748d3f142ebc6586ff58860d0e2fc8263ba.png"</span><span class="token punctuation">,</span>        <span class="token string">"tv_馋"</span><span class="token operator">:</span> <span class="token string">"fc7e829b845c43c623c8b490ee3602b7f0e76a31.png"</span><span class="token punctuation">,</span>        <span class="token string">"tv_鬼脸"</span><span class="token operator">:</span> <span class="token string">"0ffbbddf8a94d124ca2f54b360bbc04feb6bbfea.png"</span><span class="token punctuation">,</span>        <span class="token string">"tv_黑人问号"</span><span class="token operator">:</span> <span class="token string">"45821a01f51bc867da9edbaa2e070410819a95b2.png"</span><span class="token punctuation">,</span>        <span class="token string">"tv_鼓掌"</span><span class="token operator">:</span> <span class="token string">"1d21793f96ef4e6f48b23e53e3b9e42da833a0f6.png"</span><span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>或者更好的：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//jsdelivr永远滴神</span>emojiCDN<span class="token operator">:</span> <span class="token string">'https://fastly.jsdelivr.net/gh/GAATTC0/ValineCDN@master/'</span><span class="token punctuation">,</span> <span class="token comment">// 表情title和图片映射</span>emojiMaps<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token string">"bilibilitv2"</span><span class="token operator">:</span> <span class="token string">"bilibilitv/[tv_doge].png"</span><span class="token punctuation">,</span><span class="token string">"bilibilitv3"</span><span class="token operator">:</span> <span class="token string">"bilibilitv/[tv_亲亲].png"</span><span class="token punctuation">,</span><span class="token string">"bilibilitv4"</span><span class="token operator">:</span> <span class="token string">"bilibilitv/[tv_偷笑].png"</span><span class="token punctuation">,</span><span class="token string">"bilibilitv5"</span><span class="token operator">:</span> <span class="token string">"bilibilitv/[tv_再见].png"</span><span class="token punctuation">,</span><span class="token string">"bilibilitv6"</span><span class="token operator">:</span> <span class="token string">"bilibilitv/[tv_冷漠].png"</span><span class="token punctuation">,</span><span class="token string">"bilibilitv7"</span><span class="token operator">:</span> <span class="token string">"bilibilitv/[tv_发怒].png"</span><span class="token punctuation">,</span><span class="token string">"bilibilitv8"</span><span class="token operator">:</span> <span class="token string">"bilibilitv/[tv_发财].png"</span><span class="token punctuation">,</span><span class="token string">"bilibilitv9"</span><span class="token operator">:</span> <span class="token string">"bilibilitv/[tv_可爱].png"</span><span class="token punctuation">,</span><span class="token string">"bilibilitv10"</span><span class="token operator">:</span> <span class="token string">"bilibilitv/[tv_吐血].png"</span><span class="token punctuation">,</span><span class="token string">"bilibilitv11"</span><span class="token operator">:</span> <span class="token string">"bilibilitv/[tv_呆].png"</span><span class="token punctuation">,</span><span class="token string">"bilibilitv12"</span><span class="token operator">:</span> <span class="token string">"bilibilitv/[tv_呕吐].png"</span><span class="token punctuation">,</span><span class="token string">"bilibilitv13"</span><span class="token operator">:</span> <span class="token string">"bilibilitv/[tv_困].png"</span><span class="token punctuation">,</span><span class="token string">"bilibilitv14"</span><span class="token operator">:</span> <span class="token string">"bilibilitv/[tv_坏笑].png"</span><span class="token punctuation">,</span><span class="token string">"bilibilitv15"</span><span class="token operator">:</span> <span class="token string">"bilibilitv/[tv_大佬].png"</span><span class="token punctuation">,</span><span class="token string">"bilibilitv16"</span><span class="token operator">:</span> <span class="token string">"bilibilitv/[tv_大哭].png"</span><span class="token punctuation">,</span><span class="token string">"bilibilitv17"</span><span class="token operator">:</span> <span class="token string">"bilibilitv/[tv_委屈].png"</span><span class="token punctuation">,</span><span class="token string">"bilibilitv18"</span><span class="token operator">:</span> <span class="token string">"bilibilitv/[tv_害羞].png"</span><span class="token punctuation">,</span><span class="token string">"bilibilitv19"</span><span class="token operator">:</span> <span class="token string">"bilibilitv/[tv_尴尬].png"</span><span class="token punctuation">,</span><span class="token string">"bilibilitv20"</span><span class="token operator">:</span> <span class="token string">"bilibilitv/[tv_微笑].png"</span><span class="token punctuation">,</span><span class="token string">"bilibilitv21"</span><span class="token operator">:</span> <span class="token string">"bilibilitv/[tv_思考].png"</span><span class="token punctuation">,</span><span class="token string">"bilibilitv22"</span><span class="token operator">:</span> <span class="token string">"bilibilitv/[tv_惊吓].png"</span><span class="token punctuation">,</span><span class="token string">"bilibilitv23"</span><span class="token operator">:</span> <span class="token string">"bilibilitv/[tv_打脸].png"</span><span class="token punctuation">,</span><span class="token string">"bilibilitv24"</span><span class="token operator">:</span> <span class="token string">"bilibilitv/[tv_抓狂].png"</span><span class="token punctuation">,</span><span class="token string">"bilibilitv25"</span><span class="token operator">:</span> <span class="token string">"bilibilitv/[tv_抠鼻].png"</span><span class="token punctuation">,</span><span class="token string">"bilibilitv26"</span><span class="token operator">:</span> <span class="token string">"bilibilitv/[tv_斜眼笑].png"</span><span class="token punctuation">,</span><span class="token string">"bilibilitv27"</span><span class="token operator">:</span> <span class="token string">"bilibilitv/[tv_无奈].png"</span><span class="token punctuation">,</span><span class="token string">"bilibilitv28"</span><span class="token operator">:</span> <span class="token string">"bilibilitv/[tv_晕].png"</span><span class="token punctuation">,</span><span class="token string">"bilibilitv29"</span><span class="token operator">:</span> <span class="token string">"bilibilitv/[tv_流汗].png"</span><span class="token punctuation">,</span><span class="token string">"bilibilitv30"</span><span class="token operator">:</span> <span class="token string">"bilibilitv/[tv_流泪].png"</span><span class="token punctuation">,</span><span class="token string">"bilibilitv31"</span><span class="token operator">:</span> <span class="token string">"bilibilitv/[tv_流鼻血].png"</span><span class="token punctuation">,</span><span class="token string">"bilibilitv32"</span><span class="token operator">:</span> <span class="token string">"bilibilitv/[tv_点赞].png"</span><span class="token punctuation">,</span><span class="token string">"bilibilitv33"</span><span class="token operator">:</span> <span class="token string">"bilibilitv/[tv_生气].png"</span><span class="token punctuation">,</span><span class="token string">"bilibilitv34"</span><span class="token operator">:</span> <span class="token string">"bilibilitv/[tv_生病].png"</span><span class="token punctuation">,</span><span class="token string">"bilibilitv35"</span><span class="token operator">:</span> <span class="token string">"bilibilitv/[tv_疑问].png"</span><span class="token punctuation">,</span><span class="token string">"bilibilitv36"</span><span class="token operator">:</span> <span class="token string">"bilibilitv/[tv_白眼].png"</span><span class="token punctuation">,</span><span class="token string">"bilibilitv37"</span><span class="token operator">:</span> <span class="token string">"bilibilitv/[tv_皱眉].png"</span><span class="token punctuation">,</span><span class="token string">"bilibilitv38"</span><span class="token operator">:</span> <span class="token string">"bilibilitv/[tv_目瞪口呆].png"</span><span class="token punctuation">,</span><span class="token string">"bilibilitv39"</span><span class="token operator">:</span> <span class="token string">"bilibilitv/[tv_睡着].png"</span><span class="token punctuation">,</span><span class="token string">"bilibilitv40"</span><span class="token operator">:</span> <span class="token string">"bilibilitv/[tv_笑哭].png"</span><span class="token punctuation">,</span><span class="token string">"bilibilitv41"</span><span class="token operator">:</span> <span class="token string">"bilibilitv/[tv_腼腆].png"</span><span class="token punctuation">,</span><span class="token string">"bilibilitv42"</span><span class="token operator">:</span> <span class="token string">"bilibilitv/[tv_色].png"</span><span class="token punctuation">,</span><span class="token string">"bilibilitv43"</span><span class="token operator">:</span> <span class="token string">"bilibilitv/[tv_调侃].png"</span><span class="token punctuation">,</span><span class="token string">"bilibilitv44"</span><span class="token operator">:</span> <span class="token string">"bilibilitv/[tv_调皮].png"</span><span class="token punctuation">,</span><span class="token string">"bilibilitv45"</span><span class="token operator">:</span> <span class="token string">"bilibilitv/[tv_鄙视].png"</span><span class="token punctuation">,</span><span class="token string">"bilibilitv46"</span><span class="token operator">:</span> <span class="token string">"bilibilitv/[tv_闭嘴].png"</span><span class="token punctuation">,</span><span class="token string">"bilibilitv47"</span><span class="token operator">:</span> <span class="token string">"bilibilitv/[tv_难过].png"</span><span class="token punctuation">,</span><span class="token string">"bilibilitv48"</span><span class="token operator">:</span> <span class="token string">"bilibilitv/[tv_馋].png"</span><span class="token punctuation">,</span><span class="token string">"bilibilitv49"</span><span class="token operator">:</span> <span class="token string">"bilibilitv/[tv_鬼脸].png"</span><span class="token punctuation">,</span><span class="token string">"bilibilitv50"</span><span class="token operator">:</span> <span class="token string">"bilibilitv/[tv_黑人问号].png"</span><span class="token punctuation">,</span><span class="token string">"bilibilitv51"</span><span class="token operator">:</span> <span class="token string">"bilibilitv/[tv_鼓掌].png"</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="法二：在js中添加"><a href="#法二：在js中添加" class="headerlink" title="法二：在js中添加"></a>法二：在js中添加</h3><p>看链接吧233，虽然我还没看，不过第一种方法还能用hhh</p><hr>**更新：**<h2 id="9-MiniValine"><a href="#9-MiniValine" class="headerlink" title="9.MiniValine"></a>9.MiniValine</h2><p>​    才发现matery竟然自带了另一个那就是MiniValine，只需要在主题配置中打开即可，配置相当简单而且不需要改源码，支持表情包分类拓展，真好用~</p><hr>### 10.表情过大的适配方式<p>在valine.ejs文件中删掉<code>max-width：100%</code>属性:</p><pre class="line-numbers language-dir" data-language="dir"><code class="language-dir">hexo\themes\hexo-theme-matery-master\layout\_partial\valine.ejs<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">#vcomments img</span> <span class="token punctuation">{</span>        <span class="token comment">/*max-width: 100%;*/</span>        <span class="token property">height</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>        <span class="token property">cursor</span><span class="token punctuation">:</span> pointer<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>再增加一个内边距0属性(虽然不知道有什么用)：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.v[data-class=v] .vinput</span> <span class="token punctuation">{</span>     <span class="token property">padding</span><span class="token punctuation">:</span> 0px 0px<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><hr><h1 id="重要更新：valine-admin的使用⭐⭐⭐"><a href="#重要更新：valine-admin的使用⭐⭐⭐" class="headerlink" title="重要更新：valine-admin的使用⭐⭐⭐"></a>重要更新：valine-admin的使用⭐⭐⭐</h1><h2 id="1-部署和配置"><a href="#1-部署和配置" class="headerlink" title="1.部署和配置"></a>1.部署和配置</h2><p>官方文档：<a href="https://github.com/DesertsP/Valine-Admin">https://github.com/DesertsP/Valine-Admin</a></p><p>参考官方文档即可完成配置</p><p>这里注意的是如果不是自定义云引擎域名而是用leancloud提供的<code>xxx.avosapps.us</code>的话，需要使用国际版。和国内账号不通用，但是可以在导入导出选项里将数据库迁移到国际版。</p><h2 id="2-邮件模板"><a href="#2-邮件模板" class="headerlink" title="2.邮件模板"></a>2.邮件模板</h2><p>MAIL_TEMPLATE：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">border-radius</span><span class="token punctuation">:</span> 10px 10px 10px 10px<span class="token punctuation">;</span><span class="token property">font-size</span><span class="token punctuation">:</span>13px<span class="token punctuation">;</span>    <span class="token property">color</span><span class="token punctuation">:</span> #555555<span class="token punctuation">;</span><span class="token property">width</span><span class="token punctuation">:</span> 666px<span class="token punctuation">;</span><span class="token property">font-family</span><span class="token punctuation">:</span><span class="token string">'Century Gothic'</span><span class="token punctuation">,</span><span class="token string">'Trebuchet MS'</span><span class="token punctuation">,</span><span class="token string">'Hiragino Sans GB'</span><span class="token punctuation">,</span>微软雅黑<span class="token punctuation">,</span><span class="token string">'Microsoft Yahei'</span><span class="token punctuation">,</span>Tahoma<span class="token punctuation">,</span>Helvetica<span class="token punctuation">,</span>Arial<span class="token punctuation">,</span><span class="token string">'SimSun'</span><span class="token punctuation">,</span>sans-serif<span class="token punctuation">;</span><span class="token property">margin</span><span class="token punctuation">:</span>50px auto<span class="token punctuation">;</span><span class="token property">border</span><span class="token punctuation">:</span>1px solid #eee<span class="token punctuation">;</span><span class="token property">max-width</span><span class="token punctuation">:</span>100%<span class="token punctuation">;</span><span class="token property">background</span><span class="token punctuation">:</span> #ffffff <span class="token function">repeating-linear-gradient</span><span class="token punctuation">(</span>-45deg<span class="token punctuation">,</span>#fff<span class="token punctuation">,</span>#fff 1.125rem<span class="token punctuation">,</span>transparent 1.125rem<span class="token punctuation">,</span>transparent 2.25rem<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token property">box-shadow</span><span class="token punctuation">:</span> 0 1px 5px <span class="token function">rgba</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0.15<span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">width</span><span class="token punctuation">:</span>100%<span class="token punctuation">;</span><span class="token property">background</span><span class="token punctuation">:</span>#49BDAD<span class="token punctuation">;</span><span class="token property">color</span><span class="token punctuation">:</span>#ffffff<span class="token punctuation">;</span><span class="token property">border-radius</span><span class="token punctuation">:</span> 10px 10px 0 0<span class="token punctuation">;</span><span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token function">-moz-linear-gradient</span><span class="token punctuation">(</span>0deg<span class="token punctuation">,</span> <span class="token function">rgb</span><span class="token punctuation">(</span>67<span class="token punctuation">,</span> 198<span class="token punctuation">,</span> 184<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">rgb</span><span class="token punctuation">(</span>255<span class="token punctuation">,</span> 209<span class="token punctuation">,</span> 244<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token function">-webkit-linear-gradient</span><span class="token punctuation">(</span>0deg<span class="token punctuation">,</span> <span class="token function">rgb</span><span class="token punctuation">(</span>67<span class="token punctuation">,</span> 198<span class="token punctuation">,</span> 184<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">rgb</span><span class="token punctuation">(</span>255<span class="token punctuation">,</span> 209<span class="token punctuation">,</span> 244<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span> 66px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">font-size</span><span class="token punctuation">:</span>15px<span class="token punctuation">;</span><span class="token property">word-break</span><span class="token punctuation">:</span>break-all<span class="token punctuation">;</span><span class="token property">padding</span><span class="token punctuation">:</span> 23px 32px<span class="token punctuation">;</span><span class="token property">margin</span><span class="token punctuation">:</span>0<span class="token punctuation">;</span><span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">hsla</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span>0%<span class="token punctuation">,</span>100%<span class="token punctuation">,</span>.4<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token property">border-radius</span><span class="token punctuation">:</span> 10px 10px 0 0<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>您在<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">text-decoration</span><span class="token punctuation">:</span>none<span class="token punctuation">;</span><span class="token property">color</span><span class="token punctuation">:</span> #ffffff<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${SITE_URL}<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span> ${SITE_NAME}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>上的留言有新回复啦！<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">margin</span><span class="token punctuation">:</span>40px auto<span class="token punctuation">;</span><span class="token property">width</span><span class="token punctuation">:</span>90%</span><span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>${PARENT_NICK} 同学，您曾在文章上发表评论：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">background</span><span class="token punctuation">:</span> #fafafa <span class="token function">repeating-linear-gradient</span><span class="token punctuation">(</span>-45deg<span class="token punctuation">,</span>#fff<span class="token punctuation">,</span>#fff 1.125rem<span class="token punctuation">,</span>transparent 1.125rem<span class="token punctuation">,</span>transparent 2.25rem<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token property">box-shadow</span><span class="token punctuation">:</span> 0 2px 5px <span class="token function">rgba</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0.15<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token property">margin</span><span class="token punctuation">:</span>20px 0px<span class="token punctuation">;</span><span class="token property">padding</span><span class="token punctuation">:</span>15px<span class="token punctuation">;</span><span class="token property">border-radius</span><span class="token punctuation">:</span>5px<span class="token punctuation">;</span><span class="token property">font-size</span><span class="token punctuation">:</span>14px<span class="token punctuation">;</span><span class="token property">color</span><span class="token punctuation">:</span>#555555<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>${PARENT_COMMENT}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>${NICK} 给您的回复如下：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">background</span><span class="token punctuation">:</span> #fafafa <span class="token function">repeating-linear-gradient</span><span class="token punctuation">(</span>-45deg<span class="token punctuation">,</span>#fff<span class="token punctuation">,</span>#fff 1.125rem<span class="token punctuation">,</span>transparent 1.125rem<span class="token punctuation">,</span>transparent 2.25rem<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token property">box-shadow</span><span class="token punctuation">:</span> 0 2px 5px <span class="token function">rgba</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0.15<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token property">margin</span><span class="token punctuation">:</span>20px 0px<span class="token punctuation">;</span><span class="token property">padding</span><span class="token punctuation">:</span>15px<span class="token punctuation">;</span><span class="token property">border-radius</span><span class="token punctuation">:</span>5px<span class="token punctuation">;</span><span class="token property">font-size</span><span class="token punctuation">:</span>14px<span class="token punctuation">;</span><span class="token property">color</span><span class="token punctuation">:</span>#555555<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>${COMMENT}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>您可以点击<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">text-decoration</span><span class="token punctuation">:</span>none<span class="token punctuation">;</span> <span class="token property">color</span><span class="token punctuation">:</span>#12addb</span><span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${POST_URL}#comments<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>查看回复的完整內容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>，欢迎再次光临<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">text-decoration</span><span class="token punctuation">:</span>none<span class="token punctuation">;</span> <span class="token property">color</span><span class="token punctuation">:</span>#12addb</span><span class="token punctuation">"</span></span>                <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${SITE_URL}<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span> ${SITE_NAME}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css"><span class="token selector">a:link</span><span class="token punctuation">{</span><span class="token property">text-decoration</span><span class="token punctuation">:</span>none<span class="token punctuation">}</span><span class="token selector">a:visited</span><span class="token punctuation">{</span><span class="token property">text-decoration</span><span class="token punctuation">:</span>none<span class="token punctuation">}</span><span class="token selector">a:hover</span><span class="token punctuation">{</span><span class="token property">text-decoration</span><span class="token punctuation">:</span>none<span class="token punctuation">}</span><span class="token selector">a:active</span><span class="token punctuation">{</span><span class="token property">text-decoration</span><span class="token punctuation">:</span>none<span class="token punctuation">}</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">width</span><span class="token punctuation">:</span>100%<span class="token punctuation">;</span><span class="token property">background</span><span class="token punctuation">:</span>#49BDAD<span class="token punctuation">;</span><span class="token property">color</span><span class="token punctuation">:</span>#ffffff<span class="token punctuation">;</span><span class="token property">border-radius</span><span class="token punctuation">:</span>  0 0 10px 10px<span class="token punctuation">;</span><span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token function">-moz-linear-gradient</span><span class="token punctuation">(</span>0deg<span class="token punctuation">,</span> <span class="token function">rgb</span><span class="token punctuation">(</span>67<span class="token punctuation">,</span> 198<span class="token punctuation">,</span> 184<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">rgb</span><span class="token punctuation">(</span>255<span class="token punctuation">,</span> 209<span class="token punctuation">,</span> 244<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token function">-webkit-linear-gradient</span><span class="token punctuation">(</span>0deg<span class="token punctuation">,</span><span class="token function">rgb</span><span class="token punctuation">(</span>67<span class="token punctuation">,</span> 198<span class="token punctuation">,</span> 184<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">rgb</span><span class="token punctuation">(</span>255<span class="token punctuation">,</span> 209<span class="token punctuation">,</span> 244<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span> 66px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>MAIL_TEMPLATE_ADMIN：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">border-radius</span><span class="token punctuation">:</span> 10px 10px 10px 10px<span class="token punctuation">;</span><span class="token property">font-size</span><span class="token punctuation">:</span>13px<span class="token punctuation">;</span>    <span class="token property">color</span><span class="token punctuation">:</span> #555555<span class="token punctuation">;</span><span class="token property">width</span><span class="token punctuation">:</span> 666px<span class="token punctuation">;</span><span class="token property">font-family</span><span class="token punctuation">:</span><span class="token string">'Century Gothic'</span><span class="token punctuation">,</span><span class="token string">'Trebuchet MS'</span><span class="token punctuation">,</span><span class="token string">'Hiragino Sans GB'</span><span class="token punctuation">,</span>微软雅黑<span class="token punctuation">,</span><span class="token string">'Microsoft Yahei'</span><span class="token punctuation">,</span>Tahoma<span class="token punctuation">,</span>Helvetica<span class="token punctuation">,</span>Arial<span class="token punctuation">,</span><span class="token string">'SimSun'</span><span class="token punctuation">,</span>sans-serif<span class="token punctuation">;</span><span class="token property">margin</span><span class="token punctuation">:</span>50px auto<span class="token punctuation">;</span><span class="token property">border</span><span class="token punctuation">:</span>1px solid #eee<span class="token punctuation">;</span><span class="token property">max-width</span><span class="token punctuation">:</span>100%<span class="token punctuation">;</span><span class="token property">background</span><span class="token punctuation">:</span> #ffffff <span class="token function">repeating-linear-gradient</span><span class="token punctuation">(</span>-45deg<span class="token punctuation">,</span>#fff<span class="token punctuation">,</span>#fff 1.125rem<span class="token punctuation">,</span>transparent 1.125rem<span class="token punctuation">,</span>transparent 2.25rem<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token property">box-shadow</span><span class="token punctuation">:</span> 0 1px 5px <span class="token function">rgba</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0.15<span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">width</span><span class="token punctuation">:</span>100%<span class="token punctuation">;</span><span class="token property">background</span><span class="token punctuation">:</span>#49BDAD<span class="token punctuation">;</span><span class="token property">color</span><span class="token punctuation">:</span>#ffffff<span class="token punctuation">;</span><span class="token property">border-radius</span><span class="token punctuation">:</span> 10px 10px 0 0<span class="token punctuation">;</span><span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token function">-moz-linear-gradient</span><span class="token punctuation">(</span>0deg<span class="token punctuation">,</span> <span class="token function">rgb</span><span class="token punctuation">(</span>67<span class="token punctuation">,</span> 198<span class="token punctuation">,</span> 184<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">rgb</span><span class="token punctuation">(</span>255<span class="token punctuation">,</span> 209<span class="token punctuation">,</span> 244<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token function">-webkit-linear-gradient</span><span class="token punctuation">(</span>0deg<span class="token punctuation">,</span> <span class="token function">rgb</span><span class="token punctuation">(</span>67<span class="token punctuation">,</span> 198<span class="token punctuation">,</span> 184<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">rgb</span><span class="token punctuation">(</span>255<span class="token punctuation">,</span> 209<span class="token punctuation">,</span> 244<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span> 66px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">font-size</span><span class="token punctuation">:</span>15px<span class="token punctuation">;</span><span class="token property">word-break</span><span class="token punctuation">:</span>break-all<span class="token punctuation">;</span><span class="token property">padding</span><span class="token punctuation">:</span> 23px 32px<span class="token punctuation">;</span><span class="token property">margin</span><span class="token punctuation">:</span>0<span class="token punctuation">;</span><span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">hsla</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span>0%<span class="token punctuation">,</span>100%<span class="token punctuation">,</span>.4<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token property">border-radius</span><span class="token punctuation">:</span> 10px 10px 0 0<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>您在<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">text-decoration</span><span class="token punctuation">:</span>none<span class="token punctuation">;</span><span class="token property">color</span><span class="token punctuation">:</span> #ffffff<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${SITE_URL}<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span> ${SITE_NAME}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>上的文章有了新的评论！<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">margin</span><span class="token punctuation">:</span>40px auto<span class="token punctuation">;</span><span class="token property">width</span><span class="token punctuation">:</span>90%</span><span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>strong</span><span class="token punctuation">&gt;</span></span>${NICK}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>strong</span><span class="token punctuation">&gt;</span></span> 同学，发表评论说：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">background</span><span class="token punctuation">:</span> #fafafa <span class="token function">repeating-linear-gradient</span><span class="token punctuation">(</span>-45deg<span class="token punctuation">,</span>#fff<span class="token punctuation">,</span>#fff 1.125rem<span class="token punctuation">,</span>transparent 1.125rem<span class="token punctuation">,</span>transparent 2.25rem<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token property">box-shadow</span><span class="token punctuation">:</span> 0 2px 5px <span class="token function">rgba</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0.15<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token property">margin</span><span class="token punctuation">:</span>20px 0px<span class="token punctuation">;</span><span class="token property">padding</span><span class="token punctuation">:</span>15px<span class="token punctuation">;</span><span class="token property">border-radius</span><span class="token punctuation">:</span>5px<span class="token punctuation">;</span><span class="token property">font-size</span><span class="token punctuation">:</span>14px<span class="token punctuation">;</span><span class="token property">color</span><span class="token punctuation">:</span>#555555<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>${COMMENT}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>您可以点击<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">text-decoration</span><span class="token punctuation">:</span>none<span class="token punctuation">;</span> <span class="token property">color</span><span class="token punctuation">:</span>#12addb</span><span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${POST_URL}#comments<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>查看回复的完整內容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css"><span class="token selector">a:link</span><span class="token punctuation">{</span><span class="token property">text-decoration</span><span class="token punctuation">:</span>none<span class="token punctuation">}</span><span class="token selector">a:visited</span><span class="token punctuation">{</span><span class="token property">text-decoration</span><span class="token punctuation">:</span>none<span class="token punctuation">}</span><span class="token selector">a:hover</span><span class="token punctuation">{</span><span class="token property">text-decoration</span><span class="token punctuation">:</span>none<span class="token punctuation">}</span><span class="token selector">a:active</span><span class="token punctuation">{</span><span class="token property">text-decoration</span><span class="token punctuation">:</span>none<span class="token punctuation">}</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">width</span><span class="token punctuation">:</span>100%<span class="token punctuation">;</span><span class="token property">background</span><span class="token punctuation">:</span>#49BDAD<span class="token punctuation">;</span><span class="token property">color</span><span class="token punctuation">:</span>#ffffff<span class="token punctuation">;</span><span class="token property">border-radius</span><span class="token punctuation">:</span> 0 0 10px 10px <span class="token punctuation">;</span><span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token function">-moz-linear-gradient</span><span class="token punctuation">(</span>0deg<span class="token punctuation">,</span> <span class="token function">rgb</span><span class="token punctuation">(</span>67<span class="token punctuation">,</span> 198<span class="token punctuation">,</span> 184<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">rgb</span><span class="token punctuation">(</span>255<span class="token punctuation">,</span> 209<span class="token punctuation">,</span> 244<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token function">-webkit-linear-gradient</span><span class="token punctuation">(</span>0deg<span class="token punctuation">,</span><span class="token function">rgb</span><span class="token punctuation">(</span>67<span class="token punctuation">,</span> 198<span class="token punctuation">,</span> 184<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">rgb</span><span class="token punctuation">(</span>255<span class="token punctuation">,</span> 209<span class="token punctuation">,</span> 244<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span> 66px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="3-定时唤醒任务"><a href="#3-定时唤醒任务" class="headerlink" title="3.定时唤醒任务"></a>3.定时唤醒任务</h2><blockquote><p>cron表达式采用的是UTC-0时间。</p></blockquote><p><del>定时访问唤醒的Cron表达式可以写成：(已失效)</del></p><pre class="line-numbers language-cron" data-language="cron"><code class="language-cron">0 */30 7-23 * * ?<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>补发邮件可以写成：</p><pre class="line-numbers language-cron" data-language="cron"><code class="language-cron">0 0 23 * * ?<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这个唤醒方法由于leancloud限流被禁止了，以下是新方法：</p><p><a href="https://www.antmoe.com/posts/ff6aef7b/">https://www.antmoe.com/posts/ff6aef7b/</a></p><p>我使用的是UptimeRobot定时访问valine-admin后台，配合每日检查补发函数可以覆盖大多数时间且不会长时间遗漏。</p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习心得 </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>matery下代码高亮插件解决方案</title>
      <link href="posts/7255f3e0/"/>
      <url>posts/7255f3e0/</url>
      
        <content type="html"><![CDATA[<h1 id="matery下代码高亮插件解决方案"><a href="#matery下代码高亮插件解决方案" class="headerlink" title="matery下代码高亮插件解决方案"></a>matery下代码高亮插件解决方案</h1><blockquote><p>我的prism_plugin插件装了有bug不显示，故使用prismjs方案。</p></blockquote><h2 id="1-首先检查冲突"><a href="#1-首先检查冲突" class="headerlink" title="1.首先检查冲突"></a>1.首先检查冲突</h2><p>如果装了prism_plugin插件请卸载：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> uninstall -S hexo-prism-plugin<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="2-配置"><a href="#2-配置" class="headerlink" title="2.配置"></a>2.配置</h2><p>打开根目录下的<code>_config.yml</code>文件，禁用highlight：</p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml">highlight:  enable: false<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>然后启用prismjs：</p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml">prismjs:  enable: true  preprocess: true  line_number: true  tab_replace: ''<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-下载自定义js和css文件"><a href="#3-下载自定义js和css文件" class="headerlink" title="3.下载自定义js和css文件"></a>3.下载自定义js和css文件</h2><p>自定义可以使用官方下载地址：<a href="https://prismjs.com/download.html">https://prismjs.com/download.html</a></p><p>常用java技术栈和前端等可以用<a href="https://gaattc.lanzoui.com/is2Qcily2wh">我的配置</a>  &lt;- 点击下载</p><h2 id="4-手动安装"><a href="#4-手动安装" class="headerlink" title="4.手动安装"></a>4.手动安装</h2><p>把下载的<code>prism.js</code>、<code>prism.css</code>放置到 <code>hexo\themes\hexo-theme-matery-master\source\js\prism</code> 目录下，没有就mkdir，即</p><pre class="line-numbers language-none"><code class="language-none">hexo\themes\hexo-theme-matery-master\source\js\prismprism.jshexo\themes\hexo-theme-matery-master\source\js\prismprism.css<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="5-js配置"><a href="#5-js配置" class="headerlink" title="5.js配置"></a>5.js配置</h2><p>在目录<code>hexo\themes\hexo-theme-matery-master\layout\_partial</code>下的head.ejs文件中添加代码：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>link rel<span class="token operator">=</span><span class="token string">"stylesheet"</span> href<span class="token operator">=</span><span class="token string">"/js/prism/prism.css"</span><span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><left><img src="/img/image-20201121114943495.png" alt="image-20201121114943495" style="zoom: 50%;"></left></p><p>然后在相同目录下的footer.ejs中添加以下代码：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"/js/prism/prism.js"</span> async<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><left><img src="/img/image-20201121115217280.png" alt="image-20201121115217280" style="zoom: 67%;"></left></p><h2 id="6-hexo配置"><a href="#6-hexo配置" class="headerlink" title="6.hexo配置"></a>6.hexo配置</h2><p>在根目录下的<code>_config.yml</code>文件，添加以下配置：</p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml">prismjs:  enable: true  preprocess: true  line_number: true  tab_replace: ''marked:  langPrefix: line-numbers language-<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7-效果"><a href="#7-效果" class="headerlink" title="7.效果"></a>7.效果</h2><blockquote><p>我使用的是TOMORROW NIGHT主题，在java语言下的效果</p></blockquote><p><left><img src="/img/image-20201121120052274.png" alt="image-20201121120052274" style="zoom:50%;"></left></p><h2 id="8-更新：如果没效果要检查是否安装了hexo-inject"><a href="#8-更新：如果没效果要检查是否安装了hexo-inject" class="headerlink" title="8.更新：如果没效果要检查是否安装了hexo-inject"></a>8.更新：如果没效果要检查是否安装了hexo-inject</h2><p>在根目录下的package.json文件中看看有没有<code>"hexo-inject": "^1.0.0"</code>这一项，没有则需要安装：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> i hexo-inject -s<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习心得 </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HEXO之live2d插件</title>
      <link href="posts/b7997eb8/"/>
      <url>posts/b7997eb8/</url>
      
        <content type="html"><![CDATA[<h1 id="HEXO之live2d插件"><a href="#HEXO之live2d插件" class="headerlink" title="HEXO之live2d插件"></a>HEXO之live2d插件</h1><h2 id="1-参考链接"><a href="#1-参考链接" class="headerlink" title="1.参考链接"></a>1.参考链接</h2><p>官方：<a href="https://www.npmjs.com/package/hexo-helper-live2d">https://www.npmjs.com/package/hexo-helper-live2d</a></p><p>参考：<a href="https://www.jianshu.com/p/3a6342e16e57">https://www.jianshu.com/p/3a6342e16e57</a></p><h2 id="2-安装插件"><a href="#2-安装插件" class="headerlink" title="2.安装插件"></a>2.安装插件</h2><p>首先检查博客主目录下面的  <code>package.json</code>里是否有<code>"hexo-helper-live2d": "^3.0.3",</code>依赖，有的话可以先卸载，使用命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> uninstall hexo-helper-live2d<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>之后再安装：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> --save hexo-helper-live2d<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="3-挑选模型"><a href="#3-挑选模型" class="headerlink" title="3.挑选模型"></a>3.挑选模型</h2><p><a href="https://gaattc.lanzoui.com/i3lrbilvkej">模型下载</a></p><p>解压后packages里每个文件夹是一个模型，挑选需要的复制到hexo根目录下<code>/node_modules</code>中。</p><p><a href="https://blog.csdn.net/wang_123_zy/article/details/87181892">模型预览</a></p><h2 id="4-更改配置"><a href="#4-更改配置" class="headerlink" title="4.更改配置"></a>4.更改配置</h2><p>hexo根目录的_config.yml中配置live2d。</p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml">live2d:  enable: true  scriptFrom: local  pluginRootPath: live2dw/  pluginJsPath: lib/  pluginModelPath: assets/  tagMode: false  debug: false  model:    use: live2d-widget-model-tororo #改为自己需要的  display:    position: right    width: 150    height: 300  mobile:    show: true #移动端是否开启  react:    opacity: 0.7<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-live2d与不蒜子冲突的解决"><a href="#5-live2d与不蒜子冲突的解决" class="headerlink" title="5.live2d与不蒜子冲突的解决"></a>5.live2d与不蒜子冲突的解决</h2><p><strong>不解决将导致显示问题和hexo clean后live2d模型丢失问题！！</strong></p><p>参考：<a href="https://github.com/blinkfox/hexo-theme-matery/issues/458">https://github.com/blinkfox/hexo-theme-matery/issues/458</a></p><p><left><img src="/img/Snipaste_2020-11-17_19-03-50.jpg" style="zoom:67%;"></left></p><p>不蒜子js文件目录：</p><pre class="line-numbers language-none"><code class="language-none">hexo\themes\hexo-theme-matery-master\source\libs\others\busuanzi.pure.mini.js<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>大佬提供的代码：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> bszCaller<span class="token punctuation">,</span>bszTag<span class="token punctuation">;</span><span class="token operator">!</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">var</span> c<span class="token punctuation">,</span>d<span class="token punctuation">,</span>e<span class="token punctuation">,</span>a<span class="token operator">=</span><span class="token operator">!</span><span class="token number">1</span><span class="token punctuation">,</span>b<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function-variable function">ready</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">c</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> a<span class="token operator">||</span><span class="token string">"interactive"</span><span class="token operator">===</span>document<span class="token punctuation">.</span>readyState<span class="token operator">||</span><span class="token string">"complete"</span><span class="token operator">===</span>document<span class="token punctuation">.</span>readyState<span class="token operator">?</span><span class="token function">c</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token operator">:</span>b<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token function">c</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token function-variable function">d</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> a<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>c<span class="token operator">=</span>b<span class="token punctuation">.</span>length<span class="token punctuation">;</span>c<span class="token operator">&gt;</span>a<span class="token punctuation">;</span>a<span class="token operator">++</span><span class="token punctuation">)</span>b<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">;</span>b<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token function-variable function">e</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>a<span class="token operator">||</span><span class="token punctuation">(</span>a<span class="token operator">=</span><span class="token operator">!</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token function">d</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>window<span class="token punctuation">)</span><span class="token punctuation">,</span>document<span class="token punctuation">.</span>removeEventListener<span class="token operator">?</span>document<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">"DOMContentLoaded"</span><span class="token punctuation">,</span>e<span class="token punctuation">,</span><span class="token operator">!</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">:</span>document<span class="token punctuation">.</span>attachEvent<span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">detachEvent</span><span class="token punctuation">(</span><span class="token string">"onreadystatechange"</span><span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">,</span>window<span class="token operator">==</span>window<span class="token punctuation">.</span>top<span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span><span class="token function">clearInterval</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">,</span>c<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>document<span class="token punctuation">.</span>addEventListener<span class="token operator">?</span>document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"DOMContentLoaded"</span><span class="token punctuation">,</span>e<span class="token punctuation">,</span><span class="token operator">!</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">:</span>document<span class="token punctuation">.</span>attachEvent<span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">attachEvent</span><span class="token punctuation">(</span><span class="token string">"onreadystatechange"</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">loaded|complete</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span>readyState<span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token function">e</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>window<span class="token operator">==</span>window<span class="token punctuation">.</span>top<span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>c<span class="token operator">=</span><span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">try</span><span class="token punctuation">{</span>a<span class="token operator">||</span>document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span><span class="token function">doScroll</span><span class="token punctuation">(</span><span class="token string">"left"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span><span class="token punctuation">}</span><span class="token function">e</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>bszCaller<span class="token operator">=</span><span class="token punctuation">{</span><span class="token function-variable function">fetch</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">var</span> c<span class="token operator">=</span><span class="token string">"BusuanziCallback_"</span><span class="token operator">+</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token number">1099511627776</span><span class="token operator">*</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>window<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token operator">=</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">evalCall</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">,</span>a<span class="token operator">=</span>a<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"=BusuanziCallback"</span><span class="token punctuation">,</span><span class="token string">"="</span><span class="token operator">+</span>c<span class="token punctuation">)</span><span class="token punctuation">,</span>scriptTag<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"SCRIPT"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>scriptTag<span class="token punctuation">.</span>type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token punctuation">,</span>scriptTag<span class="token punctuation">.</span>defer<span class="token operator">=</span><span class="token operator">!</span><span class="token number">0</span><span class="token punctuation">,</span>scriptTag<span class="token punctuation">.</span>src<span class="token operator">=</span>a<span class="token punctuation">,</span>document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">"HEAD"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>scriptTag<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token function-variable function">evalCall</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">b</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">try</span><span class="token punctuation">{</span><span class="token function">a</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">,</span>scriptTag<span class="token punctuation">.</span>parentElement<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>scriptTag<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">{</span>bszTag<span class="token punctuation">.</span><span class="token function">hides</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span>bszCaller<span class="token punctuation">.</span><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">"//busuanzi.ibruce.info/busuanzi?jsonpCallback=BusuanziCallback"</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span><span class="token punctuation">{</span>bszTag<span class="token punctuation">.</span><span class="token function">texts</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span>bszTag<span class="token punctuation">.</span><span class="token function">shows</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>bszTag<span class="token operator">=</span><span class="token punctuation">{</span>bszs<span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">"site_pv"</span><span class="token punctuation">,</span><span class="token string">"page_pv"</span><span class="token punctuation">,</span><span class="token string">"site_uv"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token function-variable function">texts</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>bszs<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">b</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">var</span> c<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"busuanzi_value_"</span><span class="token operator">+</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>c<span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>innerHTML<span class="token operator">=</span>a<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token function-variable function">hides</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>bszs<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">var</span> b<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"busuanzi_container_"</span><span class="token operator">+</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>b<span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token function-variable function">shows</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>bszs<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">var</span> b<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"busuanzi_container_"</span><span class="token operator">+</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>b<span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display<span class="token operator">=</span><span class="token string">"inline"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习心得 </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>英灵殿:从入门到熔化</title>
      <link href="posts/bfdc8b65/"/>
      <url>posts/bfdc8b65/</url>
      
        <content type="html"><![CDATA[<h1 id="私人定制英灵殿攻略"><a href="#私人定制英灵殿攻略" class="headerlink" title="私人定制英灵殿攻略"></a>私人定制英灵殿攻略</h1><h2 id="1-资源准备"><a href="#1-资源准备" class="headerlink" title="1.资源准备"></a>1.资源准备</h2><p>uplay又又又初始化登不上了 -&gt; 连手机热点 -&gt; 登录成功 -&gt; 开始下载</p><p><left><img src="/img/jfjgyjgy.png" alt="" style="zoom: 33%;"><br>-&gt; ？？？ -&gt; 加速器启动 -&gt; 下载完成！</left></p><h2 id="2-错误用法"><a href="#2-错误用法" class="headerlink" title="2.错误用法"></a>2.错误用法</h2><p><left><img src="/img/fthfthftxh.png" alt="" style="zoom: 25%;"></left></p><p>好家伙，卡住了，强行让我欣赏amd大法，这一定是阴谋，强行关闭！</p><h2 id="3-重新启动"><a href="#3-重新启动" class="headerlink" title="3.重新启动"></a>3.重新启动</h2><p>顺利进入，先测试一下老1060是否还能老当益壮：</p><p><left><img src="/img/hftxjfxj.jpg" style="zoom:25%;"><br><left><img src="/img/hfthxfth.jpg" alt="" style="zoom:25%;"></left></left></p><p>啊这，一定是驱动没更新的锅</p><h2 id="4-驱动更新"><a href="#4-驱动更新" class="headerlink" title="4.驱动更新"></a>4.驱动更新</h2><p><img src="/img/gkjdrtd.png"></p><img src="/img/khdggd.png" alt="" style="zoom: 25%;"><p>调个低配总可以吧</p><h2 id="5-启动！"><a href="#5-启动！" class="headerlink" title="5.启动！"></a>5.启动！</h2><p><img src="/img/Snipaste_2020-11-18_18-38-46.jpg"></p><h2 id="6-愉快游玩"><a href="#6-愉快游玩" class="headerlink" title="6.愉快游玩"></a>6.愉快游玩</h2><p><left><img src="/img/wjfj.jpg" alt="" style="zoom: 25%;"></left></p><p>哇60帧，针不戳</p><h2 id="7-？"><a href="#7-？" class="headerlink" title="7.？"></a>7.？</h2><p><left><img src="/img/hxgzrhd.jpg" alt="" style="zoom: 25%;"><br><left><img src="/img/hfthfth.jpg" alt="" style="zoom: 25%;"></left></left></p><p>本本已经长大了，学会自己过热保护了。</p><h2 id="8-垃圾分类，从我做起"><a href="#8-垃圾分类，从我做起" class="headerlink" title="8.垃圾分类，从我做起"></a>8.垃圾分类，从我做起</h2><p><left><img src="/img/Snipaste_2020-11-18_18-39-37.jpg" alt="" style="zoom: 50%;"><br><left><img src="/img/Snipaste_2020-11-18_18-38-57.jpg" alt="" style="zoom: 100%;"></left></left></p><h2 id="9-感想"><a href="#9-感想" class="headerlink" title="9.感想"></a>9.感想</h2><p>我一定耗子尾汁，好好反思，以后不要再犯这样的聪明(指玩游戏)。</p><p>或许。。。有一天可以买台新电脑换掉奋战三年的kp2。</p><hr><h2 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h2><p>终于，在新的一年里换了新的生产力rog魔霸新锐，让我们再来测一测英灵殿吧：</p><p><img src="/img/Valhalla.png" alt="Valhalla测试"></p><p>画质开高不是问题了，更令人振奋的是跑下来cpu和显卡温度只有70左右，我可以了。</p>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
          <category> 记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 游戏 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>🔒走出宿舍拥抱美好</title>
      <link href="posts/836f02e2/"/>
      <url>posts/836f02e2/</url>
      
        <content type="html"><![CDATA[<h1 id="走出宿舍拥抱美好"><a href="#走出宿舍拥抱美好" class="headerlink" title="走出宿舍拥抱美好"></a>走出宿舍拥抱美好</h1><p>​    现在已经来到了11月18日，距离考研就剩三十多天了。<br>​    我们宿舍四个人的道路都各不相同或者说大相径庭：</p><ul><li>一位大学认真学习了三年的，现在参加新加坡的留学项目，去苏州上一年“预科”学英语了</li><li>一位准备跨考的，已经持续自律学习形成了习惯，考研一定是胜券在握了</li><li>我呢就更不同了，10月秋招转行完签约然后现在日常自己学一学，这两天弄博客废寝忘食hh</li><li>最后一位是今天的主角了，他和我一样平时的机械不怎么用心学，但是却要考研机械，从开学到现在天天打游戏下棋几乎没见他复习过？然后就是日常在宿舍大声和npy打电话时不时炫耀。</li></ul><p>​    要不是这两天弄博客呆在宿舍没去图书馆，就不会有这篇感想了。我主要想表达的是宿舍如何让一个人堕落的，我对他的未来感到担忧，对他的现状感到惋惜，对他的喧嚣感到无奈。反正这篇文章也没人会看，之前有提醒过他现在不好意思再次提醒的我，就在此偷偷<del>吐槽</del>记录一下这个现象。</p><p>​    在宿舍这几天我一直在埋头改代码写文章弄图床，而在本该安静宿舍，我却带着耳机还是时常被扰乱，甚至午睡时也会被大声的讲话吵醒，晚上电话声也大的离谱，如入无人之境，我甚至听到了他和npy在说：“我现在考研压力很大”、“我没有天天打游戏”。。。我缓缓打出一个<span class="github-emoji"><span>❓</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2753.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p><p>​    不知道该说他是放得开把宿舍当作自己家呢，还是情商比较低意识不到自己打扰他人呢，还是故意大声说话炫耀自己的npy呢?不过也可能宿舍本该如此，只是我对环境的要求太高了。</p><p>​    很奇怪很矛盾的一个人物，比如：</p><pre class="line-numbers language-自然语言" data-language="自然语言"><code class="language-自然语言">他这学期没钱吃饭了天天吃泡面，却买了iphone12、airpotspro等(虽然我喜欢及时消费的思想，但不提倡透支消费和拆墙补墙式)一有考研网上报名身份认证之类的消息就急忙打听，但打电话嘴上却说要准备二战了，行动上也毫无复习痕迹明知道另一个舍友无npy，还故意调侃说：“失恋啦？”，让人很不舒服，不过还好我问另一个舍友并没有放在心上平时还是比较邋遢的，但是每当宿舍有点污点总是第一个跳出来展现自己爱干净的一面公众场合很正常甚至声音都变得正经了，在宿舍却喜欢怪时不时突然怪叫或弄出噪声，我不知道这是宣泄还是展现自己的存在感...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>  吐槽归吐槽，我还是能忍受的，就这样吧，我觉得他也很幸运，分到了我们两个儒雅随和的舍友，再过半年多就毕业了。也许今后的社会上还有更多令人烦恼的事情，这也算是对我的一种锻炼吧<span class="github-emoji"><span>😂</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f602.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>这篇文章一遍过，可能没表达好我的意思，总之我只是自己和自己倾诉一下而没有任何愤怒或怨恨的情感，毕竟有事情放心里总会不好受嘛。</p><p>  引以为戒，我在日常要注意自己的言行举止，我可不想做一个装在套子里的人，不想让别人不舒服，不想做一个虚荣的人。</p><p>​    我从小就很敏感地顾及别人的感受喜欢换位思考，不过也希望大家都能有这样的一份心，才能更融洽更和谐，我所希望的真正推心置腹<del>相敬如宾</del>的关系什么时候才能有啊，真羡慕有那样美好单纯的友谊关系。</p><p>​    所以，其实重点是：从今天开始，我又要回归图书馆了，仅此<del>吐槽</del>纪念一下在宿舍的艰难时光，舍友关系第一，我选择退避三舍以和为贵佛系一点吧(￣▽￣)”</p><img src="/img/-4ab3e96e2aa28730.jpg" style="zoom: 50%;">]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
          <category> 想法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 感想 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大三到现在的经历记录</title>
      <link href="posts/2a470550/"/>
      <url>posts/2a470550/</url>
      
        <content type="html"><![CDATA[<h1 id="记录一下大三到现在的经历"><a href="#记录一下大三到现在的经历" class="headerlink" title="记录一下大三到现在的经历"></a>记录一下大三到现在的经历</h1><p>从机械到IT，重拾自我之路…</p><blockquote><p>记录我的提桶跑路全过程，希望每个人都能从事自己喜欢的工作<span class="github-emoji"><span>🏃</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f3c3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p></blockquote><h2 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h2><p>​    高考后的贪玩和消息闭塞使我误入了机械专业，不过想想主要原因还是因为航空航天的字眼令人景仰，航空报国的情怀深入人心，虽说不能好高骛远，不过后来发现和想象中的航空航天还是有些差距的，这也是原因之一吧。大一学校不让带电脑还好，学习听课还是比较认真，虽然成绩一般般(其实当时对其他课程也没什么兴趣)，但是大一下学期学的计算思维导论、大二上学期学的C++还有公选课的前端课程我都莫名地喜欢，平时的上机作业我总是逃自习一个人在宿舍关着灯开台灯敲代码，也许正是发现了实现自己价值的乐趣吧，相比于当时的工图、力学，枯燥的C++是我沙漠里的一片绿洲，最后甚至其他课很厉害的大佬都跑来让我改bug，我觉得又好像回到了初中高中那样融会贯通又有余力助人为乐的成就喜悦中<span class="github-emoji"><span>😝</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f61d.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>,最后这些课的成绩理所当然是我必修课里最高的~。</p><h2 id="前情提要-2"><a href="#前情提要-2" class="headerlink" title="前情提要 * 2"></a>前情提要 * 2</h2><p>​    到了大二看了知乎等各种劝退贴，再加上同学们也开始转发一些机械的劝退贴和就业数据报告等到班群里吐槽，我才发现有这么多人都是误打误撞进入这个专业的，我开始对机械产生抵触，意识到不想被埋没在这个只有情怀没有生机的行业荒渡一生，也幻想过未来跨考逃出生天，甚至是回高三重读，但又对自己感到无力和无助，心理压力很大，仿佛在一条明知前方是深坑巨险的路上举步维艰却不敢回头，这个时期是我看不到希望的低谷期。<br>​    于是投入到游戏虚拟世界的怀抱，COD、R6、csgo、奥德赛、看门狗、命运2。。。虽有玩物丧志的说法，但现在反观之，我貌似并没有丧，而是经历低谷又重新燃起了斗志。<br>​    很巧的是这时候一位老乡群认识的校友联系了我，她虽然不是我们院的，但又很巧的是我们是同一个C++老师，上机课又在同一个机房，机缘巧合下就和她认识并交流课程的知识。也许我的才能被赏识吧，她们要做一个大创项目，其中需要做一个安卓app开发，想让我加盟团队，我虽然本专业知识学的很菜，但编程还是有信心的，遂加入。而这，正是我和java奇妙缘分的开端。<br>​    我无比感谢这次重要的机会，它是我命运改变的极其偶然又极其重要的一环，因为它，我在大二上学期就开始接触到了java，虽然最后很遗憾的是这个项目很多地方超出我们大二萌新的能力而潦草收尾，安卓应用也没有做成，但我通过mooc学习基础语法倒是打下了基础，让它在我的技术栈中生根发芽。<br>​    </p><h2 id="作出人生重要的抉择"><a href="#作出人生重要的抉择" class="headerlink" title="作出人生重要的抉择"></a>作出人生重要的抉择</h2><blockquote><p>正所谓**<code>选择 &gt; &gt; 努力</code>**，我也用行动做出了自己的选择。</p></blockquote><p>​    大二沉沦了一年到大三，心情有时会很消沉，觉得前途无望，隔行如隔山无法从机械的枷锁中解脱，而且马上要面临考研，必须做出抉择了。当时有两个选择，一个是跨考计算机，一个是直接准备就业转行。可以说有第三条路就是继续考机械，努力向偏电偏软的方向走，做机械电子之类的，这也是班上很多人的想法，可是我觉得太保守了，既然有了方向为何不一步到位做纯软呢，为什么要努力去往别人身上靠呢？班上的保研同学亦是希望研究生可以搞嵌入式已经是万幸之事，而另一方面嵌入式已经是计算机专业所避而远之的领域。眼光决定了脚步，虽然避免不了眼高手低，至少我是稍微看的远了一点点…<br>​    此时我才意识到我是有能力改变命运的，与其去考机械违背自己的意愿，不如放手一搏。<br>​    一开始我是准备跨考的，通过官网、论坛、qq群、学长、考研帮等一切途径了解计算机考研的一切信息，准备好了考本校，大三寒假买好了408和数学英语的资料和书，我也了解到跨考(尤其是20年开始)是多么的难，还是顶着压力复习了一个月，机缘巧合下有人点醒我其实直接就业秋招利用自己的java技能更有优势，我在之前其实不敢想秋招转行的事，不过仔细想想还是比考研相对稳，相比考研的极大不确定性，我在经过心理斗争后决定直接准备秋招转it行业工作。</p><h2 id="题外话"><a href="#题外话" class="headerlink" title="题外话"></a>题外话</h2><p>​    其实如果我当时选择跨考，那么我就不是一个人在战斗了，我的班级上还是有几个和我有相同志向的人，他们选择了跨考:</p><ul><li>一位当时C++挂科，但是后来准备补考时却喜欢上编程的神奇同学</li><li>一位喜欢前端的，对计算机充满兴趣的独特同学</li><li>一位同样对机械无感的，经历了两年斟酌最终选择考自动控制专业的我的舍友</li><li>一位在中国民航也是读机械专业的，准备跨考回西安的我的高中同学</li></ul><p>现在离考研还有一个多月了，真心祝愿他们可以如愿以偿顺利进入生涯的新阶段<span class="github-emoji"><span>😁</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f601.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p><p>另外，在我秋招上岸后班上另一个同学着手准备春招了，不过他最近才开始学C++，虽说知识比java少，不过时间还是很紧张的，希望他可以坚持下去顺利上岸。<span class="github-emoji"><span>💪</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4aa.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p><p>回顾一下孤身为命运斗争的这段时间，有煎熬、孤独、疲惫，也有咬牙坚持、追逐希望、披荆斩棘，虽然身边只有我一个人在战斗，还是跑完了全程、抵达终点，就像长跑完的神奇体验，没有疲惫不堪，而是成就感满满。</p><h2 id="秋招的准备"><a href="#秋招的准备" class="headerlink" title="秋招的准备"></a>秋招的准备</h2><p>​    大三下学期遇上了疫情，只能在家里上课，有一说一这是我的人生转折点，即使机械的课程非常多，就算是线上这学期我们不仅课多考试多还要做很多实验和两个课设，不过还好这些都挺过来了。在决定秋招之后，又面临一个选择，就是语言方向是java还是c++或者py，参考了很多学长和其他人的经验我最终决定主攻java，原因简单来说对于非科班的我只有java相比本专业的学生更有优势。(因为计算机专业本科java是作为选修的，不过出我意料的是秋招我的对手大都是研究生了<span class="github-emoji"><span>😢</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f622.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>)<br>​    得益于在家上课一学期，没有学校的考勤监管压力，我才能专心于java的系统学习，虽然之前有点基础我还是从头开始系统学习了一遍，上了王道的线上网课，又通过B站、书籍、各种博客、牛客等途径辅助学习(尤其感谢<code>王道</code>和<code>牛客</code>，帮助了我太多<span class="github-emoji"><span>❤</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2764.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>)。从刚开始的javase，到集合框架、数据结构、操作系统、计网，jvm，mysql，还学了学javaee写了个纯Servlet的项目哈哈虽然没啥用，后面又学了ssm框架以及一点微服务和中间件等，本来想把分布式微服务彻底搞熟悉再找工作，可惜这个时候时间已经来到了9月，秋招已经开始后一个月了，简历上这块也只写了了解~面试官也没问过<span class="github-emoji"><span>😝</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f61d.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>不过我这废弃忘食的努力换来了良好的基础，也是很值得的。<br>​    有一点小遗憾就是我算法题刷的少了，《剑指offer》都没看完哈哈，不过机智的我还是a了很多笔试题的。<br>​    开学学校还有一堆事情耽搁了挺多时间，这个时候已经到了9月快中旬了，我匆忙在网上下载简历模板写好，照片甚至都没去照，用手机拍了张然后ps把头像扣出来贴到简历上。</p><h2 id="投递开始！"><a href="#投递开始！" class="headerlink" title="投递开始！"></a>投递开始！</h2><p>​    接下来开始投递，一开始在牛客上的校招合集里投，基本都是中厂以上，投简历也要填很多东西还是很麻烦的，尽管这样我还是每天坚持投很多。<br>​    过了几天，逐渐开始有笔试和评测邀请了，开始做性格评测和笔试，虽说非常耗费时间，我每天差不多做两个笔试，还有很多时间冲突的没做，当时学校还做了两周金工实习，还是在另一个校区，六点起床坐校车去金工实习，白天看手机复习知识，晚上坐校车回来食堂把饭打包回来做笔试，八九点写完笔试吃饭然后继续复习到深夜，深切感受到时间的飞逝和更多时间的渴望，有被自己感动到(/▽＼)<br>​    后来又在各种渠道继续投递，还下载了boss，拉钩，在学校就业网投，<del>甚至逃金工实习跑去学校宣讲会</del>。努力的回报是，逐渐有笔试通过了，我面了第一家是电话面，竟然问题都答了上来，给了我很大的信心，一有空就在牛客上刷刷面经，给自己模拟面试，吃饭时候都不停的。<br>​    好像九月底那会，有几个现场面的，坐地铁倒来倒去，到现场与面试官切磋，不过总体感觉现场比视频面更友好，但是有些要手撕代码或者手撕sql，现场难免紧张。</p><blockquote><p>大概是以下这些，太多时间冲突的了真的可惜，不过好在还是幸运地拿了几个offer：</p></blockquote><p><img src="/img/%E7%A7%8B%E6%8B%9B%E8%AE%B0%E5%BD%95.jpg" alt="秋招记录"></p><h2 id="收尾总结"><a href="#收尾总结" class="headerlink" title="收尾总结"></a>收尾总结</h2><p>​    每一次面试我都没录音，但是自己竟然能凭借记忆写出来几十分钟完整的面经，可以说又发掘出自己的潜力了,总得来说，秋招还算顺利，虽然我九月中旬才开始已经很晚了，面试过程中也遇到了各种面试官，有大厂非常看中基础的，有外包却问的很难很深刁难的，有非互联网公司面试很水的。<br>​    目前收到了几个offer，不过有一个比较满意的，而且965wlb，只招92的学生，技术氛围应该不错，那当然稍微犹豫一小下就签了，虽然还低于牛客投票的中位数不少，不过对于非科班本科来说已经非常满足了，知足常乐脚踏实地才是真<span class="github-emoji"><span>💁♂</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f481-2642.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p><img src="/img/image-20201128104941978.png" alt="" style="zoom: 67%;"><h2 id="面经"><a href="#面经" class="headerlink" title="面经"></a>面经</h2><p>​    中电海康、端点科技、中孚信息这几个没有回忆面经，其他基本上算比较完整的回忆面经了：</p><p>​    <a herf="https://www.nowcoder.com/profile/114433629/myDiscussPost"><font face="黑体" size="5">传送门</font></a></p><h2 id="牛客-amp-牛友"><a href="#牛客-amp-牛友" class="headerlink" title="牛客&amp;牛友"></a>牛客&amp;牛友</h2><p>​    可以说牛客是我秋招最重要的伙伴之一，从学习到刷题再到看面经写面经看讨论贴等等，后来抽奖还抽到了牛客抱枕和卫衣，真的i了<span class="github-emoji"><span>❤</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2764.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>，我在大部分面试完基本都会回忆着写写面经，发布到牛客上回报牛客平台和众多共享交流秋招经验知识技术的牛友们，在牛客我结识了很多同届人，甚至还认识了两个同样是非科班的研究生校友，有一个是机械研究生，表示他们研究生做实验用的java，另一个理学院大佬在巨大竞争中闯进了算法岗，他们同样凭借自己的努力秋招上岸，也祝他们入职工作顺利。</p><h2 id="题外话-2"><a href="#题外话-2" class="headerlink" title="题外话 * 2"></a>题外话 * 2</h2><p>​    可惜的是同班去机械岗位的同学工资少于我的一半多还要加班(悄悄炫耀一下嘿嘿，反正也没人看到)，确实让人很心疼，不过我尝试劝说却没有一个人有和我一样直接转行的想法，我很不解他们的想法，不过或许他们也不解我都想法吧~谈论一些问题时，同学们表示并没有像我这样的兴趣，他们学了C++也没有什么感觉，甚至对整个it行业的认知是模糊的，比如他们：</p><ul><li><p>认为计算机二级都没过怎么可能转行it(然鹅二级说实话真的没有什么用，我自己就没去考)</p></li><li><p>自己的电脑打理的很乱，什么东西都往桌面放、c盘装，装多个杀毒软件/浏览器/播放器，日常乱下软件出小问题，分不清磁盘分区是什么意思等等。。(我倒是从小就喜欢折腾电脑，文件软件分类归档还是很干净的~然后日常帮同学修电脑装软件😅)</p></li><li><p>认为从事it就会头秃(我真是哭笑不得，都大学生了还有人信这个233反正我是要好好保护头发的！)</p></li></ul><p>​    每当这时我才意识到从小就对电脑产生浓厚兴趣的我，并不是浪费了很多时间不务正业，而是内心的一颗种子在生根发芽，才让我变得有那么一些与众不同，虽然花费大量时间在电脑上使我高考些许低了几分，还是感谢那一段经历，怀念那一段时光。<br>​    也罢，每个人都有自己的选择，真正热爱机械，努力为祖国的制造业作出贡献也是很好的。总之还是那句话，希望每个人都做自己喜欢的就好了。</p><h2 id="未来的展望"><a href="#未来的展望" class="headerlink" title="未来的展望"></a>未来的展望</h2><p>​    可怜的机械人大四还有课，考试要12月了，所以最近不能提前去实习，目前就好好把大四课程修完，毕竟是与机械最后的瓜葛了~要说后悔选机械其实也不后悔，它给我上了大学甚至是人生中重要的一课，让我找到了自己喜欢的事情和展现自身才能实现自己价值的方向，让我学会了感恩，意识到自己还是幸运的，也许在将来还会持续地鞭策我向前，总之，每个事情都是一种体验，都有它的价值，<code>只有经历没有对错</code>就是最好的诠释。<br>​    这两天折腾博客也学习了挺多前端知识，用markdown写作也极其舒适，这么有意义的事情当然要继续维护下去呀。近期的打算就是先把学校的课上完考试，然后把《effective java》、《深入理解java虚拟机》、《mysql技术内幕：innodb存储引擎》在毕业前看完，期间去公司实习考核，回来等毕业<span class="github-emoji"><span>😛</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f61b.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p><h2 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h2><p>​    当时面试时一个面试官说他读研出来并不如当初直接就业的大学同学，另一家公司的面试官道本科和研究生的差距并不大，还有一家的hr说硕士比较比我们本科多读了三年，必然比本科生强，大学班主任在班会上说他们那届计算机学生出去工作的也只有学的最好的一部分人混得好…关于读研还是工作，每个人都有自己的解读，无论是好是坏都是一个有意义的选择和尝试。</p><p>​    放弃考研的抉择是内心经历无比艰难才作出的，世事无常瞬息万变，这个选择是对是错只能交给时间去解答。</p><hr><h2 id="12-1更新"><a href="#12-1更新" class="headerlink" title="12.1更新"></a>12.1更新</h2><p>​    本来运满满刚发了offer还在纠结到底选运满满还是帆软呢，结果帆软偷袭涨薪2.5k，这下差距拉很大了，我也可以在上面投票里又上一层台阶了(狂喜ing)。</p><img src="/img/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20201201121606.jpg" alt="突袭涨薪.jpg" style="zoom: 33%;"><p>不过呢，考核还是很严峻的，这一关不过一切都是梦里的，看到有人在劝退难免有点慌，不过走到这一步了，一定要拼到底才行呀。</p><img src="/img/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20201201121616.jpg" alt="劝退人在劝退" style="zoom:33%;">]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
          <category> 记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 经历 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TODO</title>
      <link href="posts/6c9b5b14/"/>
      <url>posts/6c9b5b14/</url>
      
        <content type="html"><![CDATA[<h1 id="TODO"><a href="#TODO" class="headerlink" title="TODO"></a>TODO</h1><h2 id="一、hexo相关"><a href="#一、hexo相关" class="headerlink" title="一、hexo相关"></a>一、hexo相关</h2><ul><li><input checked="" disabled="" type="checkbox"> 【bug】：hexo每日诗词无法显示</li><li><input checked="" disabled="" type="checkbox"> <del>【bug】：matery二级分类无效</del></li><li><input checked="" disabled="" type="checkbox"> <del>【bug】：代码高亮无效</del></li><li><input checked="" disabled="" type="checkbox"> <del>【bug】：$ hexo clean 后live2d被删除(不知道怎么就好了)</del></li><li><input checked="" disabled="" type="checkbox"> <del>【bug】文章阅读次数不显示</del></li><li><input checked="" disabled="" type="checkbox"> <del>文章背景透明度</del></li><li><input disabled="" type="checkbox"> js异步加载优化</li><li><input disabled="" type="checkbox"> fontawesome的fab图标移动端不显示</li></ul><h2 id="二、乱学点东西"><a href="#二、乱学点东西" class="headerlink" title="二、乱学点东西"></a>二、乱学点东西</h2><ul><li><input checked="" disabled="" type="checkbox"> <del>fontawesome基本用法(v5.1)</del></li><li><input checked="" disabled="" type="checkbox"> <del>markdown高级用法</del></li></ul><h2 id="三、日程安排"><a href="#三、日程安排" class="headerlink" title="三、日程安排"></a>三、日程安排</h2><ul><li><input disabled="" type="checkbox"> 看毕设</li></ul><h2 id="四、优化"><a href="#四、优化" class="headerlink" title="四、优化"></a>四、优化</h2><ul><li><input disabled="" type="checkbox"> 找到彻底禁用chrome的SoftwareReportTool的办法！！！</li></ul>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
          <category> todo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> todo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>algorithm</title>
      <link href="posts/9505ccb9/"/>
      <url>posts/9505ccb9/</url>
      
        <content type="html"><![CDATA[<h1 id="algorithm"><a href="#algorithm" class="headerlink" title="algorithm"></a>algorithm</h1><blockquote><p>过去半年中做的屈指可数的easy题hhh</p></blockquote><h2 id="1-二维数组中的查找-数组"><a href="#1-二维数组中的查找-数组" class="headerlink" title="1.二维数组中的查找(数组)"></a>1.二维数组中的查找(数组)</h2><p><strong>题目描述</strong></p><p>在一个二维数组中（每个一维数组的长度相同），每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token class-name">Find</span><span class="token punctuation">(</span><span class="token keyword">int</span> target<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> row <span class="token operator">=</span> array<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> column <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>row <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> column <span class="token operator">&lt;</span> array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>column<span class="token punctuation">]</span> <span class="token operator">&gt;</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>                row<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>column<span class="token punctuation">]</span> <span class="token operator">&lt;</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>                column<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-字符串替换空格-StringBuilder"><a href="#2-字符串替换空格-StringBuilder" class="headerlink" title="2.字符串替换空格(StringBuilder)"></a>2.字符串替换空格(StringBuilder)</h2><p><strong>题目描述</strong></p><p>请实现一个函数，将一个字符串中的每个空格替换成“%20”。例如，当字符串为We Are Happy.则经过替换之后的字符串为We%20Are%20Happy。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">replaceSpace</span><span class="token punctuation">(</span><span class="token class-name">StringBuffer</span> str<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">StringBuilder</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">char</span> c <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token string">' '</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"%20"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-从尾到头打印链表-栈"><a href="#3-从尾到头打印链表-栈" class="headerlink" title="3.从尾到头打印链表(栈)"></a>3.从尾到头打印链表(栈)</h2><p><strong>题目描述</strong></p><p>输入一个链表，按链表从尾到头的顺序返回一个ArrayList。</p><h3 id="1-栈实现"><a href="#1-栈实现" class="headerlink" title="(1)栈实现"></a>(1)栈实现</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> <span class="token function">printListFromTailToHead</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> listNode<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>listNode <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            s<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>listNode<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>            listNode <span class="token operator">=</span> listNode<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>s<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            arr<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> arr<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-递归实现"><a href="#2-递归实现" class="headerlink" title="(2)递归实现"></a>(2)递归实现</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> <span class="token function">printListFromTailToHead</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> listNode<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">recurcive</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> listNode<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> arr<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">recurcive</span><span class="token punctuation">(</span><span class="token class-name">ArrayList</span> arr<span class="token punctuation">,</span> <span class="token class-name">ListNode</span> listNode<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>listNode <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">recurcive</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> listNode<span class="token punctuation">.</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>            arr<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>listNode<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-重建二叉树-递归"><a href="#4-重建二叉树-递归" class="headerlink" title="4.重建二叉树(递归)"></a>4.重建二叉树(递归)</h2><p><strong>题目描述</strong></p><p>输入某二叉树的前序遍历和中序遍历的结果，请重建出该二叉树。假设输入的前序遍历和中序遍历的结果中都不含重复的数字。例如输入前序遍历序列{1,2,4,7,3,5,6,8}和中序遍历序列{4,7,2,1,5,3,8,6}，则重建二叉树并返回。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">TreeNode</span> <span class="token function">reConstructBinaryTree</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> pre<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> in<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>pre<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> in<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">TreeNode</span> root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span>pre<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> in<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>in<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> pre<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                root<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token function">reConstructBinaryTree</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">copyOfRange</span><span class="token punctuation">(</span>pre<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>in<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                root<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token function">reConstructBinaryTree</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">copyOfRange</span><span class="token punctuation">(</span>pre<span class="token punctuation">,</span><span class="token number">1</span> <span class="token operator">+</span> i<span class="token punctuation">,</span>pre<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">copyOfRange</span><span class="token punctuation">(</span>in<span class="token punctuation">,</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>in<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> root<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-两数之和-HashMap"><a href="#5-两数之和-HashMap" class="headerlink" title="5.两数之和(HashMap)"></a>5.两数之和(HashMap)</h2><p><strong>题目描述</strong></p><p>给出一个整数数组，请在数组中找出两个加起来等于目标值的数，你给出的函数twoSum 需要返回这两个数字的下标（index1，index2），需要满足 index1 小于index2.。注意：下标是从1开始的，假设给出的数组中只存在唯一解</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token comment">/**     * @param numbers int整型一维数组      * @param target int整型      * @return int整型一维数组     */</span><span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> twoSum <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> numbers<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> hm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> numbers<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>hm<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>target <span class="token operator">-</span> numbers<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            result<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> hm<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target <span class="token operator">-</span> numbers<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            result<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> result<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>           hm<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>numbers<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>     <span class="token punctuation">}</span>     <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-最长不重复子串-动态窗口法"><a href="#6-最长不重复子串-动态窗口法" class="headerlink" title="6.最长不重复子串(动态窗口法)"></a>6.最长不重复子串(动态窗口法)</h2><p><strong>题目描述</strong></p><p>给定一个字符串，找出最长的不具有重复字符的子串的长度。例如，“abcabcbb”不具有重复字符的最长子串是“abc”，长度为3。对于“bbbbb”，最长的不具有重复字符的子串是“b”，长度为1。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token comment">/**     * @param s string字符串      * @return int整型     */</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> lengthOfLongestSubstring <span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>s <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> max <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> lastChar <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Character</span><span class="token punctuation">,</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> hm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">char</span> next <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>hm<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>next<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                lastChar <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>lastChar<span class="token punctuation">,</span> hm<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>next<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            hm<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>next<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            max <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>max<span class="token punctuation">,</span> i <span class="token operator">-</span> lastChar <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> max<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7-用栈实现队列-栈-amp-队列"><a href="#7-用栈实现队列-栈-amp-队列" class="headerlink" title="7.用栈实现队列(栈&amp;队列)"></a>7.用栈实现队列(栈&amp;队列)</h2><p><strong>题目描述</strong></p><p>用两个栈来实现一个队列，完成队列的Push和Pop操作。 队列中的元素为int类型。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Stack</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> stack1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> stack2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">int</span> node<span class="token punctuation">)</span> <span class="token punctuation">{</span>        stack1<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>stack2<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>stack1<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                stack2<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>stack1<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> stack2<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="8-斐波那契数列-循环优于递归"><a href="#8-斐波那契数列-循环优于递归" class="headerlink" title="8.斐波那契数列(循环优于递归)"></a>8.斐波那契数列(循环优于递归)</h2><p><strong>题目描述</strong></p><p>大家都知道斐波那契数列，现在要求输入一个整数n，请你输出斐波那契数列的第n项（从0开始，第0项为0，第1项是1）。n&lt;=39</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token class-name">Fibonacci</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"illegal index:"</span> <span class="token operator">+</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> n<span class="token punctuation">;</span>        <span class="token punctuation">}</span>                <span class="token keyword">int</span> small <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> big <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            result <span class="token operator">=</span> small <span class="token operator">+</span> big<span class="token punctuation">;</span>            small <span class="token operator">=</span> big<span class="token punctuation">;</span>            big <span class="token operator">=</span> result<span class="token punctuation">;</span>        <span class="token punctuation">}</span>                <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="9-跳台阶-递归"><a href="#9-跳台阶-递归" class="headerlink" title="9.跳台阶(递归)"></a>9.跳台阶(递归)</h2><p><strong>题目描述</strong></p><p>一只青蛙一次可以跳上1级台阶，也可以跳上2级。求该青蛙跳上一个n级的台阶总共有多少种跳法（先后次序不同算不同的结果）。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token class-name">JumpFloor</span><span class="token punctuation">(</span><span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>target <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>target <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token keyword">return</span> target<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token class-name">JumpFloor</span><span class="token punctuation">(</span>target <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token class-name">JumpFloor</span><span class="token punctuation">(</span>target <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="10-变态跳台阶-贪心"><a href="#10-变态跳台阶-贪心" class="headerlink" title="10.变态跳台阶(贪心)"></a>10.变态跳台阶(贪心)</h2><p><strong>题目描述</strong></p><p>一只青蛙一次可以跳上1级台阶，也可以跳上2级……它也可以跳上n级。求该青蛙跳上一个n级的台阶总共有多少种跳法。</p><p><strong>【分析】</strong>  </p><blockquote><p>每个台阶可以看作一块木板，让青蛙跳上去(最初🐸没踩在板上)，n个台阶就有n块木板，最后一块木板是青蛙到达的位子，  必须存在，其他 (n-1) 块木板可以任意选择是否存在，则每个木板有存在和不存在两种选择，(n-1) 块木板  就有 [2^(n-1)] 种跳法，可以直接得到结果。所以除了第一位外，其他位的数都是前一位的数去乘以2所得到的积。</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token class-name">JumpFloorII</span><span class="token punctuation">(</span><span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>target <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">--</span>target<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="11-矩形覆盖-递归"><a href="#11-矩形覆盖-递归" class="headerlink" title="11.矩形覆盖(递归)"></a>11.矩形覆盖(递归)</h2><p><strong>题目描述</strong></p><p>我们可以用21的小矩形横着或者竖着去覆盖更大的矩形。请问用n个21的小矩形无重叠地覆盖一个2*n的大矩形，总共有多少种方法？</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token class-name">RectCover</span><span class="token punctuation">(</span><span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>target <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>target <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token keyword">return</span> target<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token class-name">RectCover</span><span class="token punctuation">(</span>target <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token class-name">RectCover</span><span class="token punctuation">(</span>target <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="12-二叉树的镜像-反转二叉树-递归-amp-树"><a href="#12-二叉树的镜像-反转二叉树-递归-amp-树" class="headerlink" title="12.二叉树的镜像/反转二叉树(递归&amp;树)"></a>12.二叉树的镜像/反转二叉树(递归&amp;树)</h2><p><strong>题目描述</strong></p><p>操作给定的二叉树，将其变换为源二叉树的镜像。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">Mirror</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">reverse</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">private</span> <span class="token class-name">TreeNode</span> <span class="token function">reverse</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> root<span class="token punctuation">;</span>        <span class="token class-name">TreeNode</span> temp <span class="token operator">=</span> root<span class="token punctuation">.</span>left<span class="token punctuation">;</span>        root<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token function">reverse</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        root<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token function">reverse</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> root<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="13-二进制中1的个数-位运算"><a href="#13-二进制中1的个数-位运算" class="headerlink" title="13.二进制中1的个数(位运算)"></a>13.二进制中1的个数(位运算)</h2><p><strong>题目描述</strong></p><p>输入一个整数，输出该数32位二进制表示中1的个数。其中负数用补码表示。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token class-name">NumberOf1</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>n <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            n <span class="token operator">&amp;=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>            count<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> count<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="14-数值的整数次方-递归-amp-位运算-amp-快速幂"><a href="#14-数值的整数次方-递归-amp-位运算-amp-快速幂" class="headerlink" title="14.数值的整数次方(递归&amp;位运算&amp;快速幂)"></a>14.数值的整数次方(递归&amp;位运算&amp;快速幂)</h2><p><strong>题目描述</strong></p><p>给定一个double类型的浮点数base和int类型的整数exponent。求base的exponent次方。</p><p>保证base和exponent不同时为0。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>math<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token class-name">Power</span><span class="token punctuation">(</span><span class="token keyword">double</span> base<span class="token punctuation">,</span> <span class="token keyword">int</span> exponent<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> absExp <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>exponent<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>absExp <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>absExp <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> base<span class="token punctuation">;</span>        <span class="token keyword">double</span> result <span class="token operator">=</span> <span class="token class-name">Power</span><span class="token punctuation">(</span>base<span class="token punctuation">,</span> absExp <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        result <span class="token operator">*=</span> result<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>absExp <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            result <span class="token operator">*=</span> base<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>exponent <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">1</span> <span class="token operator">/</span> result<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="15-调整数组顺序使奇数位于偶数前面-LinkedHashSet"><a href="#15-调整数组顺序使奇数位于偶数前面-LinkedHashSet" class="headerlink" title="15.调整数组顺序使奇数位于偶数前面(LinkedHashSet)"></a>15.调整数组顺序使奇数位于偶数前面(LinkedHashSet)</h2><p><strong>题目描述</strong></p><p>输入一个整数数组，实现一个函数来调整该数组中数字的顺序，使得所有的奇数位于数组的前半部分，所有的偶数位于数组的后半部分，并保证奇数和奇数，偶数和偶数之间的相对位置不变。</p><blockquote><p>利用LinkedHashSet</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">reOrderArray</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">LinkedHashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> set1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">LinkedHashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> set2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> array<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                set1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                set2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>                <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> num <span class="token operator">:</span> set1<span class="token punctuation">)</span> <span class="token punctuation">{</span>            array<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> num<span class="token punctuation">;</span>            index<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>         <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> num <span class="token operator">:</span> set2<span class="token punctuation">)</span> <span class="token punctuation">{</span>            array<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> num<span class="token punctuation">;</span>            index<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="16-求链表倒数第k个节点-快慢指针-amp-链表"><a href="#16-求链表倒数第k个节点-快慢指针-amp-链表" class="headerlink" title="16.求链表倒数第k个节点(快慢指针&amp;链表)"></a>16.求链表倒数第k个节点(快慢指针&amp;链表)</h2><p><strong>题目描述</strong></p><p>输入一个链表，输出该链表中倒数第k个结点。</p><blockquote><p>要注意：</p><p>链表为null或k &lt;= 0的情况(最少为倒数第一个所以不能是0)</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">ListNode</span> <span class="token class-name">FindKthToTail</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">,</span><span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> k <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">ListNode</span> fast <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token class-name">ListNode</span> slow <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>fast<span class="token punctuation">.</span>next <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            fast <span class="token operator">=</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>fast<span class="token punctuation">.</span>next <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            fast <span class="token operator">=</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            slow <span class="token operator">=</span> slow<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> slow<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="17-合并两个排序的链表-递归"><a href="#17-合并两个排序的链表-递归" class="headerlink" title="17.合并两个排序的链表(递归)"></a>17.合并两个排序的链表(递归)</h2><p><strong>题目描述</strong></p><p>输入两个单调递增的链表，输出两个链表合成后的链表，当然我们需要合成后的链表满足单调不减规则。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">ListNode</span> <span class="token class-name">Merge</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> list1<span class="token punctuation">,</span><span class="token class-name">ListNode</span> list2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>list1 <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> list2<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>list2 <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> list1<span class="token punctuation">;</span>        <span class="token class-name">ListNode</span> result <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>list1<span class="token punctuation">.</span>val <span class="token operator">&gt;</span> list2<span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>            result <span class="token operator">=</span> list2<span class="token punctuation">;</span>            result<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token class-name">Merge</span><span class="token punctuation">(</span>list1<span class="token punctuation">,</span> list2<span class="token punctuation">.</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            result <span class="token operator">=</span> list1<span class="token punctuation">;</span>            result<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token class-name">Merge</span><span class="token punctuation">(</span>list1<span class="token punctuation">.</span>next<span class="token punctuation">,</span> list2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="18-反转链表-链表-amp-递归"><a href="#18-反转链表-链表-amp-递归" class="headerlink" title="18.反转链表(链表&amp;递归)"></a>18.反转链表(链表&amp;递归)</h2><p><strong>题目描述</strong></p><p>输入一个链表，反转链表后，输出新链表的表头。</p><h3 id="1-指针法"><a href="#1-指针法" class="headerlink" title="(1)指针法"></a>(1)指针法</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">ListNode</span> <span class="token class-name">ReverseList</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">ListNode</span> pre <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">ListNode</span> next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>head <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            next <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            head<span class="token punctuation">.</span>next <span class="token operator">=</span> pre<span class="token punctuation">;</span>            pre <span class="token operator">=</span> head<span class="token punctuation">;</span>            head <span class="token operator">=</span> next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> pre<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-递归法"><a href="#3-递归法" class="headerlink" title="(3)递归法"></a>(3)递归法</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">ListNode</span> <span class="token class-name">ReverseList</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> head<span class="token punctuation">.</span>next <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> head<span class="token punctuation">;</span>        <span class="token class-name">ListNode</span> reversed <span class="token operator">=</span> <span class="token class-name">ReverseList</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>        head<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next <span class="token operator">=</span> head<span class="token punctuation">;</span>        head<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> reversed<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="19-树的子结构-递归-amp-树"><a href="#19-树的子结构-递归-amp-树" class="headerlink" title="19.树的子结构(递归&amp;树)"></a>19.树的子结构(递归&amp;树)</h2><p><strong>题目描述</strong></p><p>输入两棵二叉树A，B，判断B是不是A的子结构。（ps：我们约定空树不是任意一个树的子结构）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token class-name">HasSubtree</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root1<span class="token punctuation">,</span><span class="token class-name">TreeNode</span> root2<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>root1 <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> root2 <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">doesTree1HasTree2</span><span class="token punctuation">(</span>root1<span class="token punctuation">,</span> root2<span class="token punctuation">)</span><span class="token operator">||</span> <span class="token class-name">HasSubtree</span><span class="token punctuation">(</span>root1<span class="token punctuation">.</span>left<span class="token punctuation">,</span> root2<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token class-name">HasSubtree</span><span class="token punctuation">(</span>root1<span class="token punctuation">.</span>right<span class="token punctuation">,</span> root2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">doesTree1HasTree2</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root1<span class="token punctuation">,</span><span class="token class-name">TreeNode</span> root2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root2 <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root1 <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> root1<span class="token punctuation">.</span>val <span class="token operator">==</span> root2<span class="token punctuation">.</span>val <span class="token operator">&amp;&amp;</span> <span class="token function">doesTree1HasTree2</span><span class="token punctuation">(</span>root1<span class="token punctuation">.</span>left<span class="token punctuation">,</span> root2<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">doesTree1HasTree2</span><span class="token punctuation">(</span>root1<span class="token punctuation">.</span>right<span class="token punctuation">,</span> root2<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="20-层序遍历二叉树-树"><a href="#20-层序遍历二叉树-树" class="headerlink" title="20.层序遍历二叉树(树)"></a>20.层序遍历二叉树(树)</h2><h3 id="1-整棵树遍历"><a href="#1-整棵树遍历" class="headerlink" title="(1)整棵树遍历"></a>(1)整棵树遍历</h3><p><strong>题目描述</strong></p><p>从上往下打印出二叉树的每个节点，同层节点从左至右打印。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">PrintFromTopToBottom</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Queue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TreeNode</span><span class="token punctuation">&gt;</span></span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        s<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>s<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">TreeNode</span> node <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            arr<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> s<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> s<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> arr<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-按层遍历"><a href="#2-按层遍历" class="headerlink" title="(2)按层遍历"></a>(2)按层遍历</h3><p><strong>题目描述</strong></p><p>给定一个二叉树，返回该二叉树层序遍历的结果，（从左到右，一层一层地遍历）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ArrayList</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">levelOrder</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ArrayList</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">Queue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TreeNode</span><span class="token punctuation">&gt;</span></span> levelQueue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            levelQueue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>levelQueue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> levelList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> levelCount <span class="token operator">=</span> levelQueue<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> levelCount<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token class-name">TreeNode</span> tmp <span class="token operator">=</span> levelQueue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    levelList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>tmp<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>tmp<span class="token punctuation">.</span>left <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        levelQueue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>tmp<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>tmp<span class="token punctuation">.</span>right <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        levelQueue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>tmp<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                result<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>levelList<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="20-快速排序-递归"><a href="#20-快速排序-递归" class="headerlink" title="20.快速排序(递归)"></a>20.快速排序(递归)</h2><p><strong>题目描述</strong></p><p>写个快排看看</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">void</span> <span class="token class-name">QuickSortMethod</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token class-name">A</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> low<span class="token punctuation">,</span> <span class="token keyword">int</span> high<span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span>low <span class="token operator">&lt;</span> high<span class="token punctuation">)</span> <span class="token punctuation">{</span>           <span class="token keyword">int</span> pivot <span class="token operator">=</span> <span class="token function">partition</span><span class="token punctuation">(</span><span class="token class-name">A</span><span class="token punctuation">,</span> low<span class="token punctuation">,</span> high<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token class-name">QuickSortMethod</span><span class="token punctuation">(</span><span class="token class-name">A</span><span class="token punctuation">,</span> low<span class="token punctuation">,</span> pivot <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token class-name">QuickSortMethod</span><span class="token punctuation">(</span><span class="token class-name">A</span><span class="token punctuation">,</span> pivot <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> high<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>   <span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">partition</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token class-name">A</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> low<span class="token punctuation">,</span> <span class="token keyword">int</span> high<span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">int</span> pivot <span class="token operator">=</span> <span class="token class-name">A</span><span class="token punctuation">[</span>low<span class="token punctuation">]</span><span class="token punctuation">;</span>       <span class="token keyword">while</span> <span class="token punctuation">(</span>low <span class="token operator">&lt;</span> high<span class="token punctuation">)</span> <span class="token punctuation">{</span>           <span class="token keyword">while</span> <span class="token punctuation">(</span>low <span class="token operator">&lt;</span> high <span class="token operator">&amp;&amp;</span> <span class="token class-name">A</span><span class="token punctuation">[</span>high<span class="token punctuation">]</span> <span class="token operator">&gt;=</span> pivot<span class="token punctuation">)</span> high<span class="token operator">--</span><span class="token punctuation">;</span>           <span class="token class-name">A</span><span class="token punctuation">[</span>low<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">A</span><span class="token punctuation">[</span>high<span class="token punctuation">]</span><span class="token punctuation">;</span>           <span class="token keyword">while</span> <span class="token punctuation">(</span>low <span class="token operator">&lt;</span> high <span class="token operator">&amp;&amp;</span> <span class="token class-name">A</span><span class="token punctuation">[</span>low<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> pivot<span class="token punctuation">)</span> low<span class="token operator">++</span><span class="token punctuation">;</span>           <span class="token class-name">A</span><span class="token punctuation">[</span>high<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">A</span><span class="token punctuation">[</span>low<span class="token punctuation">]</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>       <span class="token class-name">A</span><span class="token punctuation">[</span>low<span class="token punctuation">]</span> <span class="token operator">=</span> pivot<span class="token punctuation">;</span>       <span class="token keyword">return</span> low<span class="token punctuation">;</span>   <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="21-包含min-函数的栈-栈"><a href="#21-包含min-函数的栈-栈" class="headerlink" title="21.包含min()函数的栈(栈)"></a>21.包含min()函数的栈(栈)</h2><p><strong>题目描述</strong></p><p>定义栈的数据结构，请在该类型中实现一个能够得到栈中所含最小元素的min函数（时间复杂度应为O（1））。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> main <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> min <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">int</span> node<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>min<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> node <span class="token operator">&lt;</span> min<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            min<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        main<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> mainPop <span class="token operator">=</span> main<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>mainPop <span class="token operator">==</span> min<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            min<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> main<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">min</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> min<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="22-栈的压入、弹出序列-栈"><a href="#22-栈的压入、弹出序列-栈" class="headerlink" title="22.栈的压入、弹出序列(栈)"></a>22.栈的压入、弹出序列(栈)</h2><p><strong>题目描述</strong></p><p>输入两个整数序列，第一个序列表示栈的压入顺序，请判断第二个序列是否可能为该栈的弹出顺序。假设压入栈的所有数字均不相等。例如序列1,2,3,4,5是某栈的压入顺序，序列4,5,3,2,1是该压栈序列对应的一个弹出序列，但4,3,5,1,2就不可能是该压栈序列的弹出序列。（注意：这两个序列的长度是相等的）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token class-name">IsPopOrder</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> pushA<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> popA<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>pushA<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> popA<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> pushA<span class="token punctuation">.</span>length <span class="token operator">!=</span> popA<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> pushA<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>pushA<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> popA<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                j<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="23-二叉树的后序遍历-递归"><a href="#23-二叉树的后序遍历-递归" class="headerlink" title="23.二叉树的后序遍历(递归)"></a>23.二叉树的后序遍历(递归)</h2><p><strong>题目描述</strong></p><p>输入一个整数数组，判断该数组是不是某二叉搜索树的后序遍历的结果。如果是则输出Yes,否则输出No。假设输入的数组的任意两个数字都互不相同。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token class-name">VerifySquenceOfBST</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> sequence<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>sequence <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> sequence<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> rightFirst <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>rightFirst <span class="token operator">&lt;</span> sequence<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>sequence<span class="token punctuation">[</span>rightFirst<span class="token punctuation">]</span> <span class="token operator">&gt;</span> sequence<span class="token punctuation">[</span>sequence<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            rightFirst<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> right <span class="token operator">=</span> rightFirst<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>right <span class="token operator">&lt;</span> sequence<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>sequence<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">&lt;</span> sequence<span class="token punctuation">[</span>sequence<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            right<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">boolean</span> judgeLeft <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> judgeRight <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>rightFirst <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            judgeLeft <span class="token operator">=</span> <span class="token class-name">VerifySquenceOfBST</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>sequence<span class="token punctuation">,</span> rightFirst<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>rightFirst <span class="token operator">&lt;</span> sequence<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            judgeRight <span class="token operator">=</span> <span class="token class-name">VerifySquenceOfBST</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">copyOfRange</span><span class="token punctuation">(</span>sequence<span class="token punctuation">,</span> rightFirst<span class="token punctuation">,</span> sequence<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> judgeLeft <span class="token operator">&amp;&amp;</span> judgeRight<span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="24-最小的k个数-数组"><a href="#24-最小的k个数-数组" class="headerlink" title="24.最小的k个数(数组)"></a>24.最小的k个数(数组)</h2><p><strong>题目描述</strong></p><p>输入n个整数，找出其中最小的K个数。例如输入4,5,1,6,2,7,3,8这8个数字，则最小的4个数字是1,2,3,4。</p><h3 id="1-TreeSet法"><a href="#1-TreeSet法" class="headerlink" title="(1)TreeSet法"></a>(1)TreeSet法</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">GetLeastNumbers_Solution</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> input<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>k <span class="token operator">&gt;</span> input<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token keyword">return</span> arr<span class="token punctuation">;</span>        <span class="token class-name">TreeSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> n <span class="token operator">:</span> input<span class="token punctuation">)</span> <span class="token punctuation">{</span>            set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> it <span class="token operator">=</span> set<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>count <span class="token operator">&lt;</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>            arr<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            count<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> arr<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-排序法"><a href="#2-排序法" class="headerlink" title="(2)排序法"></a>(2)排序法</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">GetLeastNumbers_Solution</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> input<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>input <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> k <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token operator">||</span> k <span class="token operator">&gt;</span> input<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> res<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> k<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            res<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>input<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-最大堆法"><a href="#3-最大堆法" class="headerlink" title="(3)最大堆法"></a>(3)最大堆法</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">GetLeastNumbers_Solution</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> input<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>input <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> k <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token operator">||</span> k <span class="token operator">&gt;</span> input<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> res<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">Queue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PriorityQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">reverseOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> input<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>queue<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>                queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>input<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>input<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> queue<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    queue<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>input<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>queue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            res<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>queue<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="25-连续子数组的最大和"><a href="#25-连续子数组的最大和" class="headerlink" title="25.连续子数组的最大和"></a>25.连续子数组的最大和</h2><p><strong>题目描述</strong></p><p>HZ偶尔会拿些专业问题来忽悠那些非计算机专业的同学。今天测试组开完会后,他又发话了:在古老的一维模式识别中,常常需要计算连续子向量的最大和,当向量全为正数的时候,问题很好解决。但是,如果向量中包含负数,是否应该包含某个负数,并期望旁边的正数会弥补它呢？例如:{6,-3,-2,7,-15,1,2,2},连续子向量的最大和为8(从第0个开始,到第3个为止)。给一个数组，返回它的最大连续子序列的和，你会不会被他忽悠住？(子向量的长度至少是1)</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token class-name">FindGreatestSumOfSubArray</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>array <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> array<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> right <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> max <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span>MIN_VALUE<span class="token punctuation">,</span> tmp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>right <span class="token operator">&lt;</span> array<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>            tmp <span class="token operator">+=</span> array<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">;</span>            max <span class="token operator">=</span> tmp <span class="token operator">&gt;</span> max <span class="token operator">?</span> tmp <span class="token operator">:</span> max<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>tmp <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token punctuation">)</span> tmp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            right<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> max<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="26-数组中出现次数超过一半的数字-相消思想"><a href="#26-数组中出现次数超过一半的数字-相消思想" class="headerlink" title="26.数组中出现次数超过一半的数字(相消思想)"></a>26.数组中出现次数超过一半的数字(相消思想)</h2><p><strong>题目描述</strong></p><p>数组中有一个数字出现的次数超过数组长度的一半，请找出这个数字。例如输入一个长度为9的数组{1,2,3,2,2,2,5,4,2}。由于数字2在数组中出现了5次，超过数组长度的一半，因此输出2。如果不存在则输出0。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token class-name">MoreThanHalfNum_Solution</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>array <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> array<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> result <span class="token operator">=</span> array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> array<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>count <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                result <span class="token operator">=</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                count <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> result<span class="token punctuation">)</span> count<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> count<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>                <span class="token comment">//检查是否超过一半</span>        <span class="token keyword">int</span> times <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> n <span class="token operator">:</span> array<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">==</span> n<span class="token punctuation">)</span> times<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>times <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">&lt;=</span> array<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="27-第一个只出现一次的字符-HashMap"><a href="#27-第一个只出现一次的字符-HashMap" class="headerlink" title="27.第一个只出现一次的字符(HashMap)"></a>27.第一个只出现一次的字符(HashMap)</h2><p><strong>题目描述</strong></p><p>在一个字符串(0&lt;=字符串长度&lt;=10000，全部由字母组成)中找到第一个只出现一次的字符,并返回它的位置, 如果没有则返回 -1（需要区分大小写）.（从0开始计数）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token class-name">FirstNotRepeatingChar</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>str <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Character</span><span class="token punctuation">,</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">char</span> c <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">char</span> ch <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> j<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="28-两个链表的第一个公共节点-快慢指针"><a href="#28-两个链表的第一个公共节点-快慢指针" class="headerlink" title="28.两个链表的第一个公共节点(快慢指针)"></a>28.两个链表的第一个公共节点(快慢指针)</h2><p><strong>题目描述</strong></p><p>输入两个链表，找出它们的第一个公共结点。（注意因为传入数据是链表，所以错误测试数据的提示是用其他方式显示的，保证传入数据是正确的）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">ListNode</span> <span class="token class-name">FindFirstCommonNode</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> pHead1<span class="token punctuation">,</span> <span class="token class-name">ListNode</span> pHead2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>pHead1 <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> pHead2 <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">//遍历短链表</span>        <span class="token class-name">ListNode</span> p1 <span class="token operator">=</span> pHead1<span class="token punctuation">,</span> p2 <span class="token operator">=</span> pHead2<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>p1 <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> p2 <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            p1 <span class="token operator">=</span> p1<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            p2 <span class="token operator">=</span> p2<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">//让longer和shorter的后面节点数相等</span>        <span class="token class-name">ListNode</span> longer <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">,</span> shorter <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>p1 <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            longer <span class="token operator">=</span> pHead1<span class="token punctuation">;</span>            shorter <span class="token operator">=</span> pHead2<span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>p1 <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                p1 <span class="token operator">=</span> p1<span class="token punctuation">.</span>next<span class="token punctuation">;</span>                longer <span class="token operator">=</span> longer<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            longer <span class="token operator">=</span> pHead2<span class="token punctuation">;</span>            shorter <span class="token operator">=</span> pHead1<span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>p2 <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                p2 <span class="token operator">=</span> p2<span class="token punctuation">.</span>next<span class="token punctuation">;</span>                longer <span class="token operator">=</span> longer<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment">//找公共节点</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>longer <span class="token operator">!=</span> shorter<span class="token punctuation">)</span> <span class="token punctuation">{</span>            longer <span class="token operator">=</span> longer<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            shorter <span class="token operator">=</span> shorter<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> longer<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="29-二叉树的前序遍历-栈"><a href="#29-二叉树的前序遍历-栈" class="headerlink" title="29.二叉树的前序遍历(栈)"></a>29.二叉树的前序遍历(栈)</h2><p><strong>题目描述</strong></p><p>求给定的二叉树的前序遍历。</p><p>例如：</p><p>给定的二叉树为{1,#,2,3},</p><p><img src="https://uploadfiles.nowcoder.com/images/20200806/999991351_1596689741201_2A820354FCD6B266C9A4FBAF6B9CFC97" alt="img"></p><p>返回：[1,2,3].</p><p>备注；用递归来解这道题很简单，你可以给出迭代的解法么？</p><p>如果你不明白{1,#,2,3}的含义，<a href="https://www.nowcoder.com/questionTerminal/04a5560e43e24e9db4595865dc9c63a3">点击查看相关信息</a></p><h3 id="1-非递归"><a href="#1-非递归" class="headerlink" title="(1)非递归"></a>(1)非递归</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> preorderTraversal <span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> result<span class="token punctuation">;</span>        <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TreeNode</span><span class="token punctuation">&gt;</span></span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        s<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>s<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">TreeNode</span> node <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            result<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>right <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                s<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>left <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                s<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-递归"><a href="#2-递归" class="headerlink" title="(2)递归"></a>(2)递归</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> preorderTraversal <span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> arr<span class="token punctuation">;</span>        <span class="token function">preOrder</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> arr<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">preOrder</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>        arr<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">preOrder</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">preOrder</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="30-设计LRU缓存结构"><a href="#30-设计LRU缓存结构" class="headerlink" title="30.设计LRU缓存结构"></a>30.设计LRU缓存结构</h2><p><strong>题目描述</strong></p><p>该结构在构造时确定大小，假设大小为K，并有如下两个功能</p><ul><li>set(key, value)：将记录(key, value)插入该结构</li><li>get(key)：返回key对应的value值</li></ul><p>[要求]</p><ol><li>set和get方法的时间复杂度为O(1)</li><li>某个key的set或get操作一旦发生，认为这个key的记录成了最常使用的。</li><li>当缓存的大小超过K时，移除最不经常使用的记录，即set或get最久远的。</li></ol><p>若opt=1，接下来两个整数x, y，表示set(x, y)<br>若opt=2，接下来一个整数x，表示get(x)，若x未出现过或已被移除，则返回-1<br>对于每个操作2，输出一个答案</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="31-二分查找-二分"><a href="#31-二分查找-二分" class="headerlink" title="31.二分查找(二分)"></a>31.二分查找(二分)</h2><p><strong>题目描述</strong></p><p>请实现有重复数字的有序数组的二分查找。</p><p>输出在数组中第一个大于等于查找值的位置，如果数组中不存在这样的数，则输出数组长度加一。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> upper_bound_ <span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> v<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> small <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> big <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token punctuation">(</span>small <span class="token operator">+</span> big<span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span> small <span class="token operator">&lt;</span> big<span class="token punctuation">;</span> i <span class="token operator">=</span> <span class="token punctuation">(</span>small <span class="token operator">+</span> big<span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;=</span> v<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> a<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> v<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">return</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    big <span class="token operator">=</span> i<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                small <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="32-约瑟夫环-环形数组-链表"><a href="#32-约瑟夫环-环形数组-链表" class="headerlink" title="32.约瑟夫环(环形数组/链表)"></a>32.约瑟夫环(环形数组/链表)</h2><p><strong>题目描述</strong></p><p>让小朋友们围成一个大圈。然后,他随机指定一个数m,让编号为0的小朋友开始报数。每次喊到m-1的那个小朋友要出列唱首歌,然后可以在礼品箱中任意的挑选礼物,并且不再回到圈中,从他的下一个小朋友开始,继续0…m-1报数….这样下去….直到剩下最后一个小朋友,可以不用表演,并且拿到牛客名贵的“名侦探柯南”典藏版(名额有限哦!!^_^)。请你试着想下,哪个小朋友会得到这份礼品呢？(注：小朋友的编号是从0到n-1)</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">findLastNumber</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span><span class="token keyword">int</span> m<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">&lt;</span><span class="token number">1</span><span class="token operator">||</span>m<span class="token operator">&lt;</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>step <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> count <span class="token operator">=</span> n<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>count<span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token comment">//跳出循环时将最后一个元素也设置为了-1</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>          <span class="token comment">//指向上一个被删除对象的下一个元素。</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">&gt;=</span>n<span class="token punctuation">)</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment">//模拟环。</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span> <span class="token comment">//跳过被删除的对象。</span>            step<span class="token operator">++</span><span class="token punctuation">;</span>                     <span class="token comment">//记录已走过的。</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>step<span class="token operator">==</span>m<span class="token punctuation">)</span> <span class="token punctuation">{</span>               <span class="token comment">//找到待删除的对象。</span>                array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>                step <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                count<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>                <span class="token punctuation">}</span>        <span class="token keyword">return</span> i<span class="token punctuation">;</span><span class="token comment">//返回跳出循环时的i,即最后一个被设置为-1的元素</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>伴随我秋招的java知识点总结⭐⭐⭐</title>
      <link href="posts/a0074df5/"/>
      <url>posts/a0074df5/</url>
      
        <content type="html"><![CDATA[<p>善用目录和ctrl+f哦~<span class="github-emoji"><span>😛</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f61b.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p><h2 id="Java-基础-40"><a href="#Java-基础-40" class="headerlink" title="Java 基础 40"></a>Java 基础 40</h2><h3 id="语言特性-12"><a href="#语言特性-12" class="headerlink" title="语言特性 12"></a>语言特性 12</h3><h4 id="Q1：Java-语言的优点？"><a href="#Q1：Java-语言的优点？" class="headerlink" title="Q1：Java 语言的优点？"></a>Q1：Java 语言的优点？</h4><p>① 平台无关性，摆脱硬件束缚，”一次编写，到处运行”。</p><p>② 相对安全的内存管理和访问机制，避免大部分内存泄漏和指针越界。</p><p>③ 热点代码检测和运行时编译及优化，使程序随运行时间增长获得更高性能。</p><p>④ 完善的应用程序接口，支持第三方类库。</p><hr><h4 id="Q2：Java-如何实现平台无关？"><a href="#Q2：Java-如何实现平台无关？" class="headerlink" title="Q2：Java 如何实现平台无关？"></a>Q2：Java 如何实现平台无关？</h4><p><strong>JVM：</strong> Java 编译器可生成与计算机体系结构无关的字节码指令，字节码文件不仅可以轻易地在任何机器上解释执行，还可以动态地转换成本地机器代码，转换是由 JVM 实现的，JVM 是平台相关的，屏蔽了不同操作系统的差异。</p><p><strong>语言规范：</strong> 基本数据类型大小有明确规定，例如 int 永远为 32 位，而 C/C++ 中可能是 16 位、32 位，也可能是编译器开发商指定的其他大小。Java 中数值类型有固定字节数，二进制数据以固定格式存储和传输，字符串采用标准的 Unicode 格式存储。</p><hr><h4 id="Q3：JDK-和-JRE-的区别？"><a href="#Q3：JDK-和-JRE-的区别？" class="headerlink" title="Q3：JDK 和 JRE 的区别？"></a>Q3：JDK 和 JRE 的区别？</h4><p><strong>JDK：</strong> Java Development Kit，开发工具包。提供了编译运行 Java 程序的各种工具，包括编译器、JRE 及常用类库，是 JAVA 核心。</p><p><strong>JRE：</strong> Java Runtime Environment，运行时环境，运行 Java 程序的必要环境，包括 JVM、核心类库、核心配置工具。</p><hr><h4 id="Q4：Java-按值调用还是引用调用？"><a href="#Q4：Java-按值调用还是引用调用？" class="headerlink" title="Q4：Java 按值调用还是引用调用？"></a>Q4：Java 按值调用还是引用调用？</h4><p><strong>按值调用</strong>指方法接收调用者提供的值，<strong>按引用调用</strong>指方法接收调用者提供的变量地址。</p><p>Java 总是按值调用，方法得到的是所有参数值的副本，传递对象时实际上方法接收的是对象引用的副本。方法不能修改基本数据类型的参数，如果传递了一个 int 值 ，改变值不会影响实参，因为改变的是值的一个副本。</p><p>可以改变对象参数的状态，但不能让对象参数引用一个新的对象。如果传递了一个 int 数组，改变数组的内容会影响实参，而改变这个参数的引用并不会让实参引用新的数组对象。</p><hr><h4 id="Q5：浅拷贝和深拷贝的区别？"><a href="#Q5：浅拷贝和深拷贝的区别？" class="headerlink" title="Q5：浅拷贝和深拷贝的区别？"></a>Q5：浅拷贝和深拷贝的区别？</h4><p><strong>浅拷贝：</strong> 只复制当前对象的基本数据类型及引用变量，没有复制引用变量指向的实际对象。修改克隆对象可能影响原对象，不安全。</p><p><strong>深拷贝：</strong> 完全拷贝基本数据类型和引用数据类型，安全。</p><hr><h4 id="Q6：什么是反射？"><a href="#Q6：什么是反射？" class="headerlink" title="Q6：什么是反射？"></a>Q6：什么是反射？</h4><p>在运行状态中，对于任意一个类都能知道它的所有属性和方法，对于任意一个对象都能调用它的任意方法和属性，这种动态获取信息及调用对象方法的功能称为反射。缺点是破坏了封装性以及泛型约束。反射是框架的核心，Spring 大量使用反射。</p><hr><h4 id="Q7：Class-类的作用？如何获取一个-Class-对象？"><a href="#Q7：Class-类的作用？如何获取一个-Class-对象？" class="headerlink" title="Q7：Class 类的作用？如何获取一个 Class 对象？"></a>Q7：Class 类的作用？如何获取一个 Class 对象？</h4><p>在程序运行期间，Java 运行时系统为所有对象维护一个运行时类型标识，这个信息会跟踪每个对象所属的类，虚拟机利用运行时类型信息选择要执行的正确方法，保存这些信息的类就是 Class，这是一个泛型类。</p><p>获取 Class 对象：①  <code>类名.class</code> 。②对象的 <code>getClass</code>方法。③ <code>Class.forName(类的全限定名)</code>。</p><hr><h4 id="Q8：什么是注解？什么是元注解？"><a href="#Q8：什么是注解？什么是元注解？" class="headerlink" title="Q8：什么是注解？什么是元注解？"></a>Q8：什么是注解？什么是元注解？</h4><p><strong>注解</strong>是一种标记，使类或接口附加额外信息，帮助编译器和 JVM 完成一些特定功能，例如 <code>@Override</code> 标识一个方法是重写方法。</p><p><strong>元注解</strong>是自定义注解的注解，例如：</p><p><code>@Target</code>：约束作用位置，值是 ElementType 枚举常量，包括 METHOD 方法、VARIABLE 变量、TYPE 类/接口、PARAMETER 方法参数、CONSTRUCTORS 构造方法和 LOACL_VARIABLE 局部变量等。</p><p><code>@Rentention</code>：约束生命周期，值是 RetentionPolicy 枚举常量，包括 SOURCE 源码、CLASS 字节码和 RUNTIME 运行时。</p><p><code>@Documented</code>：表明这个注解应该被 javadoc 记录。</p><hr><h4 id="Q9：什么是泛型，有什么作用？"><a href="#Q9：什么是泛型，有什么作用？" class="headerlink" title="Q9：什么是泛型，有什么作用？"></a>Q9：什么是泛型，有什么作用？</h4><p><strong>泛型</strong>本质是参数化类型，解决不确定对象具体类型的问题。泛型在定义处只具备执行 Object 方法的能力。</p><p>泛型的好处：① 类型安全，放置什么出来就是什么，不存在 ClassCastException。② 提升可读性，编码阶段就显式知道泛型集合、泛型方法等处理的对象类型。③ 代码重用，合并了同类型的处理代码。</p><h4 id="Q10：泛型擦除是什么？"><a href="#Q10：泛型擦除是什么？" class="headerlink" title="Q10：泛型擦除是什么？"></a>Q10：泛型擦除是什么？</h4><p>泛型用于编译阶段，编译后的字节码文件不包含泛型类型信息，因为虚拟机没有泛型类型对象，所有对象都属于普通类。例如定义<code>List&lt;Object&gt;</code>或<code>List&lt;String&gt;</code>，在编译后都会变成 <code>List</code> 。</p><p>定义一个泛型类型，会自动提供一个对应原始类型，类型变量会被擦除。如果没有限定类型就会替换为 Object，如果有限定类型就会替换为第一个限定类型，例如 <code>&lt;T extends A &amp; B&gt;</code> 会使用 A 类型替换 T。</p><hr><h4 id="Q11：JDK8-新特性有哪些？"><a href="#Q11：JDK8-新特性有哪些？" class="headerlink" title="Q11：JDK8 新特性有哪些？"></a>Q11：JDK8 新特性有哪些？</h4><p><strong>lambda 表达式：</strong>允许把函数作为参数传递到方法，简化匿名内部类代码。</p><p><strong>函数式接口：</strong>使用 <code>@FunctionalInterface</code> 标识，有且仅有一个抽象方法，可被隐式转换为 lambda 表达式。</p><p><strong>方法引用：</strong>可以引用已有类或对象的方法和构造方法，进一步简化 lambda 表达式。</p><p><strong>接口：</strong>接口可以定义 <code>default</code> 修饰的默认方法，降低了接口升级的复杂性，还可以定义静态方法。</p><p><strong>注解：</strong>引入重复注解机制，相同注解在同地方可以声明多次。注解作用范围也进行了扩展，可作用于局部变量、泛型、方法异常等。</p><p><strong>类型推测：</strong>加强了类型推测机制，使代码更加简洁。</p><p><strong>Optional 类：</strong>处理空指针异常，提高代码可读性。</p><p><strong>Stream 类：</strong>引入函数式编程风格，提供了很多功能，使代码更加简洁。方法包括 <code>forEach</code> 遍历、<code>count</code> 统计个数、<code>filter</code> 按条件过滤、<code>limit</code> 取前 n 个元素、<code>skip</code> 跳过前 n 个元素、<code>map</code> 映射加工、<code>concat</code> 合并 stream 流等。</p><p><strong>日期：</strong>增强了日期和时间 API，新的 java.time 包主要包含了处理日期、时间、日期/时间、时区、时刻和时钟等操作。</p><p><strong>JavaScript：</strong>提供了一个新的 JavaScript 引擎，允许在 JVM上运行特定 JavaScript 应用。</p><hr><h4 id="Q12：异常有哪些分类？"><a href="#Q12：异常有哪些分类？" class="headerlink" title="Q12：异常有哪些分类？"></a>Q12：异常有哪些分类？</h4><p>所有异常都是 Throwable 的子类，分为 Error 和 Exception。<strong>Error</strong> 是 Java 运行时系统的内部错误和资源耗尽错误，例如 StackOverFlowError 和 OutOfMemoryError，这种异常程序无法处理。</p><p><strong>Exception</strong> 分为受检异常和非受检异常，受检异常需要在代码中显式处理，否则会编译出错，非受检异常是运行时异常，继承自 RuntimeException。</p><p><strong>受检异常</strong>：① 无能为力型，如字段超长导致的 SQLException。② 力所能及型，如未授权异常 UnAuthorizedException，程序可跳转权限申请页面。常见受检异常还有 FileNotFoundException、ClassNotFoundException、IOException等。</p><p><strong>非受检异常</strong>：① 可预测异常，例如 IndexOutOfBoundsException、NullPointerException、ClassCastException 等，这类异常应该提前处理。② 需捕捉异常，例如进行 RPC 调用时的远程服务超时，这类异常客户端必须显式处理。③ 可透出异常，指框架或系统产生的且会自行处理的异常，例如 Spring 的 NoSuchRequestHandingMethodException，Spring 会自动完成异常处理，将异常自动映射到合适的状态码。</p><hr><h3 id="数据类型-5"><a href="#数据类型-5" class="headerlink" title="数据类型 5"></a>数据类型 5</h3><h4 id="Q1：Java-有哪些基本数据类型？"><a href="#Q1：Java-有哪些基本数据类型？" class="headerlink" title="Q1：Java 有哪些基本数据类型？"></a>Q1：Java 有哪些基本数据类型？</h4><table><thead><tr><th>数据类型</th><th>内存大小</th><th>默认值</th><th>取值范围</th></tr></thead><tbody><tr><td>byte</td><td>1 B</td><td>(byte)0</td><td>-128 ~ 127</td></tr><tr><td>short</td><td>2 B</td><td>(short)0</td><td>-2^15^ ~ 2^15^-1</td></tr><tr><td>int</td><td>4 B</td><td>0</td><td>-2^31^ ~ 2^31^-1</td></tr><tr><td>long</td><td>8 B</td><td>0L</td><td>-2^63^ ~ 2^63^-1</td></tr><tr><td>float</td><td>4 B</td><td>0.0F</td><td>±3.4E+38（有效位数 6~7 位）</td></tr><tr><td>double</td><td>8 B</td><td>0.0D</td><td>±1.7E+308（有效位数 15 位）</td></tr><tr><td>char</td><td>英文 1B，中文 UTF-8 占 3B，GBK 占 2B。</td><td>‘\u0000’</td><td>‘\u0000’ ~ ‘\uFFFF’</td></tr><tr><td>boolean</td><td>单个变量 4B / 数组 1B</td><td>false</td><td>true、false</td></tr></tbody></table><p>JVM 没有 boolean 赋值的专用字节码指令，<code>boolean f = false</code> 就是使用 ICONST_0 即常数 0 赋值。单个 boolean 变量用 int 代替，boolean 数组会编码成 byte 数组。</p><hr><h4 id="Q2：自动装箱-拆箱是什么？"><a href="#Q2：自动装箱-拆箱是什么？" class="headerlink" title="Q2：自动装箱/拆箱是什么？"></a>Q2：自动装箱/拆箱是什么？</h4><p>每个基本数据类型都对应一个包装类，除了 int 和 char 对应 Integer 和 Character 外，其余基本数据类型的包装类都是首字母大写即可。</p><p><strong>自动装箱：</strong> 将基本数据类型包装为一个包装类对象，例如向一个泛型为 Integer 的集合添加 int 元素。</p><p><strong>自动拆箱：</strong> 将一个包装类对象转换为一个基本数据类型，例如将一个包装类对象赋值给一个基本数据类型的变量。</p><p>比较两个包装类数值要用 <code>equals</code> ，而不能用 <code>==</code> 。</p><hr><h4 id="Q3：String-是不可变类为什么值可以修改？"><a href="#Q3：String-是不可变类为什么值可以修改？" class="headerlink" title="Q3：String 是不可变类为什么值可以修改？"></a>Q3：String 是不可变类为什么值可以修改？</h4><p>String 类和其存储数据的成员变量 value 字节数组都是 final 修饰的。对一个 String 对象的任何修改实际上都是创建一个新 String 对象，再引用该对象。只是修改 String 变量引用的对象，没有修改原 String 对象的内容。</p><hr><h4 id="Q4：字符串拼接的方式有哪些？"><a href="#Q4：字符串拼接的方式有哪些？" class="headerlink" title="Q4：字符串拼接的方式有哪些？"></a>Q4：字符串拼接的方式有哪些？</h4><p>① 直接用 <code>+</code> ，底层用 StringBuilder 实现。只适用小数量，如果在循环中使用 <code>+</code> 拼接，相当于不断创建新的 StringBuilder 对象再转换成 String 对象，效率极差。</p><p>② 使用 String 的 concat 方法，该方法中使用 <code>Arrays.copyOf</code> 创建一个新的字符数组 buf 并将当前字符串 value 数组的值拷贝到 buf 中，buf 长度 = 当前字符串长度 + 拼接字符串长度。之后调用 <code>getChars</code> 方法使用 <code>System.arraycopy</code> 将拼接字符串的值也拷贝到 buf 数组，最后用 buf 作为构造参数 new 一个新的 String 对象返回。效率稍高于直接使用 <code>+</code>。</p><p>③ 使用 StringBuilder 或 StringBuffer，两者的 <code>append</code> 方法都继承自 AbstractStringBuilder，该方法首先使用 <code>Arrays.copyOf</code>  确定新的字符数组容量，再调用 <code>getChars</code> 方法使用 <code>System.arraycopy</code> 将新的值追加到数组中。StringBuilder 是 JDK5 引入的，效率高但线程不安全。StringBuffer 使用 synchronized 保证线程安全。</p><hr><h4 id="Q5：String-a-“a”-new-String-“b”-创建了几个对象？"><a href="#Q5：String-a-“a”-new-String-“b”-创建了几个对象？" class="headerlink" title="Q5：String a = “a” + new String(“b”)  创建了几个对象？"></a>Q5：String a = “a” + new String(“b”)  创建了几个对象？</h4><p>常量和常量拼接仍是常量，结果在常量池，只要有变量参与拼接结果就是变量，存在堆。</p><p>使用字面量时只创建一个常量池中的常量，使用 new 时如果常量池中没有该值就会在常量池中新创建，再在堆中创建一个对象引用常量池中常量。因此 <code>String a = "a" + new String("b")</code> 会创建四个对象，常量池中的 a 和 b，堆中的 b 和堆中的 ab。</p><hr><h3 id="面向对象-10"><a href="#面向对象-10" class="headerlink" title="面向对象 10"></a>面向对象 10</h3><h4 id="Q1：谈一谈你对面向对象的理解"><a href="#Q1：谈一谈你对面向对象的理解" class="headerlink" title="Q1：谈一谈你对面向对象的理解"></a>Q1：谈一谈你对面向对象的理解</h4><p>面向过程让计算机有步骤地顺序做一件事，是过程化思维，使用面向过程语言开发大型项目，软件复用和维护存在很大问题，模块之间耦合严重。面向对象相对面向过程更适合解决规模较大的问题，可以拆解问题复杂度，对现实事物进行抽象并映射为开发对象，更接近人的思维。</p><p>例如开门这个动作，面向过程是 <code>open(Door door)</code>，动宾结构，door 作为操作对象的参数传入方法，方法内定义开门的具体步骤。面向对象的方式首先会定义一个类 Door，抽象出门的属性（如尺寸、颜色）和行为（如 open 和 close），主谓结构。</p><p>面向过程代码松散，强调流程化解决问题。面向对象代码强调高内聚、低耦合，先抽象模型定义共性行为，再解决实际问题。</p><hr><h4 id="Q2：面向对象的三大特性？"><a href="#Q2：面向对象的三大特性？" class="headerlink" title="Q2：面向对象的三大特性？"></a>Q2：面向对象的三大特性？</h4><p><strong>封装</strong>是对象功能内聚的表现形式，在抽象基础上决定信息是否公开及公开等级，核心问题是以什么方式暴漏哪些信息。主要任务是对属性、数据、敏感行为实现隐藏，对属性的访问和修改必须通过公共接口实现。封装使对象关系变得简单，降低了代码耦合度，方便维护。</p><p>迪米特原则就是对封装的要求，即 A 模块使用 B 模块的某接口行为，对 B 模块中除此行为外的其他信息知道得应尽可能少。不直接对 public 属性进行读取和修改而使用 getter/setter 方法是因为假设想在修改属性时进行权限控制、日志记录等操作，在直接访问属性的情况下无法实现。如果将 public 的属性和行为修改为 private 一般依赖模块都会报错，因此不知道使用哪种权限时应优先使用 private。</p><p><strong>继承</strong>用来扩展一个类，子类可继承父类的部分属性和行为使模块具有复用性。继承是”is-a”关系，可使用里氏替换原则判断是否满足”is-a”关系，即任何父类出现的地方子类都可以出现。如果父类引用直接使用子类引用来代替且可以正确编译并执行，输出结果符合子类场景预期，那么说明两个类符合里氏替换原则。</p><p><strong>多态</strong>以封装和继承为基础，根据运行时对象实际类型使同一行为具有不同表现形式。多态指在编译层面无法确定最终调用的方法体，在运行期由 JVM 动态绑定，调用合适的重写方法。由于重载属于静态绑定，本质上重载结果是完全不同的方法，因此多态一般专指重写。</p><hr><h4 id="Q3：重载和重写的区别？"><a href="#Q3：重载和重写的区别？" class="headerlink" title="Q3：重载和重写的区别？"></a>Q3：重载和重写的区别？</h4><p><strong>重载</strong>指方法名称相同，但参数类型个数不同，是行为水平方向不同实现。对编译器来说，方法名称和参数列表组成了一个唯一键，称为方法签名，JVM 通过方法签名决定调用哪种重载方法。不管继承关系如何复杂，重载在编译时可以根据规则知道调用哪种目标方法，因此属于静态绑定。</p><p>JVM 在重载方法中选择合适方法的顺序：① 精确匹配。② 基本数据类型自动转换成更大表示范围。③ 自动拆箱与装箱。④ 子类向上转型。⑤ 可变参数。</p><p><strong>重写</strong>指子类实现接口或继承父类时，保持方法签名完全相同，实现不同方法体，是行为垂直方向不同实现。</p><p>元空间有一个方法表保存方法信息，如果子类重写了父类的方法，则方法表中的方法引用会指向子类实现。父类引用执行子类方法时无法调用子类存在而父类不存在的方法。</p><p>重写方法访问权限不能变小，返回类型和抛出的异常类型不能变大，必须加 <code>@Override</code> 。</p><hr><h4 id="Q4：类之间有哪些关系？"><a href="#Q4：类之间有哪些关系？" class="headerlink" title="Q4：类之间有哪些关系？"></a>Q4：类之间有哪些关系？</h4><table><thead><tr><th>类关系</th><th>描述</th><th>权力强侧</th><th>举例</th></tr></thead><tbody><tr><td>继承</td><td>父子类之间的关系：is-a</td><td>父类</td><td>小狗继承于动物</td></tr><tr><td>实现</td><td>接口和实现类之间的关系：can-do</td><td>接口</td><td>小狗实现了狗叫接口</td></tr><tr><td>组合</td><td>比聚合更强的关系：contains-a</td><td>整体</td><td>头是身体的一部分</td></tr><tr><td>聚合</td><td>暂时组装的关系：has-a</td><td>组装方</td><td>小狗和绳子是暂时的聚合关系</td></tr><tr><td>依赖</td><td>一个类用到另一个：depends-a</td><td>被依赖方</td><td>人养小狗，人依赖于小狗</td></tr><tr><td>关联</td><td>平等的使用关系：links-a</td><td>平等</td><td>人使用卡消费，卡可以提取人的信息</td></tr></tbody></table><hr><h4 id="Q5：Object-类有哪些方法？"><a href="#Q5：Object-类有哪些方法？" class="headerlink" title="Q5：Object 类有哪些方法？"></a>Q5：Object 类有哪些方法？</h4><p><strong>equals：</strong>检测对象是否相等，默认使用 <code>==</code> 比较对象引用，可以重写 equals 方法自定义比较规则。equals 方法规范：自反性、对称性、传递性、一致性、对于任何非空引用 x，<code>x.equals(null)</code>  返回 false。</p><p><strong>hashCode：</strong>散列码是由对象导出的一个整型值，没有规律，每个对象都有默认散列码，值由对象存储地址得出。字符串散列码由内容导出，值可能相同。为了在集合中正确使用，一般需要同时重写 equals 和 hashCode，要求 equals 相同 hashCode 必须相同，hashCode 相同 equals 未必相同，因此 hashCode 是对象相等的必要不充分条件。</p><p><strong>toString</strong>：打印对象时默认的方法，如果没有重写打印的是表示对象值的一个字符串。</p><p><strong>clone：</strong>clone 方法声明为 protected，类只能通过该方法克隆它自己的对象，如果希望其他类也能调用该方法必须定义该方法为 public。如果一个对象的类没有实现 Cloneable 接口，该对象调用 clone 方***抛出一个 CloneNotSupport 异常。默认的 clone 方法是浅拷贝，一般重写 clone 方法需要实现 Cloneable 接口并指定访问修饰符为 public。</p><p><strong>finalize：</strong>确定一个对象死亡至少要经过两次标记，如果对象在可达性分析后发现没有与 GC Roots 连接的引用链会被第一次标记，随后进行一次筛选，条件是对象是否有必要执行 finalize 方法。假如对象没有重写该方法或方法已被虚拟机调用，都视为没有必要执行。如果有必要执行，对象会被放置在 F-Queue 队列，由一条低调度优先级的 Finalizer 线程去执行。虚拟机会触发该方法但不保证会结束，这是为了防止某个对象的 finalize 方法执行缓慢或发生死循环。只要对象在 finalize 方法中重新与引用链上的对象建立关联就会在第二次标记时被移出回收集合。由于运行代价高昂且无法保证调用顺序，在 JDK 9 被标记为过时方法，并不适合释放资源。</p><p><strong>getClass：</strong>返回包含对象信息的类对象。</p><p><strong>wait / notify / notifyAll：</strong>阻塞或唤醒持有该对象锁的线程。</p><hr><h4 id="Q6：内部类的作用是什么，有哪些分类？"><a href="#Q6：内部类的作用是什么，有哪些分类？" class="headerlink" title="Q6：内部类的作用是什么，有哪些分类？"></a>Q6：内部类的作用是什么，有哪些分类？</h4><p>内部类可对同一包中其他类隐藏，内部类方法可以访问定义这个内部类的作用域中的数据，包括 private 数据。</p><p>内部类是一个编译器现象，与虚拟机无关。编译器会把内部类转换成常规的类文件，用 $ 分隔外部类名与内部类名，其中匿名内部类使用数字编号，虚拟机对此一无所知。</p><p><strong>静态内部类：</strong> 属于外部类，只加载一次。作用域仅在包内，可通过 <code>外部类名.内部类名</code> 直接访问，类内只能访问外部类所有静态属性和方法。HashMap 的 Node 节点，ReentrantLock 中的 Sync 类，ArrayList 的 SubList 都是静态内部类。内部类中还可以定义内部类，如 ThreadLoacl 静态内部类 ThreadLoaclMap 中定义了内部类 Entry。</p><p><strong>成员内部类：</strong> 属于外部类的每个对象，随对象一起加载。不可以定义静态成员和方法，可访问外部类的所有内容。</p><p><strong>局部内部类：</strong> 定义在方法内，不能声明访问修饰符，只能定义实例成员变量和实例方法，作用范围仅在声明类的代码块中。</p><p><strong>匿名内部类：</strong> 只用一次的没有名字的类，可以简化代码，创建的对象类型相当于 new 的类的子类类型。用于实现事件监听和其他回调。</p><hr><h4 id="Q7：访问权限控制符有哪些？"><a href="#Q7：访问权限控制符有哪些？" class="headerlink" title="Q7：访问权限控制符有哪些？"></a>Q7：访问权限控制符有哪些？</h4><table><thead><tr><th>访问权限控制符</th><th>本类</th><th>包内</th><th>包外子类</th><th>任何地方</th></tr></thead><tbody><tr><td>public</td><td>√</td><td>√</td><td>√</td><td>√</td></tr><tr><td>protected</td><td>√</td><td>√</td><td>√</td><td>×</td></tr><tr><td>无</td><td>√</td><td>√</td><td>×</td><td>×</td></tr><tr><td>private</td><td>√</td><td>×</td><td>×</td><td>×</td></tr></tbody></table><hr><h4 id="Q8：接口和抽象类的异同？"><a href="#Q8：接口和抽象类的异同？" class="headerlink" title="Q8：接口和抽象类的异同？"></a>Q8：接口和抽象类的异同？</h4><p>接口和抽象类对实体类进行更高层次的抽象，仅定义公共行为和特征。</p><table><thead><tr><th>语法维度</th><th>抽象类</th><th>接口</th></tr></thead><tbody><tr><td>成员变量</td><td>无特殊要求</td><td>默认 public static final 常量</td></tr><tr><td>构造方法</td><td>有构造方法，不能实例化</td><td>没有构造方法，不能实例化</td></tr><tr><td>方法</td><td>抽象类可以没有抽象方法，但有抽象方法一定是抽象类。</td><td>默认 public abstract，JDK8 支持默认/静态方法，JDK9 支持私有方法。</td></tr><tr><td>继承</td><td>单继承</td><td>多继承</td></tr></tbody></table><hr><h4 id="Q9：接口和抽象类应该怎么选择？"><a href="#Q9：接口和抽象类应该怎么选择？" class="headerlink" title="Q9：接口和抽象类应该怎么选择？"></a>Q9：接口和抽象类应该怎么选择？</h4><p>抽象类体现 is-a 关系，接口体现 can-do 关系。与接口相比，抽象类通常是对同类事物相对具体的抽象。</p><p>抽象类是模板式设计，包含一组具体特征，例如某汽车，底盘、控制电路等是抽象出来的共同特征，但内饰、显示屏、座椅材质可以根据不同级别配置存在不同实现。</p><p>接口是契约式设计，是开放的，定义了方法名、参数、返回值、抛出的异常类型，谁都可以实现它，但必须遵守接口的约定。例如所有车辆都必须实现刹车这种强制规范。</p><p>接口是顶级类，抽象类在接口下面的第二层，对接口进行了组合，然后实现部分接口。当纠结定义接口和抽象类时，推荐定义为接口，遵循接口隔离原则，按维度划分成多个接口，再利用抽象类去实现这些，方便后续的扩展和重构。</p><p>例如 Plane 和 Bird 都有 fly 方法，应把 fly 定义为接口，而不是抽象类的抽象方法再继承，因为除了 fly 行为外 Plane 和 Bird 间很难再找到其他共同特征。</p><hr><h4 id="Q10：子类初始化的顺序"><a href="#Q10：子类初始化的顺序" class="headerlink" title="Q10：子类初始化的顺序"></a>Q10：子类初始化的顺序</h4><p>① 父类静态代码块和静态变量。② 子类静态代码块和静态变量。③ 父类普通代码块和普通变量。④ 父类构造方法。⑤ 子类普通代码块和普通变量。⑥ 子类构造方法。</p><hr><h3 id="集合-7"><a href="#集合-7" class="headerlink" title="集合 7"></a>集合 7</h3><h4 id="Q1：说一说-ArrayList"><a href="#Q1：说一说-ArrayList" class="headerlink" title="Q1：说一说 ArrayList"></a>Q1：说一说 ArrayList</h4><p><strong>ArrayList</strong> 是容量可变的非线程安全列表，使用数组实现，集合扩容时会创建更大的数组，把原有数组复制到新数组。支持对元素的快速随机访问，但插入与删除速度很慢。ArrayList 实现了 RandomAcess 标记接口，如果一个类实现了该接口，那么表示使用索引遍历比迭代器更快。</p><p><strong>elementData</strong>是 ArrayList 的数据域，被 transient 修饰，序列化时会调用 writeObject 写入流，反序列化时调用 readObject 重新赋值到新对象的 elementData。原因是 elementData 容量通常大于实际存储元素的数量，所以只需发送真正有实际值的数组元素。</p><p><strong>size</strong> 是当前实际大小，elementData 大小大于等于 size。</p><p>**modCount **记录了 ArrayList 结构性变化的次数，继承自 AbstractList。所有涉及结构变化的方法都会增加该值。expectedModCount 是迭代器初始化时记录的 modCount 值，每次访问新元素时都会检查 modCount 和 expectedModCount 是否相等，不相等就会抛出异常。这种机制叫做 fail-fast，所有集合类都有这种机制。</p><hr><h4 id="Q2：说一说-LinkedList"><a href="#Q2：说一说-LinkedList" class="headerlink" title="Q2：说一说 LinkedList"></a>Q2：说一说 LinkedList</h4><p><strong>LinkedList</strong> 本质是双向链表，与 ArrayList 相比插入和删除速度更快，但随机访问元素很慢。除继承 AbstractList 外还实现了 Deque 接口，这个接口具有队列和栈的性质。成员变量被 transient 修饰，原理和 ArrayList 类似。</p><p>LinkedList 包含三个重要的成员：size、first 和 last。size 是双向链表中节点的个数，first 和 last 分别指向首尾节点的引用。</p><p>LinkedList 的优点在于可以将零散的内存单元通过附加引用的方式关联起来，形成按链路顺序查找的线性结构，内存利用率较高。</p><hr><h4 id="Q3：Set-有什么特点，有哪些实现？"><a href="#Q3：Set-有什么特点，有哪些实现？" class="headerlink" title="Q3：Set 有什么特点，有哪些实现？"></a>Q3：Set 有什么特点，有哪些实现？</h4><p><strong>Set</strong> 不允许元素重复且无序，常用实现有 HashSet、LinkedHashSet 和 TreeSet。</p><p><strong>HashSet</strong> 通过 HashMap 实现，HashMap 的 Key 即 HashSet 存储的元素，所有 Key 都使用相同的 Value ，一个名为 PRESENT 的 Object 类型常量。使用 Key 保证元素唯一性，但不保证有序性。由于 HashSet 是 HashMap 实现的，因此线程不安全。</p><p>HashSet 判断元素是否相同时，对于包装类型直接按值比较。对于引用类型先比较 hashCode 是否相同，不同则代表不是同一个对象，相同则继续比较 equals，都相同才是同一个对象。</p><p><strong>LinkedHashSet</strong> 继承自 HashSet，通过 LinkedHashMap 实现，使用双向链表维护元素插入顺序。</p><p><strong>TreeSet</strong> 通过 TreeMap 实现的，添加元素到集合时按照比较规则将其插入合适的位置，保证插入后的集合仍然有序。</p><hr><h4 id="Q4：TreeMap-有什么特点？"><a href="#Q4：TreeMap-有什么特点？" class="headerlink" title="Q4：TreeMap 有什么特点？"></a>Q4：TreeMap 有什么特点？</h4><p>TreeMap 基于红黑树实现，增删改查的平均和最差时间复杂度均为 O(log<del>n</del>) ，最大特点是 Key 有序。Key 必须实现 Comparable 接口或提供的 Comparator 比较器，所以 Key 不允许为 null。</p><p>HashMap 依靠 <code>hashCode</code> 和 <code>equals</code> 去重，而 TreeMap 依靠 Comparable 或 Comparator。 TreeMap 排序时，如果比较器不为空就会优先使用比较器的 <code>compare</code> 方法，否则使用 Key 实现的 Comparable 的 <code>compareTo</code> 方法，两者都不满足会抛出异常。</p><p>TreeMap 通过 <code>put</code> 和 <code>deleteEntry</code> 实现增加和删除树节点。插入新节点的规则有三个：① 需要调整的新节点总是红色的。② 如果插入新节点的父节点是黑色的，不需要调整。③ 如果插入新节点的父节点是红色的，由于红黑树不能出现相邻红色，进入循环判断，通过重新着色或左右旋转来调整。TreeMap 的插入操作就是按照 Key 的对比往下遍历，大于节点值向右查找，小于向左查找，先按照二叉查找树的特性操作，后续会重新着色和旋转，保持红黑树的特性。</p><hr><h4 id="Q5：HashMap-有什么特点？"><a href="#Q5：HashMap-有什么特点？" class="headerlink" title="Q5：HashMap 有什么特点？"></a>Q5：HashMap 有什么特点？</h4><p>JDK8 之前底层实现是数组 + 链表，JDK8 改为数组 + 链表/红黑树，节点类型从Entry 变更为 Node。主要成员变量包括存储数据的 table 数组、元素数量 size、加载因子 loadFactor。</p><p>table 数组记录 HashMap 的数据，每个下标对应一条链表，所有哈希冲突的数据都会被存放到同一条链表，Node/Entry 节点包含四个成员变量：key、value、next 指针和 hash 值。</p><p>HashMap 中数据以键值对的形式存在，键对应的 hash 值用来计算数组下标，如果两个元素 key 的 hash 值一样，就会发生哈希冲突，被放到同一个链表上，为使查询效率尽可能高，键的 hash 值要尽可能分散。</p><p>HashMap 默认初始化容量为 16，扩容容量必须是 2 的幂次方、最大容量为 1&lt;&lt; 30 、默认加载因子为 0.75。</p><hr><h4 id="Q6：HashMap-相关方法的源码？"><a href="#Q6：HashMap-相关方法的源码？" class="headerlink" title="Q6：HashMap 相关方法的源码？"></a>Q6：HashMap 相关方法的源码？</h4><p><strong>JDK8 之前</strong></p><p><strong>hash：计算元素 key 的散列值</strong></p><p>① 处理 String 类型时，调用 <code>stringHash32</code> 方法获取 hash 值。</p><p>② 处理其他类型数据时，提供一个相对于 HashMap 实例唯一不变的随机值 hashSeed 作为计算初始量。</p><p>③ 执行异或和无符号右移使 hash 值更加离散，减小哈希冲突概率。</p><p><strong>indexFor：计算元素下标</strong></p><p>将 hash 值和数组长度-1 进行与操作，保证结果不会超过 table 数组范围。</p><p><strong>get：获取元素的 value 值</strong></p><p>① 如果 key 为 null，调用 <code>getForNullKey</code> 方法，如果 size 为 0 表示链表为空，返回 null。如果 size 不为 0 说明存在链表，遍历 table[0] 链表，如果找到了 key 为 null 的节点则返回其 value，否则返回 null。</p><p>② 如果 key 为 不为 null，调用 <code>getEntry</code> 方法，如果 size 为 0 表示链表为空，返回 null 值。如果 size 不为 0，首先计算 key 的 hash 值，然后遍历该链表的所有节点，如果节点的 key 和 hash 值都和要查找的元素相同则返回其 Entry 节点。</p><p>③ 如果找到了对应的 Entry 节点，调用 <code>getValue</code> 方法获取其 value 并返回，否则返回 null。</p><p><strong>put：添加元素</strong></p><p>① 如果 key 为 null，直接存入 table[0]。</p><p>② 如果 key 不为 null，计算 key 的 hash 值。</p><p>③ 调用 <code>indexFor</code> 计算元素存放的下标 i。</p><p>④ 遍历 table[i] 对应的链表，如果 key 已存在，就更新 value 然后返回旧 value。</p><p>⑤ 如果 key 不存在，将 modCount 值加 1，使用 <code>addEntry</code> 方法增加一个节点并返回 null。</p><p><strong>resize：扩容数组</strong></p><p>① 如果当前容量达到了最大容量，将阈值设置为 Integer 最大值，之后扩容不再触发。</p><p>② 否则计算新的容量，将阈值设为 <code>newCapacity x loadFactor</code> 和 <code>最大容量 + 1</code> 的较小值。</p><p>③ 创建一个容量为 newCapacity 的 Entry 数组，调用 <code>transfer</code> 方法将旧数组的元素转移到新数组。</p><p><strong>transfer：转移元素</strong></p><p>① 遍历旧数组的所有元素，调用 <code>rehash</code> 方法判断是否需要哈希重构，如果需要就重新计算元素 key 的 hash 值。</p><p>② 调用 <code>indexFor</code> 方法计算元素存放的下标 i，利用头插法将旧数组的元素转移到新数组。</p><p><strong>JDK8</strong></p><p><strong>hash：计算元素 key 的散列值</strong></p><p>如果 key 为 null 返回 0，否则就将 key 的 <code>hashCode</code> 方法返回值高低16位异或，让尽可能多的位参与运算，让结果的 0 和 1 分布更加均匀，降低哈希冲突概率。</p><p><strong>put：添加元素</strong></p><p>① 调用 <code>putVal</code> 方法添加元素。</p><p>② 如果 table 为空或长度为 0 就进行扩容，否则计算元素下标位置，不存在就调用 <code>newNode</code> 创建一个节点。</p><p>③ 如果存在且是链表，如果首节点和待插入元素的 hash 和 key 都一样，更新节点的 value。</p><p>④ 如果首节点是 TreeNode 类型，调用 <code>putTreeVal</code> 方法增加一个树节点，每一次都比较插入节点和当前节点的大小，待插入节点小就往左子树查找，否则往右子树查找，找到空位后执行两个方法：<code>balanceInsert</code> 方法，插入节点并调整平衡、<code>moveRootToFront</code> 方法，由于调整平衡后根节点可能变化，需要重置根节点。</p><p>⑤ 如果都不满足，遍历链表，根据 hash 和 key 判断是否重复，决定更新 value 还是新增节点。如果遍历到了链表末尾则添加节点，如果达到建树阈值 7，还需要调用 <code>treeifyBin</code> 把链表重构为红黑树。</p><p>⑥ 存放元素后将 modCount 加 1，如果 <code>++size &gt; threshold</code> ，调用 <code>resize</code> 扩容。</p><p><strong>get ：获取元素的 value 值</strong></p><p>① 调用 <code>getNode</code> 方法获取 Node 节点，如果不是 null 就返回其 value 值，否则返回 null。</p><p>② <code>getNode</code> 方法中如果数组不为空且存在元素，先比较第一个节点和要查找元素的 hash 和 key ，如果都相同则直接返回。</p><p>③ 如果第二个节点是 TreeNode 类型则调用 <code>getTreeNode</code> 方法进行查找，否则遍历链表根据 hash 和 key 查找，如果没有找到就返回 null。</p><p><strong>resize：扩容数组</strong></p><p>重新规划长度和阈值，如果长度发生了变化，部分数据节点也要重新排列。</p><p><strong>重新规划长度</strong></p><p>① 如果当前容量 <code>oldCap &gt; 0</code> 且达到最大容量，将阈值设为 Integer 最大值，return 终止扩容。</p><p>② 如果未达到最大容量，当 <code>oldCap &lt;&lt; 1</code> 不超过最大容量就扩大为 2 倍。</p><p>③ 如果都不满足且当前扩容阈值 <code>oldThr &gt; 0</code>，使用当前扩容阈值作为新容量。</p><p>④ 否则将新容量置为默认初始容量 16，新扩容阈值置为 12。</p><p><strong>重新排列数据节点</strong></p><p>① 如果节点为 null 不进行处理。</p><p>② 如果节点不为 null 且没有next节点，那么通过节点的 hash 值和 <code>新容量-1</code> 进行与运算计算下标存入新的 table 数组。</p><p>③ 如果节点为 TreeNode 类型，调用 <code>split</code> 方法处理，如果节点数 hc 达到6 会调用 <code>untreeify</code> 方法转回链表。</p><p>④ 如果是链表节点，需要将链表拆分为 hash 值超出旧容量的链表和未超出容量的链表。对于<code>hash &amp; oldCap == 0</code> 的部分不需要做处理，否则需要放到新的下标位置上，新下标 = 旧下标 + 旧容量。</p><hr><h4 id="Q7：HashMap-为什么线程不安全？"><a href="#Q7：HashMap-为什么线程不安全？" class="headerlink" title="Q7：HashMap 为什么线程不安全？"></a>Q7：HashMap 为什么线程不安全？</h4><p>JDK7 存在死循环和数据丢失问题。</p><p><strong>数据丢失：</strong></p><ul><li><strong>并发赋值被覆盖：</strong> 在 <code>createEntry</code> 方法中，新添加的元素直接放在头部，使元素之后可以被更快访问，但如果两个线程同时执行到此处，会导致其中一个线程的赋值被覆盖。</li><li><strong>已遍历区间新增元素丢失：</strong> 当某个线程在 <code>transfer</code> 方法迁移时，其他线程新增的元素可能落在已遍历过的哈希槽上。遍历完成后，table 数组引用指向了 newTable，新增元素丢失。</li><li><strong>新表被覆盖：</strong> 如果 <code>resize</code> 完成，执行了 <code>table = newTable</code>，则后续元素就可以在新表上进行插入。但如果多线程同时 <code>resize</code> ，每个线程都会 new 一个数组，这是线程内的局部对象，线程之间不可见。迁移完成后<code>resize</code> 的线程会赋值给 table 线程共享变量，可能会覆盖其他线程的操作，在新表中插入的对象都会被丢弃。</li></ul><p><strong>死循环：</strong> 扩容时 <code>resize</code> 调用 <code>transfer</code> 使用头插法迁移元素，虽然 newTable 是局部变量，但原先 table 中的 Entry 链表是共享的，问题根源是 Entry 的 next 指针并发修改，某线程还没有将 table 设为 newTable 时用完了 CPU 时间片，导致数据丢失或死循环。</p><p>JDK8 在 <code>resize</code> 方法中完成扩容，并改用尾插法，不会产生死循环，但并发下仍可能丢失数据。可用 ConcurrentHashMap 或 <code>Collections.synchronizedMap</code> 包装成同步集合。</p><hr><h3 id="IO-流-6"><a href="#IO-流-6" class="headerlink" title="IO 流 6"></a>IO 流 6</h3><h4 id="Q1：同步-异步-阻塞-非阻塞-IO-的区别？"><a href="#Q1：同步-异步-阻塞-非阻塞-IO-的区别？" class="headerlink" title="Q1：同步/异步/阻塞/非阻塞 IO 的区别？"></a>Q1：同步/异步/阻塞/非阻塞 IO 的区别？</h4><p>同步和异步是通信机制，阻塞和非阻塞是调用状态。</p><p>同步 IO 是用户线程发起 IO 请求后需要等待或轮询内核 IO 操作完成后才能继续执行。异步 IO 是用户线程发起 IO 请求后可以继续执行，当内核 IO 操作完成后会通知用户线程，或调用用户线程注册的回调函数。</p><p>阻塞 IO 是 IO 操作需要彻底完成后才能返回用户空间 。非阻塞 IO 是 IO 操作调用后立即返回一个状态值，无需等 IO 操作彻底完成。</p><hr><h4 id="Q2：什么是-BIO？"><a href="#Q2：什么是-BIO？" class="headerlink" title="Q2：什么是 BIO？"></a>Q2：什么是 BIO？</h4><p><strong>BIO</strong> 是同步阻塞式 IO，JDK1.4 之前的 IO 模型。服务器实现模式为一个连接请求对应一个线程，服务器需要为每一个客户端请求创建一个线程，如果这个连接不做任何事会造成不必要的线程开销。可以通过线程池改善，这种 IO 称为伪异步 IO。适用连接数目少且服务器资源多的场景。</p><hr><h4 id="Q3：什么是-NIO？"><a href="#Q3：什么是-NIO？" class="headerlink" title="Q3：什么是 NIO？"></a>Q3：什么是 NIO？</h4><p><strong>NIO</strong> 是 JDK1.4 引入的同步非阻塞 IO。服务器实现模式为多个连接请求对应一个线程，客户端连接请求会注册到一个多路复用器 Selector ，Selector 轮询到连接有 IO 请求时才启动一个线程处理。适用连接数目多且连接时间短的场景。</p><p>同步是指线程还是要不断接收客户端连接并处理数据，非阻塞是指如果一个管道没有数据，不需要等待，可以轮询下一个管道。</p><p>核心组件：</p><ul><li><p><strong>Selector：</strong> 多路复用器，轮询检查多个 Channel 的状态，判断注册事件是否发生，即判断 Channel 是否处于可读或可写状态。使用前需要将 Channel 注册到 Selector，注册后会得到一个 SelectionKey，通过 SelectionKey 获取 Channel 和 Selector 相关信息。</p></li><li><p><strong>Channel：</strong> 双向通道，替换了 BIO 中的 Stream 流，不能直接访问数据，要通过 Buffer 来读写数据，也可以和其他 Channel 交互。</p></li><li><p><strong>Buffer：</strong> 缓冲区，本质是一块可读写数据的内存，用来简化数据读写。Buffer 三个重要属性：position 下次读写数据的位置，limit 本次读写的极限位置，capacity 最大容量。</p><ul><li><code>flip</code> 将写转为读，底层实现原理把 position 置 0，并把 limit 设为当前的 position 值。 </li><li><code>clear</code> 将读转为写模式（用于读完全部数据的情况，把 position 置 0，limit 设为 capacity）。 </li><li><code>compact</code> 将读转为写模式（用于存在未读数据的情况，让 position 指向未读数据的下一个）。 </li><li>通道方向和 Buffer 方向相反，读数据相当于向 Buffer 写，写数据相当于从 Buffer 读。 </li></ul><p>使用步骤：向 Buffer 写数据，调用 flip 方法转为读模式，从 Buffer 中读数据，调用 clear 或 compact 方法清空缓冲区。</p></li></ul><hr><h4 id="Q4：什么是-AIO？"><a href="#Q4：什么是-AIO？" class="headerlink" title="Q4：什么是 AIO？"></a>Q4：什么是 AIO？</h4><p>AIO 是 JDK7 引入的异步非阻塞 IO。服务器实现模式为一个有效请求对应一个线程，客户端的 IO 请求都是由操作系统先完成 IO 操作后再通知服务器应用来直接使用准备好的数据。适用连接数目多且连接时间长的场景。</p><p>异步是指服务端线程接收到客户端管道后就交给底层处理IO通信，自己可以做其他事情，非阻塞是指客户端有数据才会处理，处理好再通知服务器。</p><p>实现方式包括通过 Future 的 <code>get</code> 方法进行阻塞式调用以及实现 CompletionHandler 接口，重写请求成功的回调方法 <code>completed</code> 和请求失败回调方法 <code>failed</code>。</p><hr><h4 id="Q5：java-io-包下有哪些流？"><a href="#Q5：java-io-包下有哪些流？" class="headerlink" title="Q5：java.io 包下有哪些流？"></a>Q5：java.io 包下有哪些流？</h4><p>主要分为字符流和字节流，字符流一般用于文本文件，字节流一般用于图像或其他文件。</p><p>字符流包括了字符输入流 Reader 和字符输出流 Writer，字节流包括了字节输入流 InputStream 和字节输出流 OutputStream。字符流和字节流都有对应的缓冲流，字节流也可以包装为字符流，缓冲流带有一个 8KB 的缓冲数组，可以提高流的读写效率。除了缓冲流外还有过滤流 FilterReader、字符数组流 CharArrayReader、字节数组流 ByteArrayInputStream、文件流 FileInputStream 等。</p><hr><h4 id="Q6：序列化和反序列化是什么？"><a href="#Q6：序列化和反序列化是什么？" class="headerlink" title="Q6：序列化和反序列化是什么？"></a>Q6：序列化和反序列化是什么？</h4><p>Java 对象 JVM 退出时会全部销毁，如果需要将对象及状态持久化，就要通过序列化实现，将内存中的对象保存在二进制流中，需要时再将二进制流反序列化为对象。对象序列化保存的是对象的状态，因此属于类属性的静态变量不会被序列化。</p><p>常见的序列化有三种：</p><ul><li><p><strong>Java 原生序列化</strong></p><p>实现 <code>Serializabale</code> 标记接口，Java 序列化保留了对象类的元数据（如类、成员变量、继承类信息）以及对象数据，兼容性最好，但不支持跨语言，性能一般。序列化和反序列化必须保持序列化 ID 的一致，一般使用 <code>private static final long serialVersionUID</code> 定义序列化 ID，如果不设置编译器会根据类的内部实现自动生成该值。如果是兼容升级不应该修改序列化 ID，防止出错，如果是不兼容升级则需要修改。</p></li><li><p><strong>Hessian 序列化</strong></p><p>Hessian 序列化是一种支持动态类型、跨语言、基于对象传输的网络协议。Java 对象序列化的二进制流可以被其它语言反序列化。Hessian 协议的特性：① 自描述序列化类型，不依赖外部描述文件，用一个字节表示常用基础类型，极大缩短二进制流。② 语言无关，支持脚本语言。③ 协议简单，比 Java 原生序列化高效。Hessian 会把复杂对象所有属性存储在一个 Map 中序列化，当父类和子类存在同名成员变量时会先序列化子类再序列化父类，因此子类值会被父类覆盖。</p></li><li><p><strong>JSON 序列化</strong></p><p>JSON 序列化就是将数据对象转换为 JSON 字符串，在序列化过程中抛弃了类型信息，所以反序列化时只有提供类型信息才能准确进行。相比前两种方式可读性更好，方便调试。</p></li></ul><p>序列化通常会使用网络传输对象，而对象中往往有敏感数据，容易遭受攻击，Jackson 和 fastjson 等都出现过反序列化漏洞，因此不需要进行序列化的敏感属性传输时应加上 transient 关键字。transient 的作用就是把变量生命周期仅限于内存而不会写到磁盘里持久化，变量会被设为对应数据类型的零值。</p><hr><h2 id="JVM-32"><a href="#JVM-32" class="headerlink" title="JVM 32"></a>JVM 32</h2><h3 id="内存区域划分-8"><a href="#内存区域划分-8" class="headerlink" title="内存区域划分 8"></a>内存区域划分 8</h3><h4 id="Q1：运行时数据区是什么？"><a href="#Q1：运行时数据区是什么？" class="headerlink" title="Q1：运行时数据区是什么？"></a>Q1：运行时数据区是什么？</h4><p>虚拟机在执行 Java 程序的过程中会把它所管理的内存划分为若干不同的数据区，这些区域有各自的用途、创建和销毁时间。</p><p>线程私有：程序计数器、Java 虚拟机栈、本地方法栈。</p><p>线程共享：Java 堆、方法区。</p><hr><h4 id="Q2：程序计数器是什么？"><a href="#Q2：程序计数器是什么？" class="headerlink" title="Q2：程序计数器是什么？"></a>Q2：程序计数器是什么？</h4><p><strong>程序计数器</strong>是一块较小的内存空间，可以看作当前线程所执行字节码的行号指示器。字节码解释器工作时通过改变计数器的值选取下一条执行指令。分支、循环、跳转、线程恢复等功能都需要依赖计数器完成。是唯一在虚拟机规范中没有规定内存溢出情况的区域。</p><p>如果线程正在执行 Java 方法，计数器记录正在执行的虚拟机字节码指令地址。如果是本地方法，计数器值为 Undefined。</p><hr><h4 id="Q3：Java-虚拟机栈的作用？"><a href="#Q3：Java-虚拟机栈的作用？" class="headerlink" title="Q3：Java 虚拟机栈的作用？"></a>Q3：Java 虚拟机栈的作用？</h4><p><strong>Java 虚拟机栈</strong>来描述 Java 方法的内存模型。每当有新线程创建时就会分配一个栈空间，线程结束后栈空间被回收，栈与线程拥有相同的生命周期。栈中元素用于支持虚拟机进行方法调用，每个方法在执行时都会创建一个栈帧存储方法的局部变量表、操作栈、动态链接和方法出口等信息。每个方法从调用到执行完成，就是栈帧从入栈到出栈的过程。</p><p>有两类异常：① 线程请求的栈深度大于虚拟机允许的深度抛出 StackOverflowError。② 如果 JVM 栈容量可以动态扩展，栈扩展无法申请足够内存抛出 OutOfMemoryError（HotSpot 不可动态扩展，不存在此问题）。</p><hr><h4 id="Q4：本地方法栈的作用？"><a href="#Q4：本地方法栈的作用？" class="headerlink" title="Q4：本地方法栈的作用？"></a>Q4：本地方法栈的作用？</h4><p><strong>本地方法栈</strong>与虚拟机栈作用相似，不同的是虚拟机栈为虚拟机执行 Java 方法服务，本地方法栈为虚本地方法服务。调用本地方法时虚拟机栈保持不变，动态链接并直接调用指定本地方法。</p><p>虚拟机规范对本地方法栈中方法的语言与数据结构无强制规定，虚拟机可自由实现，例如 HotSpot 将虚拟机栈和本地方法栈合二为一。</p><p>本地方法栈在栈深度异常和栈扩展失败时分别抛出 StackOverflowError 和 OutOfMemoryError。</p><hr><h4 id="Q5：堆的作用是什么？"><a href="#Q5：堆的作用是什么？" class="headerlink" title="Q5：堆的作用是什么？"></a>Q5：堆的作用是什么？</h4><p><strong>堆</strong>是虚拟机所管理的内存中最大的一块，被所有线程共享的，在虚拟机启动时创建。堆用来存放对象实例，Java 里几乎所有对象实例都在堆分配内存。堆可以处于物理上不连续的内存空间，逻辑上应该连续，但对于例如数组这样的大对象，多数虚拟机实现出于简单、存储高效的考虑会要求连续的内存空间。</p><p>堆既可以被实现成固定大小，也可以是可扩展的，可通过 <code>-Xms</code> 和 <code>-Xmx</code> 设置堆的最小和最大容量，当前主流 JVM 都按照可扩展实现。如果堆没有内存完成实例分配也无法扩展，抛出 OutOfMemoryError。</p><hr><h4 id="Q6：方法区的作用是什么？"><a href="#Q6：方法区的作用是什么？" class="headerlink" title="Q6：方法区的作用是什么？"></a>Q6：方法区的作用是什么？</h4><p><strong>方法区</strong>用于存储被虚拟机加载的类型信息、常量、静态变量、即时编译器编译后的代码缓存等数据。</p><p>JDK8 之前使用永久代实现方法区，容易内存溢出，因为永久代有 <code>-XX:MaxPermSize</code> 上限，即使不设置也有默认大小。JDK7 把放在永久代的字符串常量池、静态变量等移出，JDK8 中永久代完全废弃，改用在本地内存中实现的元空间代替，把 JDK 7 中永久代剩余内容（主要是类型信息）全部移到元空间。</p><p>虚拟机规范对方法区的约束宽松，除和堆一样不需要连续内存和可选择固定大小/可扩展外，还可以不实现垃圾回收。垃圾回收在方法区出现较少，主要目标针对常量池和类型卸载。如果方法区无法满足新的内存分配需求，将抛出 OutOfMemoryError。</p><hr><h4 id="Q7：运行时常量池的作用是什么"><a href="#Q7：运行时常量池的作用是什么" class="headerlink" title="Q7：运行时常量池的作用是什么?"></a>Q7：运行时常量池的作用是什么?</h4><p>运行时常量池是方法区的一部分，Class 文件中除了有类的版本、字段、方法、接口等描述信息外，还有一项信息是常量池表，用于存放编译器生成的<strong>各种字面量与符号引用</strong>，这部分内容在类加载后存放到运行时常量池。一般除了保存 Class 文件中描述的符号引用外，还会把符号引用翻译的直接引用也存储在运行时常量池。</p><p>运行时常量池相对于 Class 文件常量池的一个重要特征是动态性，Java 不要求常量只有编译期才能产生，运行期间也可以将新的常量放入池中，这种特性利用较多的是 String 的 <code>intern</code> 方法。</p><p>运行时常量池是方法区的一部分，受到方法区内存的限制，当常量池无法再申请到内存时会抛出 OutOfMemoryError。</p><hr><h4 id="Q8：直接内存是什么？"><a href="#Q8：直接内存是什么？" class="headerlink" title="Q8：直接内存是什么？"></a>Q8：直接内存是什么？</h4><p>直接内存不属于运行时数据区，也不是虚拟机规范定义的内存区域，但这部分内存被频繁使用，而且可能导致内存溢出。</p><p>JDK1.4 中新加入了 NIO 这种基于通道与缓冲区的 IO，它可以使用 Native 函数库直接分配堆外内存，通过一个堆里的 DirectByteBuffer 对象作为内存的引用进行操作，避免了在 Java 堆和 Native堆来回复制数据。</p><p>直接内存的分配不受 Java 堆大小的限制，但还是会受到本机总内存及处理器寻址空间限制，一般配置虚拟机参数时会根据实际内存设置 <code>-Xmx</code> 等参数信息，但经常忽略直接内存，使内存区域总和大于物理内存限制，导致动态扩展时出现 OOM。</p><p>由直接内存导致的内存溢出，一个明显的特征是在 Heap Dump 文件中不会看见明显的异常，如果发现内存溢出后产生的 Dump 文件很小，而程序中又直接或间接使用了直接内存（典型的间接使用就是 NIO），那么就可以考虑检查直接内存方面的原因。</p><hr><h3 id="内存溢出-5"><a href="#内存溢出-5" class="headerlink" title="内存溢出 5"></a>内存溢出 5</h3><h4 id="Q1：内存溢出和内存泄漏的区别？"><a href="#Q1：内存溢出和内存泄漏的区别？" class="headerlink" title="Q1：内存溢出和内存泄漏的区别？"></a>Q1：内存溢出和内存泄漏的区别？</h4><p>内存溢出 OutOfMemory，指程序在申请内存时，没有足够的内存空间供其使用。</p><p>内存泄露 Memory Leak，指程序在申请内存后，无法释放已申请的内存空间，内存泄漏最终将导致内存溢出。</p><hr><h4 id="Q2：堆溢出的原因？"><a href="#Q2：堆溢出的原因？" class="headerlink" title="Q2：堆溢出的原因？"></a>Q2：堆溢出的原因？</h4><p>堆用于存储对象实例，只要不断创建对象并保证 GC Roots 到对象有可达路径避免垃圾回收，随着对象数量的增加，总容量触及最大堆容量后就会 OOM，例如在 while 死循环中一直 new 创建实例。</p><p>堆 OOM 是实际应用中最常见的 OOM，处理方法是通过内存映像分析工具对 Dump 出的堆转储快照分析，确认内存中导致 OOM 的对象是否必要，分清到底是内存泄漏还是内存溢出。</p><p>如果是内存泄漏，通过工具查看泄漏对象到 GC Roots 的引用链，找到泄露对象是通过怎样的引用路径、与哪些 GC Roots 关联才导致无法回收，一般可以准确定位到产生内存泄漏代码的具***置。</p><p>如果不是内存泄漏，即内存中对象都必须存活，应当检查 JVM 堆参数，与机器内存相比是否还有向上调整的空间。再从代码检查是否存在某些对象生命周期过长、持有状态时间过长、存储结构设计不合理等情况，尽量减少程序运行期的内存消耗。</p><hr><h4 id="Q3：栈溢出的原因？"><a href="#Q3：栈溢出的原因？" class="headerlink" title="Q3：栈溢出的原因？"></a>Q3：栈溢出的原因？</h4><p>由于 HotSpot 不区分虚拟机和本地方法栈，设置本地方法栈大小的参数没有意义，栈容量只能由 <code>-Xss</code> 参数来设定，存在两种异常：</p><p><strong>StackOverflowError：</strong> 如果线程请求的栈深度大于虚拟机所允许的深度，将抛出 StackOverflowError，例如一个递归方法不断调用自己。该异常有明确错误堆栈可供分析，容易定位到问题所在。</p><p><strong>OutOfMemoryError：</strong> 如果 JVM 栈可以动态扩展，当扩展无法申请到足够内存时会抛出 OutOfMemoryError。HotSpot 不支持虚拟机栈扩展，所以除非在创建线程申请内存时就因无法获得足够内存而出现 OOM，否则在线程运行时是不会因为扩展而导致溢出的。</p><hr><h4 id="Q4：运行时常量池溢出的原因？"><a href="#Q4：运行时常量池溢出的原因？" class="headerlink" title="Q4：运行时常量池溢出的原因？"></a>Q4：运行时常量池溢出的原因？</h4><p>String 的 <code>intern</code> 方法是一个本地方法，作用是如果字符串常量池中已包含一个等于此 String 对象的字符串，则返回池中这个字符串的 String 对象的引用，否则将此 String 对象包含的字符串添加到常量池并返回此 String 对象的引用。</p><p>在 JDK6 及之前常量池分配在永久代，因此可以通过 <code>-XX:PermSize</code> 和 <code>-XX:MaxPermSize</code> 限制永久代大小，间接限制常量池。在 while 死循环中调用 <code>intern</code> 方法导致运行时常量池溢出。在 JDK7 后不会出现该问题，因为存放在永久代的字符串常量池已经被移至堆中。</p><hr><h4 id="Q5：方法区溢出的原因？"><a href="#Q5：方法区溢出的原因？" class="headerlink" title="Q5：方法区溢出的原因？"></a>Q5：方法区溢出的原因？</h4><p>方法区主要存放类型信息，如类名、访问修饰符、常量池、字段描述、方法描述等。只要不断在运行时产生大量类，方法区就会溢出。例如使用 JDK 反射或 CGLib 直接操作字节码在运行时生成大量的类。很多框架如 Spring、Hibernate 等对类增强时都会使用 CGLib 这类字节码技术，增强的类越多就需要越大的方法区保证动态生成的新类型可以载入内存，也就更容易导致方法区溢出。</p><p>JDK8 使用元空间取代永久代，HotSpot 提供了一些参数作为元空间防御措施，例如 <code>-XX:MetaspaceSize</code> 指定元空间初始大小，达到该值会触发 GC 进行类型卸载，同时收集器会对该值进行调整，如果释放大量空间就适当降低该值，如果释放很少空间就适当提高。</p><hr><h3 id="创建对象-5"><a href="#创建对象-5" class="headerlink" title="创建对象 5"></a>创建对象 5</h3><h4 id="Q1：创建对象的过程是什么？"><a href="#Q1：创建对象的过程是什么？" class="headerlink" title="Q1：创建对象的过程是什么？"></a>Q1：创建对象的过程是什么？</h4><p><strong>字节码角度</strong></p><ul><li><strong>NEW：</strong> 如果找不到 Class 对象则进行类加载。加载成功后在堆中分配内存，从 Object 到本类路径上的所有属性都要分配。分配完毕后进行零值设置。最后将指向实例对象的引用变量压入虚拟机栈顶。 </li><li>**DUP： ** 在栈顶复制引用变量，这时栈顶有两个指向堆内实例的引用变量。两个引用变量的目的不同，栈底的引用用于赋值或保存局部变量表，栈顶的引用作为句柄调用相关方法。 </li><li><strong>INVOKESPECIAL：</strong> 通过栈顶的引用变量调用 init 方法。 </li></ul><p><strong>执行角度</strong></p><p>① 当 JVM 遇到字节码 new 指令时，首先将检查该指令的参数能否在常量池中定位到一个类的符号引用，并检查引用代表的类是否已被加载、解析和初始化，如果没有就先执行类加载。</p><p>② 在类加载检查通过后虚拟机将为新生对象分配内存。</p><p>③ 内存分配完成后虚拟机将成员变量设为零值，保证对象的实例字段可以不赋初值就使用。</p><p>④ 设置对象头，包括哈希码、GC 信息、锁信息、对象所属类的类元信息等。</p><p>⑤ 执行 init 方法，初始化成员变量，执行实例化代码块，调用类的构造方法，并把堆内对象的首地址赋值给引用变量。</p><hr><h4 id="Q2：对象分配内存的方式有哪些？"><a href="#Q2：对象分配内存的方式有哪些？" class="headerlink" title="Q2：对象分配内存的方式有哪些？"></a>Q2：对象分配内存的方式有哪些？</h4><p>对象所需内存大小在类加载完成后便可完全确定，分配空间的任务实际上等于把一块确定大小的内存块从 Java 堆中划分出来。</p><p><strong>指针碰撞：</strong> 假设 Java 堆内存规整，被使用过的内存放在一边，空闲的放在另一边，中间放着一个指针作为分界指示器，分配内存就是把指针向空闲方向挪动一段与对象大小相等的距离。</p><p><strong>空闲列表：</strong> 如果 Java 堆内存不规整，虚拟机必须维护一个列表记录哪些内存可用，在分配时从列表中找到一块足够大的空间划分给对象并更新列表记录。</p><p>选择哪种分配方式由堆是否规整决定，堆是否规整由垃圾收集器是否有空间压缩能力决定。使用 Serial、ParNew 等收集器时，系统采用指针碰撞；使用 CMS 这种基于清除算法的垃圾收集器时，采用空间列表。</p><hr><h4 id="Q3：对象分配内存是否线程安全？"><a href="#Q3：对象分配内存是否线程安全？" class="headerlink" title="Q3：对象分配内存是否线程安全？"></a>Q3：对象分配内存是否线程安全？</h4><p>对象创建十分频繁，即使修改一个指针的位置在并发下也不是线程安全的，可能正给对象 A 分配内存，指针还没来得及修改，对象 B 又使用了指针来分配内存。</p><p>解决方法：① CAS 加失败重试保证更新原子性。② 把内存分配按线程划分在不同空间，即每个线程在 Java 堆中预先分配一小块内存，叫做本地线程分配缓冲 TLAB，哪个线程要分配内存就在对应的 TLAB 分配，TLAB 用完了再进行同步。</p><hr><h4 id="Q4：对象的内存布局了解吗？"><a href="#Q4：对象的内存布局了解吗？" class="headerlink" title="Q4：对象的内存布局了解吗？"></a>Q4：对象的内存布局了解吗？</h4><p>对象在堆内存的存储布局可分为对象头、实例数据和对齐填充。</p><p><strong>对象头</strong>占 12B，包括对象标记和类型指针。对象标记存储对象自身的运行时数据，如哈希码、GC 分代年龄、锁标志、偏向线程 ID 等，这部分占 8B，称为 Mark Word。Mark Word 被设计为动态数据结构，以便在极小的空间存储更多数据，根据对象状态复用存储空间。</p><p>类型指针是对象指向它的类型元数据的指针，占 4B。JVM 通过该指针来确定对象是哪个类的实例。</p><p><strong>实例数据</strong>是对象真正存储的有效信息，即本类对象的实例成员变量和所有可见的父类成员变量。存储顺序会受到虚拟机分配策略参数和字段在源码中定义顺序的影响。相同宽度的字段总是被分配到一起存放，在满足该前提条件的情况下父类中定义的变量会出现在子类之前。</p><p><strong>对齐填充</strong>不是必然存在的，仅起占位符作用。虚拟机的自动内存管理系统要求任何对象的大小必须是 8B 的倍数，对象头已被设为 8B 的 1 或 2 倍，如果对象实例数据部分没有对齐，需要对齐填充补全。</p><hr><h4 id="Q5：对象的访问方式有哪些？"><a href="#Q5：对象的访问方式有哪些？" class="headerlink" title="Q5：对象的访问方式有哪些？"></a>Q5：对象的访问方式有哪些？</h4><p>Java 程序会通过栈上的 reference 引用操作堆对象，访问方式由虚拟机决定，主流访问方式主要有句柄和直接指针。</p><p><strong>句柄：</strong> 堆会划分出一块内存作为句柄池，reference 中存储对象的句柄地址，句柄包含对象实例数据与类型数据的地址信息。优点是 reference 中存储的是稳定句柄地址，在 GC 过程中对象被移动时只会改变句柄的实例数据指针，而 reference 本身不需要修改。</p><p><strong>直接指针：</strong> 堆中对象的内存布局就必须考虑如何放置访问类型数据的相关信息，reference 存储对象地址，如果只是访问对象本身就不需要多一次间接访问的开销。优点是速度更快，节省了一次指针定位的时间开销，HotSpot 主要使用直接指针进行对象访问。</p><hr><h3 id="垃圾回收-7"><a href="#垃圾回收-7" class="headerlink" title="垃圾回收 7"></a>垃圾回收 7</h3><h4 id="Q1：如何判断对象是否是垃圾？"><a href="#Q1：如何判断对象是否是垃圾？" class="headerlink" title="Q1：如何判断对象是否是垃圾？"></a>Q1：如何判断对象是否是垃圾？</h4><p><strong>引用计数：</strong>在对象中添加一个引用计数器，如果被引用计数器加 1，引用失效时计数器减 1，如果计数器为 0 则被标记为垃圾。原理简单，效率高，但是在 Java 中很少使用，因为存在对象间循环引用的问题，导致计数器无法清零。</p><p><strong>可达性分析：</strong>主流语言的内存管理都使用可达性分析判断对象是否存活。基本思路是通过一系列称为 GC Roots 的根对象作为起始节点集，从这些节点开始，根据引用关系向下搜索，搜索过程走过的路径称为引用链，如果某个对象到 GC Roots 没有任何引用链相连，则会被标记为垃圾。可作为 GC Roots 的对象包括虚拟机栈和本地方法栈中引用的对象、类静态属性引用的对象、常量引用的对象。</p><hr><h4 id="Q2：Java-的引用有哪些类型？"><a href="#Q2：Java-的引用有哪些类型？" class="headerlink" title="Q2：Java 的引用有哪些类型？"></a>Q2：Java 的引用有哪些类型？</h4><p>JDK1.2 后对引用进行了扩充，按强度分为四种：</p><p><strong>强引用：</strong> 最常见的引用，例如 <code>Object obj = new Object()</code>’ 就属于强引用。只要对象有强引用指向且 GC Roots 可达，在内存回收时即使濒临内存耗尽也不会被回收。</p><p><strong>软引用：</strong> 弱于强引用，描述非必需对象。在系统将发生内存溢出前，会把软引用关联的对象加入回收范围以获得更多内存空间。用来缓存服务器中间计算结果及不需要实时保存的用户行为等。</p><p><strong>弱引用：</strong> 弱于软引用，描述非必需对象。弱引用关联的对象只能生存到下次 YGC 前，当垃圾收集器开始工作时无论当前内存是否足够都会回收只被弱引用关联的对象。由于 YGC 具有不确定性，因此弱引用何时被回收也不确定。</p><p><strong>虚引用：</strong> 最弱的引用，定义完成后无法通过该引用获取对象。唯一目的就是为了能在对象被回收时收到一个系统通知。虚引用必须与引用队列联合使用，垃圾回收时如果出现虚引用，就会在回收对象前把这个虚引用加入引用队列。</p><hr><h4 id="Q3：有哪些-GC-算法？"><a href="#Q3：有哪些-GC-算法？" class="headerlink" title="Q3：有哪些 GC 算法？"></a>Q3：有哪些 GC 算法？</h4><p><strong>标记-清除算法</strong></p><p>分为标记和清除阶段，首先从每个 GC Roots 出发依次标记有引用关系的对象，最后清除没有标记的对象。</p><p>执行效率不稳定，如果堆包含大量对象且大部分需要回收，必须进行大量标记清除，导致效率随对象数量增长而降低。</p><p>存在内存空间碎片化问题，会产生大量不连续的内存碎片，导致以后需要分配大对象时容易触发 Full GC。</p><p><strong>标记-复制算法</strong></p><p>为了解决内存碎片问题，将可用内存按容量划分为大小相等的两块，每次只使用其中一块。当使用的这块空间用完了，就将存活对象复制到另一块，再把已使用过的内存空间一次清理掉。主要用于进行新生代。</p><p>实现简单、运行高效，解决了内存碎片问题。 代价是可用内存缩小为原来的一半，浪费空间。</p><p>HotSpot 把新生代划分为一块较大的 Eden 和两块较小的 Survivor，每次分配内存只使用 Eden 和其中一块 Survivor。垃圾收集时将 Eden 和 Survivor 中仍然存活的对象一次性复制到另一块 Survivor 上，然后直接清理掉 Eden 和已用过的那块 Survivor。HotSpot 默认Eden 和 Survivor 的大小比例是 8:1，即每次新生代中可用空间为整个新生代的 90%。</p><p><strong>标记-整理算法</strong></p><p>标记-复制算法在对象存活率高时要进行较多复制操作，效率低。如果不想浪费空间，就需要有额外空间分配担保，应对被使用内存中所有对象都存活的极端情况，所以老年代一般不使用此算法。</p><p>老年代使用标记-整理算法，标记过程与标记-清除算法一样，但不直接清理可回收对象，而是让所有存活对象都向内存空间一端移动，然后清理掉边界以外的内存。</p><p>标记-清除与标记-整理的差异在于前者是一种非移动式算法而后者是移动式的。如果移动存活对象，尤其是在老年代这种每次回收都有大量对象存活的区域，是一种极为负重的操作，而且移动必须全程暂停用户线程。如果不移动对象就会导致空间碎片问题，只能依赖更复杂的内存分配器和访问器解决。</p><hr><h4 id="Q4：你知道哪些垃圾收集器？"><a href="#Q4：你知道哪些垃圾收集器？" class="headerlink" title="Q4：你知道哪些垃圾收集器？"></a>Q4：你知道哪些垃圾收集器？</h4><p><strong>Serial</strong></p><p>最基础的收集器，使用复制算法、单线程工作，只用一个处理器或一条线程完成垃圾收集，进行垃圾收集时必须暂停其他所有工作线程。</p><p>Serial 是虚拟机在客户端模式的默认新生代收集器，简单高效，对于内存受限的环境它是所有收集器中额外内存消耗最小的，对于处理器核心较少的环境，Serial 由于没有线程交互开销，可获得最高的单线程收集效率。</p><p><strong>ParNew</strong></p><p>Serial 的多线程版本，除了使用多线程进行垃圾收集外其余行为完全一致。</p><p>ParNew 是虚拟机在服务端模式的默认新生代收集器，一个重要原因是除了 Serial 外只有它能与 CMS 配合。自从 JDK 9 开始，ParNew 加 CMS 不再是官方推荐的解决方案，官方希望它被 G1 取代。</p><p><strong>Parallel Scavenge</strong></p><p>新生代收集器，基于复制算法，是可并行的多线程收集器，与 ParNew 类似。</p><p>特点是它的关注点与其他收集器不同，Parallel Scavenge 的目标是达到一个可控制的吞吐量，吞吐量就是处理器用于运行用户代码的时间与处理器消耗总时间的比值。</p><p><strong>Serial Old</strong></p><p>Serial 的老年代版本，单线程工作，使用标记-整理算法。</p><p>Serial Old 是虚拟机在客户端模式的默认老年代收集器，用于服务端有两种用途：① JDK5 及之前与 Parallel Scavenge 搭配。② 作为CMS 失败预案。</p><p><strong>Parellel Old</strong></p><p>Parallel Scavenge 的老年代版本，支持多线程，基于标记-整理算法。JDK6 提供，注重吞吐量可考虑 Parallel Scavenge 加 Parallel Old。</p><p><strong>CMS</strong></p><p>以获取最短回收停顿时间为目标，基于标记-清除算法，过程相对复杂，分为四个步骤：<code>初始标记、并发标记、重新标记、并发清除</code>。</p><p>初始标记和重新标记需要 STW（Stop The World，系统停顿），初始标记仅是标记 GC Roots 能直接关联的对象，速度很快。并发标记从 GC Roots 的直接关联对象开始遍历整个对象图，耗时较长但不需要停顿用户线程。重新标记则是为了修正并发标记期间因用户程序运作而导致标记产生变动的那部分记录。并发清除清理标记阶段判断的已死亡对象，不需要移动存活对象，该阶段也可与用户线程并发。</p><p>缺点：① 对处理器资源敏感，并发阶段虽然不会导致用户线程暂停，但会降低吞吐量。② 无法处理浮动垃圾，有可能出现并发失败而导致 Full GC。③ 基于标记-清除算法，产生空间碎片。</p><p><strong>G1</strong></p><p>开创了收集器面向局部收集的设计思路和基于 Region 的内存布局，主要面向服务端，最初设计目标是替换 CMS。</p><p>G1 之前的收集器，垃圾收集目标要么是整个新生代，要么是整个老年代或整个堆。而 G1 可面向堆任何部分来组成回收集进行回收，衡量标准不再是分代，而是哪块内存中存放的垃圾数量最多，回收受益最大。</p><p>跟踪各 Region 里垃圾的价值，价值即回收所获空间大小以及回收所需时间的经验值，在后台维护一个优先级列表，每次根据用户设定允许的收集停顿时间优先处理回收价值最大的 Region。这种方式保证了 G1 在有限时间内获取尽可能高的收集效率。</p><p>G1 运作过程：</p><ul><li><strong>初始标记：</strong>标记 GC Roots 能直接关联到的对象，让下一阶段用户线程并发运行时能正确地在可用 Region 中分配新对象。需要 STW 但耗时很短，在 Minor GC 时同步完成。 </li><li><strong>并发标记：</strong>从 GC Roots 开始对堆中对象进行可达性分析，递归扫描整个堆的对象图。耗时长但可与用户线程并发，扫描完成后要重新处理 SATB 记录的在并发时有变动的对象。 </li><li><strong>最终标记：</strong>对用户线程做短暂暂停，处理并发阶段结束后仍遗留下来的少量 SATB 记录。 </li><li><strong>筛选回收：</strong>对各 Region 的回收价值排序，根据用户期望停顿时间制定回收计划。必须暂停用户线程，由多条收集线程并行完成。 </li></ul><p>可由用户指定期望停顿时间是 G1 的一个强大功能，但该值不能设得太低，一般设置为100~300 ms。</p><hr><h4 id="Q5：ZGC-了解吗？"><a href="#Q5：ZGC-了解吗？" class="headerlink" title="Q5：ZGC 了解吗？"></a>Q5：ZGC 了解吗？</h4><p>JDK11 中加入的具有实验性质的低延迟垃圾收集器，目标是尽可能在不影响吞吐量的前提下，实现在任意堆内存大小都可以把停顿时间限制在 10ms 以内的低延迟。</p><p>基于 Region 内存布局，不设分代，使用了读屏障、染色指针和内存多重映射等技术实现可并发的标记-整理，以低延迟为首要目标。</p><p>ZGC 的 Region 具有动态性，是动态创建和销毁的，并且容量大小也是动态变化的。</p><hr><h4 id="Q6：你知道哪些内存分配与回收策略？"><a href="#Q6：你知道哪些内存分配与回收策略？" class="headerlink" title="Q6：你知道哪些内存分配与回收策略？"></a>Q6：你知道哪些内存分配与回收策略？</h4><p><strong>对象优先在 Eden 区分配</strong></p><p>大多数情况下对象在新生代 Eden 区分配，当 Eden 没有足够空间时将发起一次 Minor GC。</p><p><strong>大对象直接进入老年代</strong></p><p>大对象指需要大量连续内存空间的对象，典型是很长的字符串或数量庞大的数组。大对象容易导致内存还有不少空间就提前触发垃圾收集以获得足够的连续空间。</p><p>HotSpot 提供了 <code>-XX:PretenureSizeThreshold</code> 参数，大于该值的对象直接在老年代分配，避免在 Eden 和 Survivor 间来回复制。</p><p><strong>长期存活对象进入老年代</strong></p><p>虚拟机给每个对象定义了一个对象年龄计数器，存储在对象头。如果经历过第一次 Minor GC 仍然存活且能被 Survivor 容纳，该对象就会被移动到 Survivor 中并将年龄设置为 1。对象在 Survivor 中每熬过一次 Minor GC 年龄就加 1 ，当增加到一定程度（默认15）就会被晋升到老年代。对象晋升老年代的阈值可通过 <code>-XX:MaxTenuringThreshold</code> 设置。</p><p><strong>动态对象年龄判定</strong></p><p>为了适应不同内存状况，虚拟机不要求对象年龄达到阈值才能晋升老年代，如果在 Survivor 中相同年龄所有对象大小的总和大于 Survivor 的一半，年龄不小于该年龄的对象就可以直接进入老年代。</p><p><strong>空间分配担保</strong></p><p>MinorGC 前虚拟机必须检查老年代最大可用连续空间是否大于新生代对象总空间，如果满足则说明这次 Minor GC 确定安全。</p><p>如果不满足，虚拟机会查看 <code>-XX:HandlePromotionFailure</code> 参数是否允许担保失败，如果允许会继续检查老年代最大可用连续空间是否大于历次晋升老年代对象的平均大小，如果满足将冒险尝试一次 Minor GC，否则改成一次 FullGC。</p><p>冒险是因为新生代使用复制算法，为了内存利用率只使用一个 Survivor，大量对象在 Minor GC 后仍然存活时，需要老年代进行分配担保，接收 Survivor 无法容纳的对象。</p><hr><h4 id="Q7：你知道哪些故障处理工具？"><a href="#Q7：你知道哪些故障处理工具？" class="headerlink" title="Q7：你知道哪些故障处理工具？"></a>Q7：你知道哪些故障处理工具？</h4><p><strong>jps：虚拟机进程状况工具</strong></p><p>功能和 ps 命令类似：可以列出正在运行的虚拟机进程，显示虚拟机执行主类名称以及这些进程的本地虚拟机唯一 ID（LVMID)。LVMID 与操作系统的进程 ID（PID）一致，使用 Windows 的任务管理器或 UNIX 的 ps 命令也可以查询到虚拟机进程的 LVMID，但如果同时启动了多个虚拟机进程，必须依赖 jps 命令。</p><p><strong>jstat：虚拟机统计信息监视工具</strong></p><p>用于监视虚拟机各种运行状态信息。可以显示本地或远程虚拟机进程中的类加载、内存、垃圾收集、即时编译器等运行时数据，在没有 GUI 界面的服务器上是运行期定位虚拟机性能问题的常用工具。</p><p>参数含义：S0 和 S1 表示两个 Survivor，E 表示新生代，O 表示老年代，YGC 表示 Young GC 次数，YGCT 表示 Young GC 耗时，FGC 表示 Full GC 次数，FGCT 表示 Full GC 耗时，GCT 表示 GC 总耗时。</p><p><strong>jinfo：Java 配置信息工具</strong></p><p>实时查看和调整虚拟机各项参数，使用 jps 的 -v 参数可以查看虚拟机启动时显式指定的参数，但如果想知道未显式指定的参数值只能使用 jinfo 的 -flag 查询。</p><p><strong>jmap：Java 内存映像工具</strong></p><p>用于生成堆转储快照，还可以查询 finalize 执行队列、Java 堆和方法区的详细信息，如空间使用率，当前使用的是哪种收集器等。和 jinfo 一样，部分功能在 Windows 受限，除了生成堆转储快照的 -dump 和查看每个类实例的 -histo 外，其余选项只能在 Linux 使用。</p><p><strong>jhat：虚拟机堆转储快照分析工具</strong></p><p>JDK 提供 jhat 与 jmap 搭配使用分析 jmap 生成的堆转储快照。jhat 内置了一个微型的 HTTP/Web 服务器，生成堆转储快照的分析结果后可以在浏览器查看。</p><p><strong>jstack：Java 堆栈跟踪工具</strong></p><p>用于生成虚拟机当前时刻的线程快照。线程快照就是当前虚拟机内每一条线程正在执行的方法堆栈的集合，生成线程快照的目的通常是定位线程出现长时间停顿的原因，如线程间死锁、死循环、请求外部资源导致的长时间挂起等。线程出现停顿时通过 jstack 查看各个线程的调用堆栈，可以获知没有响应的线程在后台做什么或等什么资源。</p><hr><h3 id="类加载机制-7"><a href="#类加载机制-7" class="headerlink" title="类加载机制 7"></a>类加载机制 7</h3><h4 id="Q1：Java-程序是怎样运行的？"><a href="#Q1：Java-程序是怎样运行的？" class="headerlink" title="Q1：Java 程序是怎样运行的？"></a>Q1：Java 程序是怎样运行的？</h4><ul><li><p>首先通过 Javac 编译器将 <code>.java</code> 转为 JVM 可加载的 <code>.class</code> 字节码文件。</p><p>Javac 是由 Java 编写的程序，编译过程可以分为： ① 词法解析，通过空格分割出单词、操作符、控制符等信息，形成 token 信息流，传递给语法解析器。② 语法解析，把 token 信息流按照 Java 语法规则组装成语法树。③ 语义分析，检查关键字使用是否合理、类型是否匹配、作用域是否正确等。④ 字节码生成，将前面各个步骤的信息转换为字节码。</p><p>字节码必须通过类加载过程加载到 JVM 后才可以执行，执行有三种模式，解释执行、JIT 编译执行、JIT 编译与解释器混合执行（主流 JVM 默认执行的方式）。混合模式的优势在于解释器在启动时先解释执行，省去编译时间。</p></li><li><p>之后通过即时编译器 JIT 把字节码文件编译成本地机器码。</p><p>Java 程序最初都是通过解释器进行解释执行的，当虚拟机发现某个方法或代码块的运行特别频繁，就会认定其为”热点代码”，热点代码的检测主要有基于采样和基于计数器两种方式，为了提高热点代码的执行效率，虚拟机会把它们编译成本地机器码，尽可能对代码优化，在运行时完成这个任务的后端编译器被称为即时编译器。</p></li><li><p>还可以通过静态的提前编译器 AOT 直接把程序编译成与目标机器指令集相关的二进制代码。</p></li></ul><hr><h4 id="Q2：类加载是什么？"><a href="#Q2：类加载是什么？" class="headerlink" title="Q2：类加载是什么？"></a>Q2：类加载是什么？</h4><p>Class 文件中描述的各类信息都需要加载到虚拟机后才能使用。JVM 把描述类的数据从 Class 文件加载到内存，并对数据进行校验、解析和初始化，最终形成可以被虚拟机直接使用的 Java 类型，这个过程称为虚拟机的类加载机制。</p><p>与编译时需要连接的语言不同，Java 中类型的加载、连接和初始化都是在运行期间完成的，这增加了性能开销，但却提供了极高的扩展性，Java 动态扩展的语言特性就是依赖运行期动态加载和连接实现的。</p><p>一个类型从被加载到虚拟机内存开始，到卸载出内存为止，整个生命周期经历加载、验证、准备、解析、初始化、使用和卸载七个阶段，其中验证、解析和初始化三个部分称为连接。加载、验证、准备、初始化阶段的顺序是确定的，解析则不一定：可能在初始化之后再开始，这是为了支持 Java 的动态绑定。</p><hr><h4 id="Q3：类初始化的情况有哪些？"><a href="#Q3：类初始化的情况有哪些？" class="headerlink" title="Q3：类初始化的情况有哪些？"></a>Q3：类初始化的情况有哪些？</h4><p>① 遇到 <code>new</code>、<code>getstatic</code>、<code>putstatic</code> 或 <code>invokestatic</code> 字节码指令时，还未初始化。典型场景包括 new 实例化对象、读取或设置静态字段、调用静态方法。</p><p>② 对类反射调用时，还未初始化。</p><p>③ 初始化类时，父类还未初始化。</p><p>④ 虚拟机启动时，会先初始化包含 main 方法的主类。</p><p>⑤ 使用 JDK7 的动态语言支持时，如果 MethodHandle 实例的解析结果为指定类型的方法句柄且句柄对应的类还未初始化。</p><p>⑥ 接口定义了默认方法，如果接口的实现类初始化，接口要在其之前初始化。</p><p>其余所有引用类型的方式都不会触发初始化，称为被动引用。被动引用实例：① 子类使用父类的静态字段时，只有父类被初始化。② 通过数组定义使用类。③ 常量在编译期会存入调用类的常量池，不会初始化定义常量的类。</p><p>接口和类加载过程的区别：初始化类时如果父类没有初始化需要初始化父类，但接口初始化时不要求父接口初始化，只有在真正使用父接口时（如引用接口中定义的常量）才会初始化。</p><hr><h4 id="Q4：类加载的过程是什么？"><a href="#Q4：类加载的过程是什么？" class="headerlink" title="Q4：类加载的过程是什么？"></a>Q4：类加载的过程是什么？</h4><p><strong>加载</strong></p><p>该阶段虚拟机需要完成三件事：① 通过一个类的全限定类名获取定义类的二进制字节流。② 将字节流所代表的静态存储结构转化为方法区的运行时数据区。③ 在内存中生成对应该类的 Class 实例，作为方法区这个类的数据访问入口。</p><p><strong>验证</strong></p><p>确保 Class 文件的字节流符合约束。如果虚拟机不检查输入的字节流，可能因为载入有错误或恶意企图的字节流而导致系统受攻击。验证主要包含四个阶段：文件格式验证、元数据验证、字节码验证、符号引用验证。</p><p>验证重要但非必需，因为只有通过与否的区别，通过后对程序运行期没有任何影响。如果代码已被反复使用和验证过，在生产环境就可以考虑关闭大部分验证缩短类加载时间。</p><p><strong>准备</strong></p><p>为类静态变量分配内存并设置零值，该阶段进行的内存分配仅包括类变量，不包括实例变量。如果变量被 final 修饰，编译时 Javac 会为变量生成 ConstantValue 属性，准备阶段虚拟机会将变量值设为代码值。</p><p><strong>解析</strong></p><p>将常量池内的符号引用替换为直接引用。</p><p><strong>符号引用</strong>以一组符号描述引用目标，可以是任何形式的字面量，只要使用时能无歧义地定位目标即可。与虚拟机内存布局无关，引用目标不一定已经加载到虚拟机内存。</p><p><strong>直接引用</strong>是可以直接指向目标的指针、相对偏移量或能间接定位到目标的句柄。和虚拟机的内存布局相关，引用目标必须已在虚拟机的内存中存在。</p><p><strong>初始化</strong></p><p>直到该阶段 JVM 才开始执行类中编写的代码。准备阶段时变量赋过零值，初始化阶段会根据程序员的编码去初始化类变量和其他资源。初始化阶段就是执行类构造方法中的 <code>&lt;client&gt;</code> 方法，该方法是 Javac 自动生成的。</p><hr><h4 id="Q5：有哪些类加载器？"><a href="#Q5：有哪些类加载器？" class="headerlink" title="Q5：有哪些类加载器？"></a>Q5：有哪些类加载器？</h4><p>自 JDK1.2 起 Java 一直保持三层类加载器：</p><ul><li><p><strong>启动类加载器</strong></p><p>在 JVM 启动时创建，负责加载最核心的类，例如 Object、System 等。无法被程序直接引用，如果需要把加载委派给启动类加载器，直接使用 null 代替即可，因为启动类加载器通常由操作系统实现，并不存在于 JVM 体系。</p></li><li><p><strong>平台类加载器</strong></p><p>从 JDK9 开始从<strong>扩展类加载器</strong>更换为平台类加载器，负载加载一些扩展的系统类，比如 XML、加密、压缩相关的功能类等。</p></li><li><p><strong>应用类加载器</strong></p><p>也称<strong>系统类加载器</strong>，负责加载用户类路径上的类库，可以直接在代码中使用。如果没有自定义类加载器，一般情况下应用类加载器就是默认的类加载器。自定义类加载器通过继承 ClassLoader 并重写 <code>findClass</code> 方法实现。</p></li></ul><hr><h4 id="Q6：双亲委派模型是什么？"><a href="#Q6：双亲委派模型是什么？" class="headerlink" title="Q6：双亲委派模型是什么？"></a>Q6：双亲委派模型是什么？</h4><p>类加载器具有等级制度但非继承关系，以组合的方式复用父加载器的功能。双亲委派模型要求除了顶层的启动类加载器外，其余类加载器都应该有自己的父加载器。</p><p>一个类加载器收到了类加载请求，它不会自己去尝试加载，而将该请求委派给父加载器，每层的类加载器都是如此，因此所有加载请求最终都应该传送到启动类加载器，只有当父加载器反馈无法完成请求时，子加载器才会尝试。</p><p>类跟随它的加载器一起具备了有优先级的层次关系，确保某个类在各个类加载器环境中都是同一个，保证程序的稳定性。</p><hr><h4 id="Q7：如何判断两个类是否相等？"><a href="#Q7：如何判断两个类是否相等？" class="headerlink" title="Q7：如何判断两个类是否相等？"></a>Q7：如何判断两个类是否相等？</h4><p>任意一个类都必须由类加载器和这个类本身共同确立其在虚拟机中的唯一性。</p><p>两个类只有由同一类加载器加载才有比较意义，否则即使两个类来源于同一个 Class 文件，被同一个 JVM 加载，只要类加载器不同，这两个类就必定不相等。</p><hr><h2 id="并发-39"><a href="#并发-39" class="headerlink" title="并发 39"></a>并发 39</h2><h3 id="JMM-8"><a href="#JMM-8" class="headerlink" title="JMM 8"></a>JMM 8</h3><h4 id="Q1：JMM-的作用是什么？"><a href="#Q1：JMM-的作用是什么？" class="headerlink" title="Q1：JMM 的作用是什么？"></a>Q1：JMM 的作用是什么？</h4><p>Java 线程的通信由 JMM 控制，JMM 的主要目的是定义程序中各种变量的访问规则。变量包括实例字段、静态字段，但不包括局部变量与方法参数，因为它们是线程私有的，不存在多线程竞争。JMM 遵循一个基本原则：只要不改变程序执行结果，编译器和处理器怎么优化都行。例如编译器分析某个锁只会单线程访问就消除锁，某个 volatile 变量只会单线程访问就把它当作普通变量。</p><p>JMM 规定所有变量都存储在主内存，每条线程有自己的工作内存，工作内存中保存被该线程使用的变量的主内存副本，线程对变量的所有操作都必须在工作空间进行，不能直接读写主内存数据。不同线程间无法直接访问对方工作内存中的变量，线程通信必须经过主内存。</p><p>关于主内存与工作内存的交互，即变量如何从主内存拷贝到工作内存、从工作内存同步回主内存，JMM 定义了 8 种原子操作：</p><table><thead><tr><th>操作</th><th>作用变量范围</th><th>作用</th></tr></thead><tbody><tr><td>lock</td><td>主内存</td><td>把变量标识为线程独占状态</td></tr><tr><td>unlock</td><td>主内存</td><td>释放处于锁定状态的变量</td></tr><tr><td>read</td><td>主内存</td><td>把变量值从主内存传到工作内存</td></tr><tr><td>load</td><td>工作内存</td><td>把 read 得到的值放入工作内存的变量副本</td></tr><tr><td>user</td><td>工作内存</td><td>把工作内存中的变量值传给执行引擎</td></tr><tr><td>assign</td><td>工作内存</td><td>把从执行引擎接收的值赋给工作内存变量</td></tr><tr><td>store</td><td>工作内存</td><td>把工作内存的变量值传到主内存</td></tr><tr><td>write</td><td>主内存</td><td>把 store 取到的变量值放入主内存变量中</td></tr></tbody></table><hr><h4 id="Q2：as-if-serial-是什么？"><a href="#Q2：as-if-serial-是什么？" class="headerlink" title="Q2：as-if-serial 是什么？"></a>Q2：as-if-serial 是什么？</h4><p>不管怎么重排序，单线程程序的执行结果不能改变，编译器和处理器必须遵循 as-if-serial 语义。</p><p>为了遵循 as-if-serial，编译器和处理器不会对存在数据依赖关系的操作重排序，因为这种重排序会改变执行结果。但是如果操作之间不存在数据依赖关系，这些操作就可能被编译器和处理器重排序。</p><p>as-if-serial 把单线程程序保护起来，给程序员一种幻觉：单线程程序是按程序的顺序执行的。</p><hr><h4 id="Q3：happens-before-是什么？"><a href="#Q3：happens-before-是什么？" class="headerlink" title="Q3：happens-before 是什么？"></a>Q3：happens-before 是什么？</h4><p>先行发生原则，JMM 定义的两项操作间的偏序关系，是判断数据是否存在竞争的重要手段。</p><p>JMM 将 happens-before 要求禁止的重排序按是否会改变程序执行结果分为两类。对于会改变结果的重排序 JMM 要求编译器和处理器必须禁止，对于不会改变结果的重排序，JMM 不做要求。 </p><p>JMM 存在一些天然的 happens-before 关系，无需任何同步器协助就已经存在。如果两个操作的关系不在此列，并且无法从这些规则推导出来，它们就没有顺序性保障，虚拟机可以对它们随意进行重排序。</p><ul><li><strong>程序次序规则：</strong>一个线程内写在前面的操作先行发生于后面的。 </li><li><strong>管程锁定规则：</strong> unlock 操作先行发生于后面对同一个锁的 lock 操作。 </li><li><strong>volatile 规则：</strong>对 volatile 变量的写操作先行发生于后面的读操作。 </li><li><strong>线程启动规则：</strong>线程的 <code>start</code> 方法先行发生于线程的每个动作。 </li><li><strong>线程终止规则：</strong>线程中所有操作先行发生于对线程的终止检测。 </li><li><strong>对象终结规则：</strong>对象的初始化先行发生于 <code>finalize</code> 方法。 </li><li><strong>传递性：</strong>如果操作 A 先行发生于操作 B，操作 B 先行发生于操作 C，那么操作 A 先行发生于操作 C 。 </li></ul><hr><h4 id="Q4：as-if-serial-和-happens-before-有什么区别？"><a href="#Q4：as-if-serial-和-happens-before-有什么区别？" class="headerlink" title="Q4：as-if-serial 和 happens-before 有什么区别？"></a>Q4：as-if-serial 和 happens-before 有什么区别？</h4><p>as-if-serial 保证单线程程序的执行结果不变，happens-before 保证正确同步的多线程程序的执行结果不变。</p><p>这两种语义的目的都是为了在不改变程序执行结果的前提下尽可能提高程序执行并行度。</p><hr><h4 id="Q5：什么是指令重排序？"><a href="#Q5：什么是指令重排序？" class="headerlink" title="Q5：什么是指令重排序？"></a>Q5：什么是指令重排序？</h4><p>为了提高性能，编译器和处理器通常会对指令进行重排序，重排序指从源代码到指令序列的重排序，分为三种：① 编译器优化的重排序，编译器在不改变单线程程序语义的前提下可以重排语句的执行顺序。② 指令级并行的重排序，如果不存在数据依赖性，处理器可以改变语句对应机器指令的执行顺序。③ 内存系统的重排序。</p><hr><h4 id="Q6：原子性、可见性、有序性分别是什么？"><a href="#Q6：原子性、可见性、有序性分别是什么？" class="headerlink" title="Q6：原子性、可见性、有序性分别是什么？"></a>Q6：原子性、可见性、有序性分别是什么？</h4><p><strong>原子性</strong></p><p>基本数据类型的访问都具备原子性，例外就是 long 和 double，虚拟机将没有被 volatile 修饰的 64 位数据操作划分为两次 32 位操作。</p><p>如果应用场景需要更大范围的原子性保证，JMM 还提供了 lock 和 unlock 操作满足需求，尽管 JVM 没有把这两种操作直接开放给用户使用，但是提供了更高层次的字节码指令 monitorenter 和 monitorexit，这两个字节码指令反映到 Java 代码中就是 synchronized。</p><p><strong>可见性</strong></p><p>可见性指当一个线程修改了共享变量时，其他线程能够立即得知修改。JMM 通过在变量修改后将值同步回主内存，在变量读取前从主内存刷新的方式实现可见性，无论普通变量还是 volatile 变量都是如此，区别是 volatile 保证新值能立即同步到主内存以及每次使用前立即从主内存刷新。</p><p>除了 volatile 外，synchronized 和 final 也可以保证可见性。同步块可见性由”对一个变量执行 unlock 前必须先把此变量同步回主内存，即先执行 store 和 write”这条规则获得。final 的可见性指：被 final 修饰的字段在构造方法中一旦初始化完成，并且构造方法没有把 this 引用传递出去，那么其他线程就能看到 final 字段的值。</p><p><strong>有序性</strong></p><p>有序性可以总结为：在本线程内观察所有操作是有序的，在一个线程内观察另一个线程，所有操作都是无序的。前半句指 as-if-serial 语义，后半句指指令重排序和工作内存与主内存延迟现象。</p><p>Java 提供 volatile 和 synchronized 保证有序性，volatile 本身就包含禁止指令重排序的语义，而 synchronized 保证一个变量在同一时刻只允许一条线程对其进行 lock 操作，确保持有同一个锁的两个同步块只能串行进入。</p><hr><h4 id="Q7：谈一谈-volatile"><a href="#Q7：谈一谈-volatile" class="headerlink" title="Q7：谈一谈 volatile"></a>Q7：谈一谈 volatile</h4><p>JMM 为 volatile 定义了一些特殊访问规则，当变量被定义为 volatile 后具备两种特性：</p><ul><li><p><strong>保证变量对所有线程可见</strong></p><p>当一条线程修改了变量值，新值对于其他线程来说是立即可以得知的。volatile 变量在各个线程的工作内存中不存在一致性问题，但 Java 的运算操作符并非原子操作，导致 volatile 变量运算在并发下仍不安全。</p></li><li><p><strong>禁止指令重排序优化</strong></p><p>使用 volatile 变量进行写操作，汇编指令带有 lock 前缀，相当于一个内存屏障，后面的指令不能重排到内存屏障之前。</p><p>使用 lock 前缀引发两件事：① 将当前处理器缓存行的数据写回系统内存。②使其他处理器的缓存无效。相当于对缓存变量做了一次 store 和 write 操作，让 volatile 变量的修改对其他处理器立即可见。</p></li></ul><p><strong>静态变量 i 执行多线程 i++ 的不安全问题</strong></p><p>自增语句由 4 条字节码指令构成的，依次为 <code>getstatic</code>、<code>iconst_1</code>、<code>iadd</code>、<code>putstatic</code>，当 <code>getstatic</code> 把 i 的值取到操作栈顶时，volatile 保证了 i 值在此刻正确，但在执行 <code>iconst_1</code>、<code>iadd</code> 时，其他线程可能已经改变了 i 值，操作栈顶的值就变成了过期数据，所以 <code>putstatic</code> 执行后就可能把较小的 i 值同步回了主内存。 </p><p><strong>适用场景</strong></p><p>① 运算结果并不依赖变量的当前值。② 一写多读，只有单一的线程修改变量值。</p><p><strong>内存语义</strong></p><p>写一个 volatile 变量时，把该线程工作内存中的值刷新到主内存。</p><p>读一个 volatile 变量时，把该线程工作内存值置为无效，从主内存读取。</p><p><strong>指令重排序特点</strong></p><p>第二个操作是 volatile 写，不管第一个操作是什么都不能重排序，确保写之前的操作不会被重排序到写之后。</p><p>第一个操作是 volatile 读，不管第二个操作是什么都不能重排序，确保读之后的操作不会被重排序到读之前。</p><p>第一个操作是 volatile 写，第二个操作是 volatile 读不能重排序。</p><p><strong>JSR-133 增强 volatile 语义的原因</strong></p><p>在旧的内存模型中，虽然不允许 volatile 变量间重排序，但允许 volatile 变量与普通变量重排序，可能导致内存不可见问题。JSR-133 严格限制编译器和处理器对 volatile 变量与普通变量的重排序，确保 volatile 的写-读和锁的释放-获取具有相同的内存语义。</p><hr><h4 id="Q8：final-可以保证可见性吗？"><a href="#Q8：final-可以保证可见性吗？" class="headerlink" title="Q8：final 可以保证可见性吗？"></a>Q8：final 可以保证可见性吗？</h4><p>final 可以保证可见性，被 final 修饰的字段在构造方法中一旦被初始化完成，并且构造方法没有把 this 引用传递出去，在其他线程中就能看见 final 字段值。</p><p>在旧的 JMM 中，一个严重缺陷是线程可能看到 final 值改变。比如一个线程看到一个 int 类型 final 值为 0，此时该值是未初始化前的零值，一段时间后该值被某线程初始化，再去读这个 final 值会发现值变为 1。</p><p>为修复该漏洞，JSR-133 为 final 域增加重排序规则：只要对象是正确构造的（被构造对象的引用在构造方法中没有逸出），那么不需要使用同步就可以保证任意线程都能看到这个 final 域初始化后的值。</p><p><strong>写 final 域重排序规则</strong></p><p>禁止把 final 域的写重排序到构造方法之外，编译器会在 final 域的写后，构造方法的 return 前，插入一个 Store Store 屏障。确保在对象引用为任意线程可见之前，对象的 final 域已经初始化过。</p><p><strong>读 final 域重排序规则</strong></p><p>在一个线程中，初次读对象引用和初次读该对象包含的 final 域，JMM 禁止处理器重排序这两个操作。编译器在读 final 域操作的前面插入一个 Load Load 屏障，确保在读一个对象的 final 域前一定会先读包含这个 final 域的对象引用。</p><hr><h3 id="锁-17"><a href="#锁-17" class="headerlink" title="锁 17"></a>锁 17</h3><h4 id="Q1：谈一谈-synchronized"><a href="#Q1：谈一谈-synchronized" class="headerlink" title="Q1：谈一谈 synchronized"></a>Q1：谈一谈 synchronized</h4><p>每个 Java 对象都有一个关联的 monitor，使用 synchronized 时 JVM 会根据使用环境找到对象的 monitor，根据 monitor 的状态进行加解锁的判断。如果成功加锁就成为该 monitor 的唯一持有者，monitor 在被释放前不能再被其他线程获取。</p><p>同步代码块使用 monitorenter 和 monitorexit 这两个字节码指令获取和释放 monitor。这两个字节码指令都需要一个引用类型的参数指明要锁定和解锁的对象，对于同步普通方法，锁是当前实例对象；对于静态同步方法，锁是当前类的 Class 对象；对于同步方法块，锁是 synchronized 括号里的对象。</p><p>执行 monitorenter 指令时，首先尝试获取对象锁。如果这个对象没有被锁定，或当前线程已经持有锁，就把锁的计数器加 1，执行 monitorexit 指令时会将锁计数器减 1。一旦计数器为 0 锁随即就被释放。</p><p>例如有两个线程 A、B 竞争 monitor，当 A 竞争到锁时会将 monitor 中的 owner 设置为 A，把 B 阻塞并放到等待资源的 ContentionList 队列。ContentionList 中的部分线程会进入 EntryList，EntryList 中的线程会被指定为 OnDeck 竞争候选者，如果获得了锁资源将进入 Owner 状态，释放锁后进入 !Owner 状态。被阻塞的线程会进入 WaitSet。</p><p>被 synchronized 修饰的同步块对一条线程来说是可重入的，并且同步块在持有锁的线程释放锁前会阻塞其他线程进入。从执行成本的角度看，持有锁是一个重量级的操作。Java 线程是映射到操作系统的内核线程上的，如果要阻塞或唤醒一条线程，需要操作系统帮忙完成，不可避免用户态到核心态的转换。</p><p><strong>不公平的原因</strong></p><p>所有收到锁请求的线程首先自旋，如果通过自旋也没有获取锁将被放入 ContentionList，该做法对于已经进入队列的线程不公平。</p><p>为了防止 ContentionList 尾部的元素被大量线程进行 CAS 访问影响性能，Owner 线程会在释放锁时将 ContentionList 的部分线程移动到 EntryList 并指定某个线程为 OnDeck 线程，该行为叫做竞争切换，牺牲了公平性但提高了性能。</p><hr><h4 id="Q2：锁优化有哪些策略？"><a href="#Q2：锁优化有哪些策略？" class="headerlink" title="Q2：锁优化有哪些策略？"></a>Q2：锁优化有哪些策略？</h4><p>JDK 6 对 synchronized 做了很多优化，引入了自适应自旋、锁消除、锁粗化、偏向锁和轻量级锁等提高锁的效率，锁一共有 4 个状态，级别从低到高依次是：无锁、偏向锁、轻量级锁和重量级锁，状态会随竞争情况升级。锁可以升级但不能降级，这种只能升级不能降级的锁策略是为了提高锁获得和释放的效率。</p><hr><h4 id="Q3：自旋锁是什么？"><a href="#Q3：自旋锁是什么？" class="headerlink" title="Q3：自旋锁是什么？"></a>Q3：自旋锁是什么？</h4><p>同步对性能最大的影响是阻塞，挂起和恢复线程的操作都需要转入内核态完成。许多应用上共享数据的锁定只会持续很短的时间，为了这段时间去挂起和恢复线程并不值得。如果机器有多个处理器核心，我们可以让后面请求锁的线程稍等一会，但不放弃处理器的执行时间，看看持有锁的线程是否很快会释放锁。为了让线程等待只需让线程执行一个忙循环，这项技术就是自旋锁。</p><p>自旋锁在 JDK1.4 就已引入，默认关闭，在 JDK6 中改为默认开启。自旋不能代替阻塞，虽然避免了线程切换开销，但要占用处理器时间，如果锁被占用的时间很短，自旋的效果就会非常好，反之只会白白消耗处理器资源。如果自旋超过了限定的次数仍然没有成功获得锁，就应挂起线程，自旋默认限定次数是 10。</p><hr><h4 id="Q4：什么是自适应自旋？"><a href="#Q4：什么是自适应自旋？" class="headerlink" title="Q4：什么是自适应自旋？"></a>Q4：什么是自适应自旋？</h4><p>JDK6 对自旋锁进行了优化，自旋时间不再固定，而是由前一次的自旋时间及锁拥有者的状态决定。</p><p>如果在同一个锁上，自旋刚刚成功获得过锁且持有锁的线程正在运行，虚拟机会认为这次自旋也很可能成功，进而允许自旋持续更久。如果自旋很少成功，以后获取锁时将可能直接省略掉自旋，避免浪费处理器资源。</p><p>有了自适应自旋，随着程序运行时间的增长，虚拟机对程序锁的状况预测就会越来越精准。</p><hr><h4 id="Q5：锁消除是什么？"><a href="#Q5：锁消除是什么？" class="headerlink" title="Q5：锁消除是什么？"></a>Q5：锁消除是什么？</h4><p>锁消除指即时编译器对检测到不可能存在共享数据竞争的锁进行消除。</p><p>主要判定依据来源于逃逸分析，如果判断一段代码中堆上的所有数据都只被一个线程访问，就可以当作栈上的数据对待，认为它们是线程私有的而无须同步。</p><hr><h4 id="Q6：锁粗化是什么？"><a href="#Q6：锁粗化是什么？" class="headerlink" title="Q6：锁粗化是什么？"></a>Q6：锁粗化是什么？</h4><p>原则需要将同步块的作用范围限制得尽量小，只在共享数据的实际作用域中进行同步，这是为了使等待锁的线程尽快拿到锁。</p><p>但如果一系列的连续操作都对同一个对象反复加锁和解锁，甚至加锁操作是出现在循环体之外的，即使没有线程竞争也会导致不必要的性能消耗。因此如果虚拟机探测到有一串零碎的操作都对同一个对象加锁，将会把同步的范围扩展到整个操作序列的外部。</p><hr><h4 id="Q7：偏向锁是什么？"><a href="#Q7：偏向锁是什么？" class="headerlink" title="Q7：偏向锁是什么？"></a>Q7：偏向锁是什么？</h4><p>偏向锁是为了在没有竞争的情况下减少锁开销，锁会偏向于第一个获得它的线程，如果在执行过程中锁一直没有被其他线程获取，则持有偏向锁的线程将不需要进行同步。</p><p>当锁对象第一次被线程获取时，虚拟机会将对象头中的偏向模式设为 1，同时使用 CAS 把获取到锁的线程 ID 记录在对象的 Mark Word 中。如果 CAS 成功，持有偏向锁的线程以后每次进入锁相关的同步块都不再进行任何同步操作。</p><p>一旦有其他线程尝试获取锁，偏向模式立即结束，根据锁对象是否处于锁定状态决定是否撤销偏向，后续同步按照轻量级锁那样执行。</p><hr><h4 id="Q8：轻量级锁是什么？"><a href="#Q8：轻量级锁是什么？" class="headerlink" title="Q8：轻量级锁是什么？"></a>Q8：轻量级锁是什么？</h4><p>轻量级锁是为了在没有竞争的前提下减少重量级锁使用操作系统互斥量产生的性能消耗。</p><p>在代码即将进入同步块时，如果同步对象没有被锁定，虚拟机将在当前线程的栈帧中建立一个锁记录空间，存储锁对象目前 Mark Word 的拷贝。然后虚拟机使用 CAS 尝试把对象的 Mark Word 更新为指向锁记录的指针，如果更新成功即代表该线程拥有了锁，锁标志位将转变为 00，表示处于轻量级锁定状态。</p><p>如果更新失败就意味着至少存在一条线程与当前线程竞争。虚拟机检查对象的 Mark Word 是否指向当前线程的栈帧，如果是则说明当前线程已经拥有了锁，直接进入同步块继续执行，否则说明锁对象已经被其他线程抢占。如果出现两条以上线程争用同一个锁，轻量级锁就不再有效，将膨胀为重量级锁，锁标志状态变为 10，此时Mark Word 存储的就是指向重量级锁的指针，后面等待锁的线程也必须阻塞。</p><p>解锁同样通过 CAS 进行，如果对象 Mark Word 仍然指向线程的锁记录，就用 CAS 把对象当前的 Mark Word 和线程复制的 Mark Word 替换回来。假如替换成功同步过程就顺利完成了，如果失败则说明有其他线程尝试过获取该锁，就要在释放锁的同时唤醒被挂起的线程。</p><hr><h4 id="Q9：偏向锁、轻量级锁和重量级锁的区别？"><a href="#Q9：偏向锁、轻量级锁和重量级锁的区别？" class="headerlink" title="Q9：偏向锁、轻量级锁和重量级锁的区别？"></a>Q9：偏向锁、轻量级锁和重量级锁的区别？</h4><p>偏向锁的优点是加解锁不需要额外消耗，和执行非同步方法比仅存在纳秒级差距，缺点是如果存在锁竞争会带来额外锁撤销的消耗，适用只有一个线程访问同步代码块的场景。</p><p>轻量级锁的优点是竞争线程不阻塞，程序响应速度快，缺点是如果线程始终得不到锁会自旋消耗 CPU，适用追求响应时间、同步代码块执行快的场景。</p><p>重量级锁的优点是线程竞争不使用自旋不消耗CPU，缺点是线程会阻塞，响应时间慢，适应追求吞吐量、同步代码块执行慢的场景。</p><hr><h4 id="Q10：Lock-和-synchronized-有什么区别？"><a href="#Q10：Lock-和-synchronized-有什么区别？" class="headerlink" title="Q10：Lock 和 synchronized 有什么区别？"></a>Q10：Lock 和 synchronized 有什么区别？</h4><p>Lock 接是 juc 包的顶层接口，基于Lock 接口，用户能够以非块结构来实现互斥同步，摆脱了语言特性束缚，在类库层面实现同步。Lock 并未用到 synchronized，而是利用了 volatile 的可见性。</p><p>重入锁 ReentrantLock 是 Lock 最常见的实现，与 synchronized 一样可重入，不过它增加了一些高级功能：</p><ul><li>**等待可中断： **持有锁的线程长期不释放锁时，正在等待的线程可以选择放弃等待而处理其他事情。 </li><li><strong>公平锁：</strong> 公平锁指多个线程在等待同一个锁时，必须按照申请锁的顺序来依次获得锁，而非公平锁不保证这一点，在锁被释放时，任何线程都有机会获得锁。synchronized 是非公平的，ReentrantLock 在默认情况下是非公平的，可以通过构造方法指定公平锁。一旦使用了公平锁，性能会急剧下降，影响吞吐量。 </li><li><strong>锁绑定多个条件：</strong> 一个 ReentrantLock 可以同时绑定多个 Condition。synchronized 中锁对象的 <code>wait</code> 跟 <code>notify</code> 可以实现一个隐含条件，如果要和多个条件关联就不得不额外添加锁，而 ReentrantLock 可以多次调用 <code>newCondition</code> 创建多个条件。 </li></ul><p>一般优先考虑使用 synchronized：① synchronized 是语法层面的同步，足够简单。② Lock 必须确保在 finally 中释放锁，否则一旦抛出异常有可能永远不会释放锁。使用 synchronized 可以由 JVM 来确保即使出现异常锁也能正常释放。③ 尽管 JDK5 时 ReentrantLock 的性能优于 synchronized，但在 JDK6 进行锁优化后二者的性能基本持平。从长远来看 JVM 更容易针对synchronized 优化，因为 JVM 可以在线程和对象的元数据中记录 synchronized 中锁的相关信息，而使用 Lock 的话 JVM 很难得知具体哪些锁对象是由特定线程持有的。</p><hr><h4 id="Q11：ReentrantLock-的可重入是怎么实现的？"><a href="#Q11：ReentrantLock-的可重入是怎么实现的？" class="headerlink" title="Q11：ReentrantLock 的可重入是怎么实现的？"></a>Q11：ReentrantLock 的可重入是怎么实现的？</h4><p>以非公平锁为例，通过 <code>nonfairTryAcquire</code> 方法获取锁，该方法增加了再次获取同步状态的处理逻辑：判断当前线程是否为获取锁的线程来决定获取是否成功，如果是获取锁的线程再次请求则将同步状态值增加并返回 true，表示获取同步状态成功。</p><p>成功获取锁的线程再次获取锁将增加同步状态值，释放同步状态时将减少同步状态值。如果锁被获取了 n 次，那么前 n-1 次 <code>tryRelease</code> 方法必须都返回 fasle，只有同步状态完全释放才能返回 true，该方法将同步状态是否为 0 作为最终释放条件，释放时将占有线程设置为null 并返回 true。</p><p>对于非公平锁只要 CAS 设置同步状态成功则表示当前线程获取了锁，而公平锁则不同。公平锁使用 <code>tryAcquire</code> 方法，该方法与<code>nonfairTryAcquire</code> 的唯一区别就是判断条件中多了对同步队列中当前节点是否有前驱节点的判断，如果该方法返回 true 表示有线程比当前线程更早请求锁，因此需要等待前驱线程获取并释放锁后才能获取锁。</p><hr><h4 id="Q12：什么是读写锁？"><a href="#Q12：什么是读写锁？" class="headerlink" title="Q12：什么是读写锁？"></a>Q12：什么是读写锁？</h4><p>ReentrantLock 是排他锁，同一时刻只允许一个线程访问，读写锁在同一时刻允许多个读线程访问，在写线程访问时，所有的读写线程均阻塞。读写锁维护了一个读锁和一个写锁，通过分离读写锁使并发性相比排他锁有了很大提升。</p><p>读写锁依赖 AQS 来实现同步功能，读写状态就是其同步器的同步状态。读写锁的自定义同步器需要在同步状态，即一个 int 变量上维护多个读线程和一个写线程的状态。读写锁将变量切分成了两个部分，高 16 位表示读，低 16 位表示写。</p><p>写锁是可重入排他锁，如果当前线程已经获得了写锁则增加写状态，如果当前线程在获取写锁时，读锁已经被获取或者该线程不是已经获得写锁的线程则进入等待。写锁的释放与 ReentrantLock 的释放类似，每次释放减少写状态，当写状态为 0 时表示写锁已被释放。</p><p>读锁是可重入共享锁，能够被多个线程同时获取，在没有其他写线程访问时，读锁总会被成功获取。如果当前线程已经获取了读锁，则增加读状态。如果当前线程在获取读锁时，写锁已被其他线程获取则进入等待。读锁每次释放会减少读状态，减少的值是（1&lt;&lt;16），读锁的释放是线程安全的。</p><p><strong>锁降级</strong>指把持住当前拥有的写锁，再获取读锁，随后释放先前拥有的写锁。</p><p>锁降级中读锁的获取是必要的，这是为了保证数据可见性，如果当前线程不获取读锁而直接释放写锁，假设此刻另一个线程 A 获取写锁修改了数据，当前线程无法感知线程 A 的数据更新。如果当前线程获取读锁，遵循锁降级的步骤，A 将被阻塞，直到当前线程使用数据并释放读锁之后，线程 A 才能获取写锁进行数据更新。</p><hr><h4 id="Q13：AQS-了解吗？"><a href="#Q13：AQS-了解吗？" class="headerlink" title="Q13：AQS 了解吗？"></a>Q13：AQS 了解吗？</h4><p>AQS 队列同步器是用来构建锁或其他同步组件的基础框架，它使用一个 volatile int state 变量作为共享资源，如果线程获取资源失败，则进入同步队列等待；如果获取成功就执行临界区代码，释放资源时会通知同步队列中的等待线程。</p><p>同步器的主要使用方式是继承，子类通过继承同步器并实现它的抽象方法来管理同步状态，对同步状态进行更改需要使用同步器提供的 3个方法 <code>getState</code>、<code>setState</code> 和 <code>compareAndSetState</code> ，它们保证状态改变是安全的。子类推荐被定义为自定义同步组件的静态内部类，同步器自身没有实现任何同步接口，它仅仅定义若干同步状态获取和释放的方法，同步器既支持独占式也支持共享式。</p><p>同步器是实现锁的关键，在锁的实现中聚合同步器，利用同步器实现锁的语义。锁面向使用者，定义了使用者与锁交互的接口，隐藏实现细节；同步器面向锁的实现者，简化了锁的实现方式，屏蔽了同步状态管理、线程排队、等待与唤醒等底层操作。</p><p>每当有新线程请求资源时都会进入一个等待队列，只有当持有锁的线程释放锁资源后该线程才能持有资源。等待队列通过双向链表实现，线程被封装在链表的 Node 节点中，Node 的等待状态包括：CANCELLED（线程已取消）、SIGNAL（线程需要唤醒）、CONDITION （线程正在等待）、PROPAGATE（后继节点会传播唤醒操作，只在共享模式下起作用）。</p><hr><h4 id="Q14：AQS-有哪两种模式？"><a href="#Q14：AQS-有哪两种模式？" class="headerlink" title="Q14：AQS 有哪两种模式？"></a>Q14：AQS 有哪两种模式？</h4><p><strong>独占模式</strong>表示锁只会被一个线程占用，其他线程必须等到持有锁的线程释放锁后才能获取锁，同一时间只能有一个线程获取到锁。</p><p><strong>共享模式</strong>表示多个线程获取同一个锁有可能成功，ReadLock 就采用共享模式。</p><p>独占模式通过 acquire 和 release 方法获取和释放锁，共享模式通过 acquireShared 和 releaseShared 方法获取和释放锁。</p><hr><h4 id="Q15：AQS-独占式获取-释放锁的原理？"><a href="#Q15：AQS-独占式获取-释放锁的原理？" class="headerlink" title="Q15：AQS 独占式获取/释放锁的原理？"></a>Q15：AQS 独占式获取/释放锁的原理？</h4><p>获取同步状态时，调用 <code>acquire</code> 方法，维护一个同步队列，使用 <code>tryAcquire</code> 方法安全地获取线程同步状态，获取失败的线程会被构造同步节点并通过 <code>addWaiter</code> 方法加入到同步队列的尾部，在队列中自旋。之后调用 <code>acquireQueued</code> 方法使得该节点以死循环的方式获取同步状态，如果获取不到则阻塞，被阻塞线程的唤醒主要依靠前驱节点的出队或被中断实现，移出队列或停止自旋的条件是前驱节点是头结点且成功获取了同步状态。</p><p>释放同步状态时，同步器调用 <code>tryRelease</code> 方法释放同步状态，然后调用 <code>unparkSuccessor</code> 方法唤醒头节点的后继节点，使后继节点重新尝试获取同步状态。</p><hr><h4 id="Q16：为什么只有前驱节点是头节点时才能尝试获取同步状态？"><a href="#Q16：为什么只有前驱节点是头节点时才能尝试获取同步状态？" class="headerlink" title="Q16：为什么只有前驱节点是头节点时才能尝试获取同步状态？"></a>Q16：为什么只有前驱节点是头节点时才能尝试获取同步状态？</h4><p>头节点是成功获取到同步状态的节点，后继节点的线程被唤醒后需要检查自己的前驱节点是否是头节点。</p><p>目的是维护同步队列的 FIFO 原则，节点和节点在循环检查的过程中基本不通信，而是简单判断自己的前驱是否为头节点，这样就使节点的释放规则符合 FIFO，并且也便于对过早通知的处理，过早通知指前驱节点不是头节点的线程由于中断被唤醒。</p><hr><h4 id="Q17：AQS-共享式式获取-释放锁的原理？"><a href="#Q17：AQS-共享式式获取-释放锁的原理？" class="headerlink" title="Q17：AQS 共享式式获取/释放锁的原理？"></a>Q17：AQS 共享式式获取/释放锁的原理？</h4><p>获取同步状态时，调用 <code>acquireShared</code> 方法，该方法调用 <code>tryAcquireShared</code> 方法尝试获取同步状态，返回值为 int 类型，返回值不小于于 0 表示能获取同步状态。因此在共享式获取锁的自旋过程中，成功获取同步状态并退出自旋的条件就是该方法的返回值不小于0。</p><p>释放同步状态时，调用 <code>releaseShared</code> 方法，释放后会唤醒后续处于等待状态的节点。它和独占式的区别在于 <code>tryReleaseShared</code> 方法必须确保同步状态安全释放，通过循环 CAS 保证，因为释放同步状态的操作会同时来自多个线程。</p><hr><h3 id="线程-13"><a href="#线程-13" class="headerlink" title="线程 13"></a>线程 13</h3><h4 id="Q1：线程的生命周期有哪些状态？"><a href="#Q1：线程的生命周期有哪些状态？" class="headerlink" title="Q1：线程的生命周期有哪些状态？"></a>Q1：线程的生命周期有哪些状态？</h4><p>NEW：新建状态，线程被创建且未启动，此时还未调用 <code>start</code>  方法。</p><p>RUNNABLE：Java 将操作系统中的就绪和运行两种状态统称为 RUNNABLE，此时线程有可能在等待时间片，也有可能在执行。</p><p>BLOCKED：阻塞状态，可能由于锁被其他线程占用、调用了 <code>sleep</code> 或 <code>join</code> 方法、执行了 <code>wait</code>方法等。</p><p>WAITING：等待状态，该状态线程不会被分配 CPU 时间片，需要其他线程通知或中断。可能由于调用了无参的 <code>wait</code> 和 <code>join</code> 方法。</p><p>TIME_WAITING：限期等待状态，可以在指定时间内自行返回。导可能由于调用了带参的 <code>wait</code> 和 <code>join</code> 方法。</p><p>TERMINATED：终止状态，表示当前线程已执行完毕或异常退出。</p><hr><h4 id="Q2：线程的创建方式有哪些？"><a href="#Q2：线程的创建方式有哪些？" class="headerlink" title="Q2：线程的创建方式有哪些？"></a>Q2：线程的创建方式有哪些？</h4><p>① 继承 Thread 类并重写 run 方法。实现简单，但不符合里氏替换原则，不可以继承其他类。</p><p>② 实现 Runnable 接口并重写 run 方法。避免了单继承局限性，编程更加灵活，实现解耦。</p><p>③实现 Callable 接口并重写 call 方法。可以获取线程执行结果的返回值，并且可以抛出异常。</p><hr><h4 id="Q3：线程有哪些方法？"><a href="#Q3：线程有哪些方法？" class="headerlink" title="Q3：线程有哪些方法？"></a>Q3：线程有哪些方法？</h4><p>① <code>sleep</code> 方法会导致当前线程进入休眠状态，与 <code>wait</code> 不同的是该方法不会释放锁资源，进入的是 TIMED-WAITING 状态。</p><p>② <code>yiled</code> 方法使当前线程让出 CPU 时间片给优先级相同或更高的线程，回到 RUNNABLE 状态，与其他线程一起重新竞争CPU时间片。</p><p>③ <code>join</code> 方法用于等待其他线程运行终止，如果当前线程调用了另一个线程的 join 方法，则当前线程进入阻塞状态，当另一个线程结束时当前线程才能从阻塞状态转为就绪态，等待获取CPU时间片。底层使用的是wait，也会释放锁。</p><hr><h4 id="Q4：什么是守护线程？"><a href="#Q4：什么是守护线程？" class="headerlink" title="Q4：什么是守护线程？"></a>Q4：什么是守护线程？</h4><p>守护线程是一种支持型线程，可以通过 <code>setDaemon(true)</code> 将线程设置为守护线程，但必须在线程启动前设置。</p><p>守护线程被用于完成支持性工作，但在 JVM 退出时守护线程中的 finally 块不一定执行，因为 JVM 中没有非守护线程时需要立即退出，所有守护线程都将立即终止，不能靠在守护线程使用 finally 确保关闭资源。</p><hr><h4 id="Q5：线程通信的方式有哪些？"><a href="#Q5：线程通信的方式有哪些？" class="headerlink" title="Q5：线程通信的方式有哪些？"></a>Q5：线程通信的方式有哪些？</h4><p>命令式编程中线程的通信机制有两种，共享内存和消息传递。在共享内存的并发模型里线程间共享程序的公共状态，通过写-读内存中的公共状态进行隐式通信。在消息传递的并发模型里线程间没有公共状态，必须通过发送消息来显式通信。Java 并发采用共享内存模型，线程之间的通信总是隐式进行，整个通信过程对程序员完全透明。</p><p><strong>volatile</strong> 告知程序任何对变量的读需要从主内存中获取，写必须同步刷新回主内存，保证所有线程对变量访问的可见性。</p><p><strong>synchronized</strong> 确保多个线程在同一时刻只能有一个处于方法或同步块中，保证线程对变量访问的原子性、可见性和有序性。</p><p><strong>等待通知机制</strong>指一个线程 A 调用了对象的 <code>wait</code> 方法进入等待状态，另一线程 B 调用了对象的 <code>notify/notifyAll</code> 方法，线程 A 收到通知后结束阻塞并执行后序操作。对象上的 <code>wait</code> 和 <code>notify/notifyAll</code> 如同开关信号，完成等待方和通知方的交互。</p><p>如果一个线程执行了某个线程的 <code>join</code> 方法，这个线程就会阻塞等待执行了 <code>join</code> 方法的线程终止，这里涉及等待/通知机制。<code>join</code> 底层通过 <code>wait</code> 实现，线程终止时会调用自身的 <code>notifyAll</code> 方法，通知所有等待在该线程对象上的线程。</p><p><strong>管道 IO 流</strong>用于线程间数据传输，媒介为内存。PipedOutputStream 和 PipedWriter 是输出流，相当于生产者，PipedInputStream 和 PipedReader 是输入流，相当于消费者。管道流使用一个默认大小为 1KB 的循环缓冲数组。输入流从缓冲数组读数据，输出流往缓冲数组中写数据。当数组已满时，输出流所在线程阻塞；当数组首次为空时，输入流所在线程阻塞。</p><p><strong>ThreadLocal</strong> 是线程共享变量，但它可以为每个线程创建单独的副本，副本值是线程私有的，互相之间不影响。</p><hr><h4 id="Q6：线程池有什么好处？"><a href="#Q6：线程池有什么好处？" class="headerlink" title="Q6：线程池有什么好处？"></a>Q6：线程池有什么好处？</h4><p>降低资源消耗，复用已创建的线程，降低开销、控制最大并发数。</p><p>隔离线程环境，可以配置独立线程池，将较慢的线程与较快的隔离开，避免相互影响。</p><p>实现任务线程队列缓冲策略和拒绝机制。</p><p>实现某些与时间相关的功能，如定时执行、周期执行等。</p><hr><h4 id="Q7：线程池处理任务的流程？"><a href="#Q7：线程池处理任务的流程？" class="headerlink" title="Q7：线程池处理任务的流程？"></a>Q7：线程池处理任务的流程？</h4><p>① 核心线程池未满，创建一个新的线程执行任务，此时 workCount &lt; corePoolSize。</p><p>② 如果核心线程池已满，工作队列未满，将线程存储在工作队列，此时 workCount &gt;= corePoolSize。</p><p>③ 如果工作队列已满，线程数小于最大线程数就创建一个新线程处理任务，此时 workCount &lt; maximumPoolSize，这一步也需要获取全局锁。</p><p>④ 如果超过大小线程数，按照拒绝策略来处理任务，此时 workCount &gt; maximumPoolSize。</p><p>线程池创建线程时，会将线程封装成工作线程 Worker，Worker 在执行完任务后还会循环获取工作队列中的任务来执行。</p><hr><h4 id="Q8：有哪些创建线程池的方法？"><a href="#Q8：有哪些创建线程池的方法？" class="headerlink" title="Q8：有哪些创建线程池的方法？"></a>Q8：有哪些创建线程池的方法？</h4><p>可以通过 Executors 的静态工厂方法创建线程池：</p><p>① <code>newFixedThreadPool</code>，固定大小的线程池，核心线程数也是最大线程数，不存在空闲线程，keepAliveTime = 0。该线程池使用的工作队列是无界阻塞队列 LinkedBlockingQueue，适用于负载较重的服务器。</p><p>② <code>newSingleThreadExecutor</code>，使用单线程，相当于单线程串行执行所有任务，适用于需要保证顺序执行任务的场景。</p><p>③ <code>newCachedThreadPool</code>，maximumPoolSize 设置为 Integer 最大值，是高度可伸缩的线程池。该线程池使用的工作队列是没有容量的 SynchronousQueue，如果主线程提交任务的速度高于线程处理的速度，线程池会不断创建新线程，极端情况下会创建过多线程而耗尽CPU 和内存资源。适用于执行很多短期异步任务的小程序或负载较轻的服务器。</p><p>④ <code>newScheduledThreadPool</code>：线程数最大为 Integer 最大值，存在 OOM 风险。支持定期及周期性任务执行，适用需要多个后台线程执行周期任务，同时需要限制线程数量的场景。相比 Timer 更安全，功能更强，与 <code>newCachedThreadPool</code> 的区别是不回收工作线程。</p><p>⑤ <code>newWorkStealingPool</code>：JDK8 引入，创建持有足够线程的线程池支持给定的并行度，通过多个队列减少竞争。</p><hr><h4 id="Q9：创建线程池有哪些参数？"><a href="#Q9：创建线程池有哪些参数？" class="headerlink" title="Q9：创建线程池有哪些参数？"></a>Q9：创建线程池有哪些参数？</h4><p>① corePoolSize：常驻核心线程数，如果为 0，当执行完任务没有任何请求时会消耗线程池；如果大于 0，即使本地任务执行完，核心线程也不会被销毁。该值设置过大会浪费资源，过小会导致线程的频繁创建与销毁。</p><p>② maximumPoolSize：线程池能够容纳同时执行的线程最大数，必须大于等于 1，如果与核心线程数设置相同代表固定大小线程池。</p><p>③ keepAliveTime：线程空闲时间，线程空闲时间达到该值后会被销毁，直到只剩下 corePoolSize 个线程为止，避免浪费内存资源。</p><p>④ unit：keepAliveTime 的时间单位。</p><p>⑤ workQueue：工作队列，当线程请求数大于等于 corePoolSize 时线程会进入阻塞队列。</p><p>⑥ threadFactory：线程工厂，用来生产一组相同任务的线程。可以给线程命名，有利于分析错误。</p><p>⑦ handler：拒绝策略：</p><p>默认使用 <code>AbortPolicy</code> 丢弃任务并抛出异常，</p><p><code>CallerRunsPolicy </code>在调用者线程中直接执行被拒绝任务的run方法，除非线程池已经shutdown则直接抛弃任务，</p><p><code>DiscardOldestPolicy </code>表示抛弃队列里等待最久的任务并把当前任务加入队列，</p><p><code>DiscardPolicy </code>表示直接抛弃当前任务但不抛出异常。</p><hr><h4 id="Q10：如何关闭线程池？"><a href="#Q10：如何关闭线程池？" class="headerlink" title="Q10：如何关闭线程池？"></a>Q10：如何关闭线程池？</h4><p>可以调用 <code>shutdown</code> 或 <code>shutdownNow</code> 方法关闭线程池，原理是遍历线程池中的工作线程，然后逐个调用线程的 <code>interrupt</code> 方法中断线程，无法响应中断的任务可能永远无法终止。</p><p>区别是 <code>shutdownNow</code> 首先将线程池的状态设为 STOP，然后尝试停止正在执行或暂停任务的线程，并返回等待执行任务的列表。而 <code>shutdown</code> 只是将线程池的状态设为 SHUTDOWN，然后中断没有正在执行任务的线程。</p><p>通常调用 <code>shutdown</code> 来关闭线程池，如果任务不一定要执行完可调用 <code>shutdownNow</code>。</p><hr><h4 id="Q11：线程池的选择策略有什么？"><a href="#Q11：线程池的选择策略有什么？" class="headerlink" title="Q11：线程池的选择策略有什么？"></a>Q11：线程池的选择策略有什么？</h4><p>可以从以下角度分析：①任务性质：CPU 密集型、IO 密集型和混合型。②任务优先级。③任务执行时间。④任务依赖性：是否依赖其他资源，如数据库连接。</p><p>性质不同的任务可用不同规模的线程池处理，CPU 密集型任务应配置尽可能小的线程，如配置 N<del>cpu</del>+1 个线程的线程池。由于 IO 密集型任务线程并不是一直在执行任务，应配置尽可能多的线程，如 2*N<del>cpu</del>。混合型的任务，如果可以拆分，将其拆分为一个 CPU 密集型任务和一个 IO 密集型任务，只要两个任务执行的时间相差不大那么分解后的吞吐量将高于串行执行的吞吐量，如果相差太大则没必要分解。</p><p>优先级不同的任务可以使用优先级队列 PriorityBlockingQueue 处理。</p><p>执行时间不同的任务可以交给不同规模的线程池处理，或者使用优先级队列让执行时间短的任务先执行。</p><p>依赖数据库连接池的任务，由于线程提交 SQL 后需要等待数据库返回的结果，等待的时间越长 CPU 空闲的时间就越长，因此线程数应该尽可能地设置大一些，提高 CPU 的利用率。</p><p>建议使用有界队列，能增加系统的稳定性和预警能力，可以根据需要设置的稍微大一些。</p><hr><h4 id="Q12：阻塞队列有哪些选择"><a href="#Q12：阻塞队列有哪些选择" class="headerlink" title="Q12：阻塞队列有哪些选择?"></a>Q12：阻塞队列有哪些选择?</h4><p>阻塞队列支持阻塞插入和移除，当队列满时，阻塞插入元素的线程直到队列不满。当队列为空时，获取元素的线程会被阻塞直到队列非空。阻塞队列常用于生产者和消费者的场景，阻塞队列就是生产者用来存放元素，消费者用来获取元素的容器。</p><p><strong>Java 中的阻塞队列</strong></p><p>ArrayBlockingQueue，由数组组成的有界阻塞队列，默认情况下不保证线程公平，有可能先阻塞的线程最后才访问队列。</p><p>LinkedBlockingQueue，由链表结构组成的有界阻塞队列，队列的默认和最大长度为 Integer 最大值。</p><p>PriorityBlockingQueue，支持优先级的无界阻塞队列，默认情况下元素按照升序排序。可自定义 <code>compareTo</code> 方法指定排序规则，或者初始化时指定 Comparator 排序，不能保证同优先级元素的顺序。</p><p>DelayQueue，支持延时获取元素的无界阻塞队列，使用优先级队列实现。创建元素时可以指定多久才能从队列中获取当前元素，只有延迟期满时才能从队列中获取元素，适用于缓存和定时调度。</p><p>SynchronousQueue，不存储元素的阻塞队列，每一个 put 必须等待一个 take。默认使用非公平策略，也支持公平策略，适用于传递性场景，吞吐量高。</p><p>LinkedTransferQueue，链表组成的无界阻塞队列，相对于其他阻塞队列多了 <code>tryTransfer</code> 和 <code>transfer</code> 方法。<code>transfer</code>方法：如果当前有消费者正等待接收元素，可以把生产者传入的元素立刻传输给消费者，否则会将元素放在队列的尾节点并等到该元素被消费者消费才返回。<code>tryTransfer</code> 方法用来试探生产者传入的元素能否直接传给消费者，如果没有消费者等待接收元素则返回 false，和 <code>transfer</code> 的区别是无论消费者是否消费都会立即返回。</p><p>LinkedBlockingDeque，链表组成的双向阻塞队列，可从队列的两端插入和移出元素，多线程同时入队时减少了竞争。</p><p><strong>实现原理</strong></p><p>使用通知模式实现，生产者往满的队列里添加元素时会阻塞，当消费者消费后，会通知生产者当前队列可用。当往队列里插入一个元素，如果队列不可用，阻塞生产者主要通过 LockSupport 的 <code>park</code> 方法实现，不同操作系统中实现方式不同，在 Linux 下使用的是系统方法 <code>pthread_cond_wait</code> 实现。</p><hr><h4 id="Q13：谈一谈-ThreadLocal"><a href="#Q13：谈一谈-ThreadLocal" class="headerlink" title="Q13：谈一谈 ThreadLocal"></a>Q13：谈一谈 ThreadLocal</h4><p>ThreadLoacl 是线程共享变量，主要用于一个线程内跨类、方法传递数据。ThreadLoacl 有一个静态内部类 ThreadLocalMap，其 Key 是 ThreadLocal 对象，值是 Entry 对象，Entry 中只有一个 Object 类的 vaule 值。ThreadLocal 是线程共享的，但 ThreadLocalMap 是每个线程私有的。ThreadLocal 主要有 set、get 和 remove 三个方法。</p><p><strong>set 方法</strong></p><p>首先获取当前线程，然后再获取当前线程对应的 ThreadLocalMap 类型的对象 map。如果 map 存在就直接设置值，key 是当前的 ThreadLocal 对象，value 是传入的参数。</p><p>如果 map 不存在就通过 <code>createMap</code> 方法为当前线程创建一个 ThreadLocalMap 对象再设置值。</p><p><strong>get 方法</strong></p><p>首先获取当前线程，然后再获取当前线程对应的 ThreadLocalMap 类型的对象 map。如果 map 存在就以当前 ThreadLocal 对象作为 key 获取 Entry 类型的对象 e，如果 e 存在就返回它的 value 属性。</p><p>如果 e 不存在或者 map 不存在，就调用 <code>setInitialValue</code> 方法先为当前线程创建一个 ThreadLocalMap 对象然后返回默认的初始值 null。</p><p><strong>remove 方法</strong></p><p>首先通过当前线程获取其对应的 ThreadLocalMap 类型的对象 m，如果 m 不为空，就解除 ThreadLocal 这个 key 及其对应的 value 值的联系。</p><p><strong>存在的问题</strong></p><p>线程复用会产生脏数据，由于线程池会重用 Thread 对象，因此与 Thread 绑定的 ThreadLocal 也会被重用。如果没有调用 remove 清理与线程相关的 ThreadLocal 信息，那么假如下一个线程没有调用 set 设置初始值就可能 get 到重用的线程信息。</p><p>ThreadLocal 还存在内存泄漏的问题，由于 ThreadLocal 是弱引用，但 Entry 的 value 是强引用，因此当 ThreadLocal 被垃圾回收后，value 依旧不会被释放。因此需要及时调用 remove 方法进行清理操作。</p><hr><h3 id="JUC-11"><a href="#JUC-11" class="headerlink" title="JUC 11"></a>JUC 11</h3><h4 id="Q1：什么是-CAS？"><a href="#Q1：什么是-CAS？" class="headerlink" title="Q1：什么是 CAS？"></a>Q1：什么是 CAS？</h4><p>CAS 表示 Compare And Swap，比较并交换，CAS 需要三个操作数，分别是内存位置 V、旧的预期值 A 和准备设置的新值 B。CAS 指令执行时，当且仅当 V 符合 A 时，处理器才会用 B 更新 V 的值，否则它就不执行更新。但不管是否更新都会返回 V 的旧值，这些处理过程是原子操作，执行期间不会被其他线程打断。</p><p>在 JDK 5 后，Java 类库中才开始使用 CAS 操作，该操作由 Unsafe 类里的 <code>compareAndSwapInt</code> 等几个方法包装提供。HotSpot 在内部对这些方法做了特殊处理，即时编译的结果是一条平台相关的处理器 CAS 指令。Unsafe 类不是给用户程序调用的类，因此 JDK9 前只有 Java 类库可以使用 CAS，譬如 juc 包里的 AtomicInteger类中 <code>compareAndSet</code> 等方法都使用了Unsafe 类的 CAS 操作实现。</p><hr><h4 id="Q2：CAS-有什么问题？"><a href="#Q2：CAS-有什么问题？" class="headerlink" title="Q2：CAS 有什么问题？"></a>Q2：CAS 有什么问题？</h4><p>CAS 从语义上来说存在一个逻辑漏洞：如果 V 初次读取时是 A，并且在准备赋值时仍为 A，这依旧不能说明它没有被其他线程更改过，因为这段时间内假设它的值先改为 B 又改回 A，那么 CAS 操作就会误认为它从来没有被改变过。</p><p>这个漏洞称为 ABA 问题，juc 包提供了一个 AtomicStampedReference，原子更新带有版本号的引用类型，通过控制变量值的版本来解决 ABA 问题。大部分情况下 ABA 不会影响程序并发的正确性，如果需要解决，传统的互斥同步可能会比原子类更高效。</p><hr><h4 id="Q3：有哪些原子类？"><a href="#Q3：有哪些原子类？" class="headerlink" title="Q3：有哪些原子类？"></a>Q3：有哪些原子类？</h4><p>JDK 5 提供了 java.util.concurrent.atomic 包，这个包中的原子操作类提供了一种用法简单、性能高效、线程安全地更新一个变量的方式。到 JDK 8 该包共有17个类，依据作用分为四种：原子更新基本类型类、原子更新数组类、原子更新引用类以及原子更新字段类，atomic 包里的类基本都是使用 Unsafe 实现的包装类。</p><p>AtomicInteger 原子更新整形、 AtomicLong 原子更新长整型、AtomicBoolean 原子更新布尔类型。</p><p>AtomicIntegerArray，原子更新整形数组里的元素、 AtomicLongArray 原子更新长整型数组里的元素、 AtomicReferenceArray 原子更新引用类型数组里的元素。</p><p>AtomicReference 原子更新引用类型、AtomicMarkableReference 原子更新带有标记位的引用类型，可以绑定一个 boolean 标记、 AtomicStampedReference 原子更新带有版本号的引用类型，关联一个整数值作为版本号，解决 ABA 问题。</p><p>AtomicIntegerFieldUpdater 原子更新整形字段的更新器、 AtomicLongFieldUpdater 原子更新长整形字段的更新器AtomicReferenceFieldUpdater 原子更新引用类型字段的更新器。</p><hr><h4 id="Q4：AtomicIntger-实现原子更新的原理是什么？"><a href="#Q4：AtomicIntger-实现原子更新的原理是什么？" class="headerlink" title="Q4：AtomicIntger 实现原子更新的原理是什么？"></a>Q4：AtomicIntger 实现原子更新的原理是什么？</h4><p>AtomicInteger 原子更新整形、 AtomicLong 原子更新长整型、AtomicBoolean 原子更新布尔类型。</p><p><code>getAndIncrement</code> 以原子方式将当前的值加 1，首先在 for 死循环中取得 AtomicInteger  里存储的数值，第二步对 AtomicInteger  当前的值加 1 ，第三步调用 <code>compareAndSet</code> 方法进行原子更新，先检查当前数值是否等于 expect，如果等于则说明当前值没有被其他线程修改，则将值更新为 next，否则会更新失败返回 false，程序会进入 for 循环重新进行 <code>compareAndSet</code> 操作。</p><p>atomic 包中只提供了三种基本类型的原子更新，atomic 包里的类基本都是使用 Unsafe 实现的，Unsafe 只提供三种 CAS 方法：<code>compareAndSwapInt</code>、<code>compareAndSwapLong</code> 和 <code>compareAndSwapObject</code>，例如原子更新 Boolean 是先转成整形再使用 <code>compareAndSwapInt</code> 。</p><hr><h4 id="Q5：CountDownLatch-是什么？"><a href="#Q5：CountDownLatch-是什么？" class="headerlink" title="Q5：CountDownLatch 是什么？"></a>Q5：CountDownLatch 是什么？</h4><p>CountDownLatch 是基于执行时间的同步类，允许一个或多个线程等待其他线程完成操作，构造方法接收一个 int 参数作为计数器，如果要等待 n 个点就传入 n。每次调用 <code>countDown</code> 方法时计数器减 1，<code>await</code> 方***阻塞当前线程直到计数器变为0，由于 <code>countDown</code> 方法可用在任何地方，所以 n 个点既可以是 n 个线程也可以是一个线程里的 n 个执行步骤。</p><hr><h4 id="Q6：-CyclicBarrier-是什么？"><a href="#Q6：-CyclicBarrier-是什么？" class="headerlink" title="Q6： CyclicBarrier 是什么？"></a>Q6： CyclicBarrier 是什么？</h4><p>循环屏障是基于同步到达某个点的信号量触发机制，作用是让一组线程到达一个屏障时被阻塞，直到最后一个线程到达屏障才会解除。构造方法中的参数表示拦截线程数量，每个线程调用 <code>await</code> 方法告诉 CyclicBarrier 自己已到达屏障，然后被阻塞。还支持在构造方法中传入一个 Runnable 任务，当线程到达屏障时会优先执行该任务。适用于多线程计算数据，最后合并计算结果的应用场景。</p><p>CountDownLacth 的计数器只能用一次，而 CyclicBarrier 的计数器可使用 <code>reset</code> 方法重置，所以 CyclicBarrier 能处理更为复杂的业务场景，例如计算错误时可用重置计数器重新计算。</p><hr><h4 id="Q7：Semaphore-是什么？"><a href="#Q7：Semaphore-是什么？" class="headerlink" title="Q7：Semaphore 是什么？"></a>Q7：Semaphore 是什么？</h4><p>信号量用来控制同时访问特定资源的线程数量，通过协调各个线程以保证合理使用公共资源。信号量可以用于流量控制，特别是公共资源有限的应用场景，比如数据库连接。</p><p>Semaphore 的构造方法参数接收一个 int 值，表示可用的许可数量即最大并发数。使用 <code>acquire</code> 方法获得一个许可证，使用 <code>release</code> 方法归还许可，还可以用 <code>tryAcquire</code> 尝试获得许可。</p><hr><h4 id="Q8：-Exchanger-是什么？"><a href="#Q8：-Exchanger-是什么？" class="headerlink" title="Q8： Exchanger 是什么？"></a>Q8： Exchanger 是什么？</h4><p>交换者是用于线程间协作的工具类，用于进行线程间的数据交换。它提供一个同步点，在这个同步点两个线程可以交换彼此的数据。</p><p>两个线程通过 <code>exchange</code> 方法交换数据，第一个线程执行 <code>exchange</code> 方法后会阻塞等待第二个线程执行该方法，当两个线程都到达同步点时这两个线程就可以交换数据，将本线程生产出的数据传递给对方。应用场景包括遗传算法、校对工作等。</p><hr><h4 id="P9：JDK7-的-ConcurrentHashMap-原理？"><a href="#P9：JDK7-的-ConcurrentHashMap-原理？" class="headerlink" title="P9：JDK7 的 ConcurrentHashMap 原理？"></a>P9：JDK7 的 ConcurrentHashMap 原理？</h4><p>ConcurrentHashMap 用于解决 HashMap 的线程不安全和 HashTable 的并发效率低，HashTable 之所以效率低是因为所有线程都必须竞争同一把锁，假如容器里有多把锁，每一把锁用于锁容器的部分数据，那么多线程访问容器不同数据段的数据时，线程间就不会存在锁竞争，从而有效提高并发效率，这就是 ConcurrentHashMap 的锁分段技术。首先将数据分成 Segment 数据段，然后给每一个数据段配一把锁，当一个线程占用锁访问其中一个段的数据时，其他段的数据也能被其他线程访问。</p><p>get 实现简单高效，先经过一次再散列，再用这个散列值通过散列运算定位到 Segment，最后通过散列算法定位到元素。get 的高效在于不需要加锁，除非读到空值才会加锁重读。get 方法中将共享变量定义为 volatile，在 get 操作里只需要读所以不用加锁。</p><p>put 必须加锁，首先定位到 Segment，然后进行插入操作，第一步判断是否需要对 Segment 里的 HashEntry 数组进行扩容，第二步定位添加元素的位置，然后将其放入数组。</p><p>size 操作用于统计元素的数量，必须统计每个 Segment 的大小然后求和，在统计结果累加的过程中，之前累加过的 count 变化几率很小，因此先尝试两次通过不加锁的方式统计结果，如果统计过程中容器大小发生了变化，再加锁统计所有 Segment 大小。判断容器是否发生变化根据 modCount 确定。</p><hr><h4 id="P10：JDK8-的-ConcurrentHashMap-原理？"><a href="#P10：JDK8-的-ConcurrentHashMap-原理？" class="headerlink" title="P10：JDK8 的 ConcurrentHashMap 原理？"></a>P10：JDK8 的 ConcurrentHashMap 原理？</h4><p>主要对 JDK7 做了三点改造：① 取消分段锁机制，进一步降低冲突概率。② 引入红黑树结构，同一个哈希槽上的元素个数超过一定阈值后，单向链表改为红黑树结构。③ 使用了更加优化的方式统计集合内的元素数量。具体优化表现在：在 put、resize 和 size 方法中设计元素总数的更新和计算都避免了锁，使用 CAS 代替。</p><p>get 同样不需要同步，put 操作时如果没有出现哈希冲突，就使用 CAS 添加元素，否则使用 synchronized 加锁添加元素。</p><p>当某个槽内的元素个数达到 7 且 table 容量不小于 64 时，链表转为红黑树。当某个槽内的元素减少到 6 时，由红黑树重新转为链表。在转化过程中，使用同步块锁住当前槽的首元素，防止其他线程对当前槽进行增删改操作，转化完成后利用 CAS 替换原有链表。由于 TreeNode 节点也存储了 next 引用，因此红黑树转为链表很简单，只需从 first 元素开始遍历所有节点，并把节点从 TreeNode 转为 Node 类型即可，当构造好新链表后同样用 CAS 替换红黑树。</p><hr><h4 id="P11：ArrayList-的线程安全集合是什么？"><a href="#P11：ArrayList-的线程安全集合是什么？" class="headerlink" title="P11：ArrayList 的线程安全集合是什么？"></a>P11：ArrayList 的线程安全集合是什么？</h4><p>可以使用 CopyOnWriteArrayList 代替 ArrayList，它实现了读写分离。写操作复制一个新的集合，在新集合内添加或删除元素，修改完成后再将原集合的引用指向新集合。这样做的好处是可以高并发地进行读写操作而不需要加锁，因为当前集合不会添加任何元素。使用时注意尽量设置容量初始值，并且可以使用批量添加或删除，避免多次扩容，比如只增加一个元素却复制整个集合。</p><p>适合读多写少，单个添加时效率极低。CopyOnWriteArrayList 是 fail-safe 的，并发包的集合都是这种机制，fail-safe 在安全的副本上遍历，集合修改与副本遍历没有任何关系，缺点是无法读取最新数据。这也是 CAP 理论中 C 和 A 的矛盾，即一致性与可用性的矛盾。</p><hr><h2 id="框架-27"><a href="#框架-27" class="headerlink" title="框架 27"></a>框架 27</h2><h3 id="Spring-IoC-11"><a href="#Spring-IoC-11" class="headerlink" title="Spring IoC 11"></a>Spring IoC 11</h3><h4 id="Q1：IoC-是什么？"><a href="#Q1：IoC-是什么？" class="headerlink" title="Q1：IoC 是什么？"></a>Q1：IoC 是什么？</h4><p>IoC 即控制反转，简单来说就是把原来代码里需要实现的对象创建、依赖反转给容器来帮忙实现，需要创建一个容器并且需要一种描述让容器知道要创建的对象间的关系，在 Spring 中管理对象及其依赖关系是通过 Spring 的 IoC 容器实现的。</p><p>IoC 的实现方式有依赖注入和依赖查找，由于依赖查找使用的很少，因此 IoC 也叫做依赖注入。依赖注入指对象被动地接受依赖类而不用自己主动去找，对象不是从容器中查找它依赖的类，而是在容器实例化对象时主动将它依赖的类注入给它。假设一个 Car 类需要一个 Engine 的对象，那么一般需要需要手动 new 一个 Engine，利用 IoC 就只需要定义一个私有的 Engine 类型的成员变量，容器会在运行时自动创建一个 Engine 的实例对象并将引用自动注入给成员变量。</p><hr><h4 id="Q2：IoC-容器初始化过程？"><a href="#Q2：IoC-容器初始化过程？" class="headerlink" title="Q2：IoC 容器初始化过程？"></a>Q2：IoC 容器初始化过程？</h4><p><strong>基于 XML 的容器初始化</strong></p><p>当创建一个 ClassPathXmlApplicationContext 时，构造方法做了两件事：① 调用父容器的构造方法为容器设置好 Bean 资源加载器。② 调用父类的 <code>setConfigLocations</code> 方法设置 Bean 配置信息的定位路径。</p><p>ClassPathXmlApplicationContext 通过调用父类 AbstractApplicationContext 的 <code>refresh</code> 方法启动整个 IoC 容器对 Bean 定义的载入过程，<code>refresh</code> 是一个模板方法，规定了 IoC 容器的启动流程。在创建 IoC 容器前如果已有容器存在，需要把已有的容器销毁，保证在 <code>refresh</code> 方法后使用的是新创建的 IoC 容器。</p><p>容器创建后通过 <code>loadBeanDefinitions</code> 方法加载 Bean 配置资源，该方法做两件事：① 调用资源加载器的方法获取要加载的资源。② 真正执行加载功能，由子类 XmlBeanDefinitionReader 实现。加载资源时首先解析配置文件路径，读取配置文件的内容，然后通过 XML 解析器将 Bean 配置信息转换成文档对象，之后按照 Spring Bean 的定义规则对文档对象进行解析。</p><p>Spring IoC 容器中注册解析的 Bean 信息存放在一个 HashMap 集合中，key 是字符串，值是 BeanDefinition，注册过程中需要使用 synchronized 保证线程安全。当配置信息中配置的 Bean 被解析且被注册到 IoC 容器中后，初始化就算真正完成了，Bean 定义信息已经可以使用且可被检索。Spring IoC 容器的作用就是对这些注册的 Bean 定义信息进行处理和维护，注册的 Bean 定义信息是控制反转和依赖注入的基础。</p><p><strong>基于注解的容器初始化</strong></p><p>分为两种：① 直接将注解 Bean 注册到容器中，可以在初始化容器时注册，也可以在容器创建之后手动注册，然后刷新容器使其对注册的注解 Bean 进行处理。② 通过扫描指定的包及其子包的所有类处理，在初始化注解容器时指定要自动扫描的路径。</p><hr><h4 id="Q3：依赖注入的实现方法有哪些？"><a href="#Q3：依赖注入的实现方法有哪些？" class="headerlink" title="Q3：依赖注入的实现方法有哪些？"></a>Q3：依赖注入的实现方法有哪些？</h4><p><strong>构造方法注入：</strong> IoC Service Provider 会检查被注入对象的构造方法，取得它所需要的依赖对象列表，进而为其注入相应的对象。这种方法的优点是在对象构造完成后就处于就绪状态，可以马上使用。缺点是当依赖对象较多时，构造方法的参数列表会比较长，构造方法无法被继承，无法设置默认值。对于非必需的依赖处理可能需要引入多个构造方法，参数数量的变动可能会造成维护的困难。</p><p><strong>setter 方法注入：</strong> 当前对象只需要为其依赖对象对应的属性添加 setter 方法，就可以通过 setter 方法将依赖对象注入到被依赖对象中。setter 方法注入在描述性上要比构造方法注入强，并且可以被继承，允许设置默认值。缺点是无法在对象构造完成后马上进入就绪状态。</p><p><strong>接口注入：</strong> 必须实现某个接口，接口提供方法来为其注入依赖对象。使用少，因为它强制要求被注入对象实现不必要接口，侵入性强。</p><hr><h4 id="Q4：依赖注入的相关注解？"><a href="#Q4：依赖注入的相关注解？" class="headerlink" title="Q4：依赖注入的相关注解？"></a>Q4：依赖注入的相关注解？</h4><p><code>@Autowired</code>：自动按类型注入，如果有多个匹配则按照指定 Bean 的 id 查找，查找不到会报错。</p><p><code>@Qualifier</code>：在自动按照类型注入的基础上再按照 Bean 的 id 注入，给变量注入时必须搭配 <code>@Autowired</code>，给方法注入时可单独使用。</p><p><code>@Resource</code> ：直接按照 Bean 的 id 注入，只能注入 Bean 类型。</p><p><code>@Value</code> ：用于注入基本数据类型和 String 类型。</p><hr><h4 id="Q5：依赖注入的过程？"><a href="#Q5：依赖注入的过程？" class="headerlink" title="Q5：依赖注入的过程？"></a>Q5：依赖注入的过程？</h4><p><code>getBean</code> 方法获取 Bean 实例，该方***调用 <code>doGetBean</code> ，<code>doGetBean</code> 真正实现从 IoC 容器获取 Bean 的功能，也是触发依赖注入的地方。</p><p>具体创建 Bean 对象的过程由 ObjectFactory 的 <code>createBean</code> 完成，该方法主要通过 <code>createBeanInstance</code> 方法生成 Bean 包含的 Java 对象实例和 <code>populateBean</code> 方法对 Bean 属性的依赖注入进行处理。</p><p>在 <code>populateBean</code>方法中，注入过程主要分为两种情况：① 属性值类型不需要强制转换时，不需要解析属性值，直接进行依赖注入。② 属性值类型需要强制转换时，首先解析属性值，然后对解析后的属性值进行依赖注入。依赖注入的过程就是将 Bean 对象实例设置到它所依赖的 Bean 对象属性上，真正的依赖注入是通过 <code>setPropertyValues</code> 方法实现的，该方法使用了委派模式。</p><p>BeanWrapperImpl 类负责对完成初始化的 Bean 对象进行依赖注入，对于非集合类型属性，使用 JDK 反射，通过属性的 setter 方法为属性设置注入后的值。对于集合类型的属性，将属性值解析为目标类型的集合后直接赋值给属性。</p><p>当容器对 Bean 的定位、载入、解析和依赖注入全部完成后就不再需要手动创建对象，IoC 容器会自动为我们创建对象并且注入依赖。</p><hr><h4 id="Q6：Bean-的生命周期？"><a href="#Q6：Bean-的生命周期？" class="headerlink" title="Q6：Bean 的生命周期？"></a>Q6：Bean 的生命周期？</h4><p>在 IoC 容器的初始化过程中会对 Bean 定义完成资源定位，加载读取配置并解析，最后将解析的 Bean 信息放在一个 HashMap 集合中。当 IoC 容器初始化完成后，会进行对 Bean 实例的创建和依赖注入过程，注入对象依赖的各种属性值，在初始化时可以指定自定义的初始化方法。经过这一系列初始化操作后 Bean 达到可用状态，接下来就可以使用 Bean 了，当使用完成后会调用 destroy 方法进行销毁，此时也可以指定自定义的销毁方法，最终 Bean 被销毁且从容器中移除。</p><p>XML 方式通过配置 bean 标签中的 init-Method 和 destory-Method 指定自定义初始化和销毁方法。 </p><p>注解方式通过 <code>@PreConstruct</code> 和 <code>@PostConstruct</code> 注解指定自定义初始化和销毁方法。</p><hr><h4 id="Q7：Bean-的作用范围？"><a href="#Q7：Bean-的作用范围？" class="headerlink" title="Q7：Bean 的作用范围？"></a>Q7：Bean 的作用范围？</h4><p>通过 scope 属性指定 bean 的作用范围，包括：</p><p>① singleton：单例模式，是默认作用域，不管收到多少 Bean 请求每个容器中只有一个唯一的 Bean 实例。</p><p>② prototype：原型模式，和 singleton 相反，每次 Bean 请求都会创建一个新的实例。</p><p>③ request：每次 HTTP 请求都会创建一个新的 Bean 并把它放到 request 域中，在请求完成后 Bean 会失效并被垃圾收集器回收。</p><p>④ session：和 request 类似，确保每个 session 中有一个 Bean 实例，session 过期后 bean 会随之失效。</p><p>⑤ global session：当应用部署在 Portlet 容器时，如果想让所有 Portlet 共用全局存储变量，那么该变量需要存储在 global session 中。</p><hr><h4 id="Q8：如何通过-XML-方式创建-Bean？"><a href="#Q8：如何通过-XML-方式创建-Bean？" class="headerlink" title="Q8：如何通过 XML 方式创建 Bean？"></a>Q8：如何通过 XML 方式创建 Bean？</h4><p>默认无参构造方法，只需要指明 bean 标签中的 id 和 class 属性，如果没有无参构造方***报错。</p><p>静态工厂方法，通过 bean 标签中的 class 属性指明静态工厂，factory-method 属性指明静态工厂方法。</p><p>实例工厂方法，通过 bean 标签中的 factory-bean 属性指明实例工厂，factory-method 属性指明实例工厂方法。</p><hr><h4 id="Q9：如何通过注解创建-Bean？"><a href="#Q9：如何通过注解创建-Bean？" class="headerlink" title="Q9：如何通过注解创建 Bean？"></a>Q9：如何通过注解创建 Bean？</h4><p><code>@Component</code> 把当前类对象存入 Spring 容器中，相当于在 xml 中配置一个 bean 标签。value 属性指定 bean 的 id，默认使用当前类的首字母小写的类名。</p><p><code>@Controller</code>，<code>@Service</code>，<code>@Repository</code> 三个注解都是 <code>@Component</code>  的衍生注解，作用及属性都是一模一样的。只是提供了更加明确语义，<code>@Controller</code> 用于表现层，<code>@Service</code>用于业务层，<code>@Repository</code>用于持久层。如果注解中有且只有一个 value 属性要赋值时可以省略 value。</p><p>如果想将第三方的类变成组件又没有源代码，也就没办法使用 <code>@Component</code> 进行自动配置，这种时候就要使用 <code>@Bean</code> 注解。被 <code>@Bean</code> 注解的方法返回值是一个对象，将会实例化，配置和初始化一个新对象并返回，这个对象由 Spring 的 IoC 容器管理。name 属性用于给当前 <code>@Bean</code>  注解方法创建的对象指定一个名称，即 bean 的 id。当使用注解配置方法时，如果方法有参数，Spring 会去容器查找是否有可用 bean对象，查找方式和 <code>@Autowired</code> 一样。</p><hr><h4 id="Q10：如何通过注解配置文件？"><a href="#Q10：如何通过注解配置文件？" class="headerlink" title="Q10：如何通过注解配置文件？"></a>Q10：如何通过注解配置文件？</h4><p><code>@Configuration</code> 用于指定当前类是一个 spring 配置类，当创建容器时会从该类上加载注解，value 属性用于指定配置类的字节码。</p><p><code>@ComponentScan</code> 用于指定 Spring 在初始化容器时要扫描的包。basePackages 属性用于指定要扫描的包。</p><p><code>@PropertySource</code> 用于加载 <code>.properties</code> 文件中的配置。value 属性用于指定文件位置，如果是在类路径下需要加上 classpath。</p><p><code>@Import</code> 用于导入其他配置类，在引入其他配置类时可以不用再写 <code>@Configuration</code> 注解。有 <code>@Import</code> 的是父配置类，引入的是子配置类。value 属性用于指定其他配置类的字节码。</p><hr><h4 id="Q11：BeanFactory、FactoryBean-和-ApplicationContext-的区别？"><a href="#Q11：BeanFactory、FactoryBean-和-ApplicationContext-的区别？" class="headerlink" title="Q11：BeanFactory、FactoryBean 和 ApplicationContext 的区别？"></a>Q11：BeanFactory、FactoryBean 和 ApplicationContext 的区别？</h4><p>BeanFactory 是一个 Bean 工厂，使用简单工厂模式，是 Spring IoC 容器顶级接口，可以理解为含有 Bean 集合的工厂类，作用是管理 Bean，包括实例化、定位、配置对象及建立这些对象间的依赖。BeanFactory 实例化后并不会自动实例化 Bean，只有当 Bean 被使用时才实例化与装配依赖关系，属于延迟加载，适合多例模式。</p><p>FactoryBean 是一个工厂 Bean，使用了工厂方法模式，作用是生产其他 Bean 实例，可以通过实现该接口，提供一个工厂方法来自定义实例化 Bean 的逻辑。FactoryBean 接口由 BeanFactory 中配置的对象实现，这些对象本身就是用于创建对象的工厂，如果一个 Bean 实现了这个接口，那么它就是创建对象的工厂 Bean，而不是 Bean 实例本身。</p><p>ApplicationConext 是 BeanFactory 的子接口，扩展了 BeanFactory 的功能，提供了支持国际化的文本消息，统一的资源文件读取方式，事件传播以及应用层的特别配置等。容器会在初始化时对配置的 Bean 进行预实例化，Bean 的依赖注入在容器初始化时就已经完成，属于立即加载，适合单例模式，一般推荐使用。</p><hr><h3 id="Spring-AOP-4"><a href="#Spring-AOP-4" class="headerlink" title="Spring AOP 4"></a>Spring AOP 4</h3><h4 id="Q1：AOP-是什么？"><a href="#Q1：AOP-是什么？" class="headerlink" title="Q1：AOP 是什么？"></a>Q1：AOP 是什么？</h4><p>AOP 即面向切面编程，简单地说就是将代码中重复的部分抽取出来，在需要执行的时候使用动态代理技术，在不修改源码的基础上对方法进行增强。</p><p>Spring 根据类是否实现接口来判断动态代理方式，如果实现接口会使用 JDK 的动态代理，核心是 InvocationHandler 接口和 Proxy 类，如果没有实现接口会使用 CGLib 动态代理，CGLib 是在运行时动态生成某个类的子类，如果某个类被标记为 final，不能使用 CGLib 。</p><p>JDK 动态代理主要通过重组字节码实现，首先获得被代理对象的引用和所有接口，生成新的类必须实现被代理类的所有接口，动态生成Java 代码后编译新生成的 <code>.class</code> 文件并重新加载到 JVM 运行。JDK 代理直接写 Class 字节码，CGLib 是采用 ASM 框架写字节码，生成代理类的效率低。但是 CGLib 调用方法的效率高，因为 JDK 使用反射调用方法，CGLib 使用 FastClass 机制为代理类和被代理类各生成一个类，这个类会为代理类或被代理类的方法生成一个 index，这个 index 可以作为参数直接定位要调用的方法。</p><p>常用场景包括权限认证、自动缓存、错误处理、日志、调试和事务等。</p><hr><h4 id="Q2：AOP-的相关注解有哪些？"><a href="#Q2：AOP-的相关注解有哪些？" class="headerlink" title="Q2：AOP 的相关注解有哪些？"></a>Q2：AOP 的相关注解有哪些？</h4><p><code>@Aspect</code>：声明被注解的类是一个切面 Bean。</p><p><code>@pointcut</code>切入点</p><p><code>@Around</code>包围被加强方法</p><p><code>@Before</code>：前置通知，指在某个连接点之前执行的通知。</p><p><code>@After</code>：后置通知，指某个连接点退出时执行的通知（不论正常返回还是异常退出）。</p><p><code>@AfterReturning</code>：返回后通知，指某连接点正常完成之后执行的通知，返回值使用returning属性接收。</p><p><code>@AfterThrowing</code>：异常通知，指方法抛出异常导致退出时执行的通知，和<code>@AfterReturning</code>只会有一个执行，异常使用throwing属性接收。</p><hr><h4 id="Q3：AOP-的相关术语有什么？"><a href="#Q3：AOP-的相关术语有什么？" class="headerlink" title="Q3：AOP 的相关术语有什么？"></a>Q3：AOP 的相关术语有什么？</h4><p><code>Aspect</code>：切面，一个关注点的模块化，这个关注点可能会横切多个对象。</p><p><code>Joinpoint</code>：连接点，程序执行过程中的某一行为，即业务层中的所有方法。。</p><p><code>Advice</code>：通知，指切面对于某个连接点所产生的动作，包括前置通知、后置通知、返回后通知、异常通知和环绕通知。</p><p><code>Pointcut</code>：切入点，指被拦截的连接点，切入点一定是连接点，但连接点不一定是切入点。</p><p><code>Proxy</code>：代理，Spring AOP 中有 JDK 动态代理和 CGLib 代理，目标对象实现了接口时采用 JDK 动态代理，反之采用 CGLib 代理。</p><p><code>Target</code>：代理的目标对象，指一个或多个切面所通知的对象。</p><p><code>Weaving</code> ：织入，指把增强应用到目标对象来创建代理对象的过程。</p><hr><h4 id="Q4：AOP-的过程？"><a href="#Q4：AOP-的过程？" class="headerlink" title="Q4：AOP 的过程？"></a>Q4：AOP 的过程？</h4><p>Spring AOP 由 BeanPostProcessor 后置处理器开始，这个后置处理器是一个，可以监听容器触发的 Bean 生命周期事件，向容器注册后置处理器以后，容器中管理的 Bean 就具备了接收 IoC 容器回调事件的能力。BeanPostProcessor 的调用发生在 Spring IoC 容器完成 Bean 实例对象的创建和属性的依赖注入后，为 Bean 对象添加后置处理器的入口是 <code>initializeBean</code> 方法。</p><p>Spring 中 JDK 动态代理通过 JdkDynamicAopProxy 调用 Proxy 的 <code>newInstance</code> 方法来生成代理类，JdkDynamicAopProxy 也实现了 InvocationHandler 接口，<code>invoke</code> 方法的具体逻辑是先获取应用到此方法上的拦截器链，如果有拦截器则创建 MethodInvocation 并调用其 <code>proceed</code> 方法，否则直接反射调用目标方法。因此 Spring AOP 对目标对象的增强是通过拦截器实现的。</p><hr><h3 id="Spring-MVC-3"><a href="#Spring-MVC-3" class="headerlink" title="Spring MVC 3"></a>Spring MVC 3</h3><h4 id="Q1：Spring-MVC-的处理流程？"><a href="#Q1：Spring-MVC-的处理流程？" class="headerlink" title="Q1：Spring MVC 的处理流程？"></a>Q1：Spring MVC 的处理流程？</h4><p>Web 容器启动时会通知 Spring 初始化容器，加载 Bean 的定义信息并初始化所有单例 Bean，然后遍历容器中的 Bean，获取每一个 Controller 中的所有方法访问的 URL，将 URL 和对应的 Controller 保存到一个 Map 集合中。</p><p>所有的请求会转发给 DispatcherServlet 前端处理器处理，DispatcherServlet 会请求 HandlerMapping 找出容器中被 <code>@Controller</code> 注解修饰的 Bean 以及被 <code>@RequestMapping</code> 修饰的方法和类，生成 Handler 和 HandlerInterceptor 并以一个 HandlerExcutionChain 处理器执行链的形式返回。</p><p>之后 DispatcherServlet 使用 Handler 找到对应的 HandlerApapter，通过 HandlerApapter 调用 Handler 的方法，将请求参数绑定到方法的形参上，执行方法处理请求并得到 ModelAndView。</p><p>最后 DispatcherServlet 根据使用 ViewResolver 视图解析器对得到的 ModelAndView 逻辑视图进行解析得到 View 物理视图，然后对视图渲染，将数据填充到视图中并返回给客户端。</p><hr><h4 id="Q2：Spring-MVC-有哪些组件？"><a href="#Q2：Spring-MVC-有哪些组件？" class="headerlink" title="Q2：Spring MVC 有哪些组件？"></a>Q2：Spring MVC 有哪些组件？</h4><p><code>DispatcherServlet</code>：SpringMVC 中的前端控制器，是整个流程控制的核心，负责接收请求并转发给对应的处理组件。</p><p><code>Handler</code>：处理器，完成具体业务逻辑，相当于 Servlet 或 Action。</p><p><code>HandlerMapping</code>：完成 URL 到 Controller 映射，DispatcherServlet 通过 HandlerMapping 将不同请求映射到不同 Handler。</p><p><code>HandlerInterceptor</code>：处理器拦截器，是一个接口，如果需要完成一些拦截处理，可以实现该接口。</p><p><code>HandlerExecutionChain</code>：处理器执行链，包括两部分内容：Handler 和 HandlerInterceptor。</p><p><code>HandlerAdapter</code>：处理器适配器，Handler执行业务方法前需要进行一系列操作，包括表单数据验证、数据类型转换、将表单数据封装到JavaBean等，这些操作都由 HandlerAdapter 完成。DispatcherServlet 通过 HandlerAdapter 来执行不同的 Handler。</p><p><code>ModelAndView</code>：装载模型数据和视图信息，作为 Handler 处理结果返回给 DispatcherServlet。</p><p><code>ViewResolver</code>：视图解析器，DispatcherServlet 通过它将逻辑视图解析为物理视图，最终将渲染的结果响应给客户端。</p><hr><h4 id="Q3：Spring-MVC-的相关注解？"><a href="#Q3：Spring-MVC-的相关注解？" class="headerlink" title="Q3：Spring MVC 的相关注解？"></a>Q3：Spring MVC 的相关注解？</h4><p><code>@Controller</code>：在类定义处添加，将类交给IoC容器管理。</p><p><code>@RequtestMapping</code>：将URL请求和业务方法映射起来，在类和方法定义上都可以添加该注解。<code>value</code> 属性指定URL请求的实际地址，是默认值。<code>method</code> 属性限制请求的方法类型，包括GET、POST、PUT、DELETE等。如果没有使用指定的请求方法请求URL，会报405 Method Not Allowed 错误。<code>params</code> 属性限制必须提供的参数，如果没有会报错。</p><p><code>@RequestParam</code>：如果 Controller 方法的形参和 URL 参数名一致可以不添加注解，如果不一致可以使用该注解绑定。<code>value</code> 属性表示HTTP请求中的参数名。<code>required</code> 属性设置参数是否必要，默认false。<code>defaultValue</code> 属性指定没有给参数赋值时的默认值。</p><p><code>@PathVariable</code>：Spring MVC 支持 RESTful 风格 URL，通过 <code>@PathVariable</code> 完成请求参数与形参的绑定。</p><hr><h3 id="Spring-Data-JPA-4"><a href="#Spring-Data-JPA-4" class="headerlink" title="Spring Data JPA 4"></a>Spring Data JPA 4</h3><h4 id="Q1：ORM-是什么？"><a href="#Q1：ORM-是什么？" class="headerlink" title="Q1：ORM 是什么？"></a>Q1：ORM 是什么？</h4><p>ORM 即 Object-Relational Mapping ，表示对象关系映射，映射的不只是对象的值还有对象之间的关系，通过 ORM 就可以把对象映射到关系型数据库中。操作实体类就相当于操作数据库表，可以不再重点关注 SQL 语句。</p><hr><h4 id="Q2：JPA-如何使用？"><a href="#Q2：JPA-如何使用？" class="headerlink" title="Q2：JPA 如何使用？"></a>Q2：JPA 如何使用？</h4><p>只需要持久层接口继承 JpaRepository 即可，泛型参数列表中第一个参数是实体类类型，第二个参数是主键类型。</p><p>运行时通过 <code>JdkDynamicAopProxy</code> 的 <code>invoke</code> 方法创建了一个动态代理对象 <code>SimpleJpaRepository</code>，<code>SimpleJpaRepository</code> 中封装了 JPA 的操作，通过 <code>hibernate</code>（封装了JDBC）完成数据库操作。</p><hr><h4 id="Q3：JPA-实体类相关注解有哪些？"><a href="#Q3：JPA-实体类相关注解有哪些？" class="headerlink" title="Q3：JPA 实体类相关注解有哪些？"></a>Q3：JPA 实体类相关注解有哪些？</h4><p><code>@Entity</code>：表明当前类是一个实体类。</p><p><code>@Table</code> ：关联实体类和数据库表。</p><p><code>@Column</code> ：关联实体类属性和数据库表中字段。</p><p><code>@Id</code> ：声明当前属性为数据库表主键对应的属性。</p><p><code>@GeneratedValue</code>： 配置主键生成策略。</p><p><code>@OneToMany</code> ：配置一对多关系，mappedBy 属性值为主表实体类在从表实体类中对应的属性名。</p><p><code>@ManyToOne</code> ：配置多对一关系，targetEntity 属性值为主表对应实体类的字节码。</p><p><code>@JoinColumn</code>：配置外键关系，name 属性值为外键名称，referencedColumnName 属性值为主表主键名称。</p><hr><h4 id="Q4：对象导航查询是什么？"><a href="#Q4：对象导航查询是什么？" class="headerlink" title="Q4：对象导航查询是什么？"></a>Q4：对象导航查询是什么？</h4><p>通过 get 方法查询一个对象的同时，通过此对象可以查询它的关联对象。</p><p>对象导航查询一到多默认使用延迟加载的形式， 关联对象是集合，因此使用立即加载可能浪费资源。</p><p>对象导航查询多到一默认使用立即加载的形式， 关联对象是一个对象，因此使用立即加载。</p><p>如果要改变加载方式，在实体类注解配置加上 fetch 属性即可，LAZY 表示延迟加载，EAGER 表示立即加载。</p><hr><h3 id="Mybatis-5"><a href="#Mybatis-5" class="headerlink" title="Mybatis 5"></a>Mybatis 5</h3><h4 id="Q1：Mybatis-的优缺点？"><a href="#Q1：Mybatis-的优缺点？" class="headerlink" title="Q1：Mybatis 的优缺点？"></a>Q1：Mybatis 的优缺点？</h4><p><strong>优点</strong></p><p>相比 JDBC 减少了大量代码量，减少冗余代码。</p><p>使用灵活，SQL 语句写在 XML 里，从程序代码中彻底分离，降低了耦合度，便于管理。</p><p>提供 XML 标签，支持编写动态 SQL 语句。</p><p>提供映射标签，支持对象与数据库的 ORM 字段映射关系。</p><p><strong>缺点</strong></p><p>SQL 语句编写工作量较大，尤其是字段和关联表多时。</p><p>SQL 语句依赖于数据库，导致数据库移植性差，不能随意更换数据库。</p><hr><h4 id="Q2：Mybatis-的-XML-文件有哪些标签属性？"><a href="#Q2：Mybatis-的-XML-文件有哪些标签属性？" class="headerlink" title="Q2：Mybatis 的 XML 文件有哪些标签属性？"></a>Q2：Mybatis 的 XML 文件有哪些标签属性？</h4><p><code>select</code>、<code>insert</code>、<code>update</code>、<code>delete</code> 标签分别对应查询、添加、更新、删除操作。</p><p><code>parameterType</code>  属性表示参数的数据类型，包括基本数据类型和对应的包装类型、String 和 Java Bean 类型，当有多个参数时可以使用 <code>#{argn}</code> 的形式表示第 n 个参数。除了基本数据类型都要以全限定类名的形式指定参数类型。</p><p><code>resultType</code>  表示返回的结果类型，包括基本数据类型和对应的包装类型、String 和 Java Bean 类型。还可以使用把返回结果封装为复杂类型的 <code>resultMap</code> 。</p><hr><h4 id="Q3：Mybatis-的一级缓存是什么？"><a href="#Q3：Mybatis-的一级缓存是什么？" class="headerlink" title="Q3：Mybatis 的一级缓存是什么？"></a>Q3：Mybatis 的一级缓存是什么？</h4><p>一级缓存是 SqlSession 级别，默认开启且不能关闭。</p><p>操作数据库时需要创建 SqlSession 对象，对象中有一个 HashMap 存储缓存数据，不同 SqlSession 之间缓存数据区域互不影响。</p><p>一级缓存的作用域是 SqlSession 范围的，在同一个 SqlSession 中执行两次相同的 SQL 语句时，第一次执行完毕会将结果保存在缓存中，第二次查询直接从缓存中获取。</p><p>如果 SqlSession 执行了 DML 操作（insert、update、delete），Mybatis 必须将缓存清空保证数据有效性。 </p><hr><h4 id="Q4：Mybatis-的二级缓存是什么？"><a href="#Q4：Mybatis-的二级缓存是什么？" class="headerlink" title="Q4：Mybatis 的二级缓存是什么？"></a>Q4：Mybatis 的二级缓存是什么？</h4><p>二级缓存是Mapper 级别，默认关闭。</p><p>使用二级缓存时多个 SqlSession 使用同一个 Mapper 的 SQL 语句操作数据库，得到的数据会存在二级缓存区，同样使用 HashMap 进行数据存储，相比于一级缓存，二级缓存范围更大，多个 SqlSession 可以共用二级缓存，作用域是 Mapper 的同一个 namespace，不同 SqlSession 两次执行相同的 namespace 下的 SQL 语句，参数也相等，则第一次执行成功后会将数据保存在二级缓存中，第二次可直接从二级缓存中取出数据。</p><p>要使用二级缓存，需要在全局配置文件中配置 ，再在对应的映射文件中配置一个 标签。</p><hr><h4 id="Q5：Mybatis-和-的区别？"><a href="#Q5：Mybatis-和-的区别？" class="headerlink" title="Q5：Mybatis  #{} 和 ${} 的区别？"></a>Q5：Mybatis  <code>#{}</code> 和 <code>${}</code> 的区别？</h4><p>使用 <code>${}</code>  相当于使用字符串拼接，存在 SQL 注入的风险。</p><p>使用 <code>#{}</code> 相当于使用占位符，可以防止 SQL 注入，不支持使用占位符的地方就只能使用 <code>${}</code> ，典型情况就是动态参数。</p><hr><h2 id="数据结构和算法-13"><a href="#数据结构和算法-13" class="headerlink" title="数据结构和算法 13"></a>数据结构和算法 13</h2><h3 id="数据结构-4"><a href="#数据结构-4" class="headerlink" title="数据结构 4"></a>数据结构 4</h3><h4 id="Q1：什么是-AVL-树？"><a href="#Q1：什么是-AVL-树？" class="headerlink" title="Q1：什么是 AVL 树？"></a>Q1：什么是 AVL 树？</h4><p>AVL 树是平衡二叉查找树，增加和删除节点后通过树形旋转重新达到平衡。右旋是以某个节点为中心，将它沉入当前右子节点的位置，而让当前的左子节点作为新树的根节点，也称为顺时针旋转。同理左旋是以某个节点为中心，将它沉入当前左子节点的位置，而让当前的右子节点作为新树的根节点，也称为逆时针旋转。</p><hr><h4 id="Q2：什么是红黑树？"><a href="#Q2：什么是红黑树？" class="headerlink" title="Q2：什么是红黑树？"></a>Q2：什么是红黑树？</h4><p>红黑树是 1972 年发明的，称为对称二叉 B 树，1978 年正式命名红黑树。主要特征是在每个节点上增加一个属性表示节点颜色，可以红色或黑色。红黑树和 AVL 树类似，都是在进行插入和删除时通过旋转保持自身平衡，从而获得较高的查找性能。与 AVL 树相比，红黑树不追求所有递归子树的高度差不超过 1，保证从根节点到叶尾的最长路径不超过最短路径的 2 倍，所以最差时间复杂度是 O(log<del>n</del>)。红黑树通过重新着色和左右旋转，更加高效地完成了插入和删除之后的自平衡调整。</p><p>红黑树在本质上还是二叉查找树，它额外引入了 5 个约束条件：① 节点只能是红色或黑色。② 根节点必须是黑色。③ 所有 NIL 节点都是黑色的。④ 一条路径上不能出现相邻的两个红色节点。⑤ 在任何递归子树中，根节点到叶子节点的所有路径上包含相同数目的黑色节点。这五个约束条件保证了红黑树的新增、删除、查找的最坏时间复杂度均为 O(log<del>n</del>)。如果一个树的左子节点或右子节点不存在，则均认定为黑色。红黑树的任何旋转在 3 次之内均可完成。</p><hr><h4 id="Q3：AVL-树和红黑树的区别？"><a href="#Q3：AVL-树和红黑树的区别？" class="headerlink" title="Q3：AVL 树和红黑树的区别？"></a>Q3：AVL 树和红黑树的区别？</h4><p>红黑树的平衡性不如 AVL 树，它维持的只是一种大致的平衡，不严格保证左右子树的高度差不超过 1。这导致节点数相同的情况下，红黑树的高度可能更高，也就是说平均查找次数会高于相同情况的 AVL 树。</p><p>在插入时，红黑树和 AVL 树都能在至多两次旋转内恢复平衡，在删除时由于红黑树只追求大致平衡，因此红黑树至多三次旋转可以恢复平衡，而 AVL 树最多需要 O(log<del>n</del>) 次。AVL 树在插入和删除时，将向上回溯确定是否需要旋转，这个回溯的时间成本最差为 O(log<del>n</del>)，而红黑树每次向上回溯的步长为 2，回溯成本低。因此面对频繁地插入与删除红黑树更加合适。</p><hr><h4 id="Q4：B-树和B-树的区别？"><a href="#Q4：B-树和B-树的区别？" class="headerlink" title="Q4：B 树和B+ 树的区别？"></a>Q4：B 树和B+ 树的区别？</h4><p>B 树中每个节点同时存储 key 和 data，而 B+ 树中只有叶子节点才存储 data，非叶子节点只存储 key。InnoDB 对 B+ 树进行了优化，在每个叶子节点上增加了一个指向相邻叶子节点的链表指针，形成了带有顺序指针的 B+ 树，提高区间访问的性能。</p><p>B+ 树的优点在于：① 由于 B+ 树在非叶子节点上不含数据信息，因此在内存页中能够存放更多的 key，数据存放得更加紧密，具有更好的空间利用率，访问叶子节点上关联的数据也具有更好的缓存命中率。② B+树的叶子结点都是相连的，因此对整棵树的遍历只需要一次线性遍历叶子节点即可。而 B 树则需要进行每一层的递归遍历，相邻的元素可能在内存中不相邻，所以缓存命中性没有 B+树好。但是 B 树也有优点，由于每个节点都包含 key 和 value，因此经常访问的元素可能离根节点更近，访问也更迅速。</p><hr><h3 id="排序-9"><a href="#排序-9" class="headerlink" title="排序 9"></a>排序 9</h3><h4 id="Q1：排序有哪些分类？"><a href="#Q1：排序有哪些分类？" class="headerlink" title="Q1：排序有哪些分类？"></a>Q1：排序有哪些分类？</h4><p>排序可以分为内部排序和外部排序，在内存中进行的称为内部排序，当数据量很大时无法全部拷贝到内存需要使用外存，称为外部排序。</p><p>内部排序包括比较排序和非比较排序，比较排序包括插入/选择/交换/归并排序，非比较排序包括计数/基数/桶排序。</p><p>插入排序包括直接插入/希尔排序，选择排序包括直接选择/堆排序，交换排序包括冒泡/快速排序。</p><hr><h4 id="Q2：直接插入排序的原理？"><a href="#Q2：直接插入排序的原理？" class="headerlink" title="Q2：直接插入排序的原理？"></a>Q2：直接插入排序的原理？</h4><p>稳定，平均/最差时间复杂度 O(n²)，元素基本有序时最好时间复杂度 O(n)，空间复杂度 O(1)。</p><p>每一趟将一个待排序记录按其关键字的大小插入到已排好序的一组记录的适当位置上，直到所有待排序记录全部插入为止。</p><pre class="line-numbers language-none"><code class="language-none">public` `void` `insertionSort(``int``[] nums) {``  ``for` `(``int` `i = ``1``; i &lt; nums.length; i++) {``    ``int` `insertNum = nums[i];``    ``int` `insertIndex;``    ``for` `(insertIndex = i - ``1``; insertIndex &gt;= ``0` `&amp;&amp; nums[insertIndex] &gt; insertNum; insertIndex--) {``      ``nums[insertIndex + ``1``] = nums[insertIndex];``    ``}``    ``nums[insertIndex + ``1``] = insertNum;``  ``}``}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>直接插入没有利用到要插入的序列已有序的特点，插入第 i 个元素时可以通过二分查找找到插入位置 insertIndex，再把 i~insertIndex 之间的所有元素后移一位，把第 i 个元素放在插入位置上。</p><pre class="line-numbers language-none"><code class="language-none">public` `void` `binaryInsertionSort(``int``[] nums) {``  ``for` `(``int` `i = ``1``; i &lt; nums.length; i++) {``    ``int` `insertNum = nums[i];``    ``int` `insertIndex = -``1``;``    ``int` `start = ``0``;``    ``int` `end = i - ``1``;``    ``while` `(start &lt;= end) {``      ``int` `mid = start + (end - start) / ``2``;``      ``if` `(insertNum &gt; nums[mid])``        ``start = mid + ``1``;``      ``else` `if` `(insertNum &lt; nums[mid])``        ``end = mid - ``1``;``      ``else` `{``        ``insertIndex = mid + ``1``;``        ``break``;``      ``}``    ``}``    ``if` `(insertIndex == -``1``)``      ``insertIndex = start;``    ``if` `(i - insertIndex &gt;= ``0``)``      ``System.arraycopy(nums, insertIndex, nums, insertIndex + ``1``, i - insertIndex);``    ``nums[insertIndex] = insertNum;``  ``}``}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h4 id="Q3：希尔排序的原理？"><a href="#Q3：希尔排序的原理？" class="headerlink" title="Q3：希尔排序的原理？"></a>Q3：希尔排序的原理？</h4><p>又称缩小增量排序，是对直接插入排序的改进，不稳定，平均时间复杂度 O(n^1.3^)，最差时间复杂度 O(n²)，最好时间复杂度 O(n)，空间复杂度 O(1)。</p><p>把记录按下标的一定增量分组，对每组进行直接插入排序，每次排序后减小增量，当增量减至 1 时排序完毕。</p><pre class="line-numbers language-none"><code class="language-none">public` `void` `shellSort(``int``[] nums) {``  ``for` `(``int` `d = nums.length / ``2``; d &gt; ``0` `; d /= ``2``) {``    ``for` `(``int` `i = d; i &lt; nums.length; i++) {``      ``int` `insertNum = nums[i];``      ``int` `insertIndex;``      ``for` `(insertIndex = i - d; insertIndex &gt;= ``0` `&amp;&amp; nums[insertIndex] &gt; insertNum; insertIndex -= d) {``        ``nums[insertIndex + d] = nums[insertIndex];``      ``}``      ``nums[insertIndex + d] = insertNum;``    ``}``  ``}``}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h4 id="Q4：直接选择排序的原理？"><a href="#Q4：直接选择排序的原理？" class="headerlink" title="Q4：直接选择排序的原理？"></a>Q4：直接选择排序的原理？</h4><p>不稳定，时间复杂度 O(n²)，空间复杂度 O(1)。</p><p>每次在未排序序列中找到最小元素，和未排序序列的第一个元素交换位置，再在剩余未排序序列中重复该操作直到所有元素排序完毕。</p><pre class="line-numbers language-none"><code class="language-none">public` `void` `selectSort(``int``[] nums) {``  ``int` `minIndex;``  ``for` `(``int` `index = ``0``; index &lt; nums.length - ``1``; index++){``    ``minIndex = index;``    ``for` `(``int` `i = index + ``1``;i &lt; nums.length; i++){``      ``if``(nums[i] &lt; nums[minIndex]) ``        ``minIndex = i;``    ``}``    ``if` `(index != minIndex){``      ``swap(nums, index, minIndex);``    ``}``  ``}``}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h4 id="Q5：堆排序的原理？"><a href="#Q5：堆排序的原理？" class="headerlink" title="Q5：堆排序的原理？"></a>Q5：堆排序的原理？</h4><p>是对直接选择排序的改进，不稳定，时间复杂度 O(nlogn)，空间复杂度 O(1)。</p><p>将待排序记录看作完全二叉树，可以建立大根堆或小根堆，大根堆中每个节点的值都不小于它的子节点值，小根堆中每个节点的值都不大于它的子节点值。</p><p>以大根堆为例，在建堆时首先将最后一个节点作为当前节点，如果当前节点存在父节点且值大于父节点，就将当前节点和父节点交换。在移除时首先暂存根节点的值，然后用最后一个节点代替根节点并作为当前节点，如果当前节点存在子节点且值小于子节点，就将其与值较大的子节点进行交换，调整完堆后返回暂存的值。</p><pre class="line-numbers language-none"><code class="language-none">public` `void` `add(``int``[] nums, ``int` `i, ``int` `num){``  ``nums[i] = num;``  ``int` `curIndex = i;``  ``while` `(curIndex &gt; ``0``) {``    ``int` `parentIndex = (curIndex - ``1``) / ``2``;``    ``if` `(nums[parentIndex] &lt; nums[curIndex]) ``      ``swap(nums, parentIndex, curIndex);``    ``else` `break``;``    ``curIndex = parentIndex;``  ``}``}` `public` `int` `remove(``int``[] nums, ``int` `size){``  ``int` `result = nums[``0``];``  ``nums[``0``] = nums[size - ``1``];``  ``int` `curIndex = ``0``;``  ``while` `(``true``) {``    ``int` `leftIndex = curIndex * ``2` `+ ``1``;``    ``int` `rightIndex = curIndex * ``2` `+ ``2``;``    ``if` `(leftIndex &gt;= size) ``break``;``    ``int` `maxIndex = leftIndex;``    ``if` `(rightIndex &lt; size &amp;&amp; nums[maxIndex] &lt; nums[rightIndex])``      ``maxIndex = rightIndex;``    ``if` `(nums[curIndex] &lt; nums[maxIndex])``      ``swap(nums, curIndex, maxIndex);``    ``else` `break``;``    ``curIndex = maxIndex;``  ``}``  ``return` `result;``}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h4 id="Q6：冒泡排序的原理？"><a href="#Q6：冒泡排序的原理？" class="headerlink" title="Q6：冒泡排序的原理？"></a>Q6：冒泡排序的原理？</h4><p>稳定，平均/最坏时间复杂度 O(n²)，元素基本有序时最好时间复杂度 O(n)，空间复杂度 O(1)。</p><p>比较相邻的元素，如果第一个比第二个大就进行交换，对每一对相邻元素做同样的工作，从开始第一对到结尾的最后一对，每一轮排序后末尾元素都是有序的，针对 n 个元素重复以上步骤 n -1 次排序完毕。</p><pre class="line-numbers language-none"><code class="language-none">public` `void` `bubbleSort(``int``[] nums) {``  ``for` `(``int` `i = ``0``; i &lt; nums.length - ``1``; i++) {``    ``for` `(``int` `index = ``0``; index &lt; nums.length - ``1` `- i; index++) {``      ``if` `(nums[index] &gt; nums[index + ``1``]) ``        ``swap(nums, index, index + ``1``)``    ``}``  ``}``}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>当序列已经有序时仍会进行不必要的比较，可以设置一个标志记录是否有元素交换，如果没有直接结束比较。</p><pre class="line-numbers language-none"><code class="language-none">public` `void` `betterBubbleSort(``int``[] nums) {``  ``boolean` `swap;``  ``for` `(``int` `i = ``0``; i &lt; nums.length - ``1``; i++) {``    ``swap = ``true``;``    ``for` `(``int` `index = ``0``; index &lt; nums.length - ``1` `- i; index++) {``      ``if` `(nums[index] &gt; nums[index + ``1``]) {``        ``swap(nums, index ,index + ``1``);``        ``swap = ``false``;``      ``}``    ``}``    ``if` `(swap) ``break``;``  ``}``}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h4 id="Q7：快速排序的原理？"><a href="#Q7：快速排序的原理？" class="headerlink" title="Q7：快速排序的原理？"></a>Q7：快速排序的原理？</h4><p>是对冒泡排序的一种改进，不稳定，平均/最好时间复杂度 O(nlogn)，元素基本有序时最坏时间复杂度 O(n²)，空间复杂度 O(logn)。</p><p>首先选择一个基准元素，通过一趟排序将要排序的数据分割成独立的两部分，一部分全部小于等于基准元素，一部分全部大于等于基准元素，再按此方法递归对这两部分数据进行快速排序。</p><p>快速排序的一次划分从两头交替搜索，直到 low 和 high 指针重合，一趟时间复杂度 O(n)，整个算法的时间复杂度与划分趟数有关。</p><p>最好情况是每次划分选择的中间数恰好将当前序列等分，经过 log(n) 趟划分便可得到长度为 1 的子表，这样时间复杂度 O(nlogn)。</p><p>最坏情况是每次所选中间数是当前序列中的最大或最小元素，这使每次划分所得子表其中一个为空表 ，这样长度为 n 的数据表需要 n 趟划分，整个排序时间复杂度 O(n²)。</p><pre class="line-numbers language-none"><code class="language-none">public` `void` `quickSort(``int``[] nums, ``int` `start, ``int` `end) {``  ``if` `(start &lt; end) {``    ``int` `pivotIndex = getPivotIndex(nums, start, end);``    ``quickSort(nums, start, pivotIndex - ``1``);``    ``quickSort(nums, pivotIndex + ``1``, end);``  ``}``}` `public` `int` `getPivotIndex(``int``[] nums, ``int` `start, ``int` `end) {``  ``int` `pivot = nums[start];``  ``int` `low = start;``  ``int` `high = end;``  ``while` `(low &lt; high) {``    ``while` `(low &lt;= high &amp;&amp; nums[low] &lt;= pivot) ``      ``low++;``    ``while` `(low &lt;= high &amp;&amp; nums[high] &gt; pivot) ``      ``high--;``    ``if` `(low &lt; high) ``      ``swap(nums, low, high);``  ``}``  ``swap(nums, start, high);``  ``return` `high;``}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>优化：</strong>当规模足够小时，例如 <code>end - start &lt; 10</code> 时，采用直接插入排序。</p><hr><h4 id="Q8：归并排序的原理？"><a href="#Q8：归并排序的原理？" class="headerlink" title="Q8：归并排序的原理？"></a>Q8：归并排序的原理？</h4><p>归并排序基于归并操作，是一种稳定的排序算法，任何情况时间复杂度都为 O(nlogn)，空间复杂度为 O(n)。</p><p><strong>基本原理：</strong>应用分治法将待排序序列分成两部分，然后对两部分分别递归排序，最后进行合并，使用一个辅助空间并设定两个指针分别指向两个有序序列的起始元素，将指针对应的较小元素添加到辅助空间，重复该步骤到某一序列到达末尾，然后将另一序列剩余元素合并到辅助空间末尾。</p><p><strong>适用场景：</strong>数据量大且对稳定性有要求的情况。</p><pre class="line-numbers language-none"><code class="language-none">int``[] help;` `public` `void` `mergeSort(``int``[] arr) {``  ``int``[] help = ``new` `int``[arr.length];``  ``sort(arr, ``0``, arr.length - ``1``);``}` `public` `void` `sort(``int``[] arr, ``int` `start, ``int` `end) {``  ``if` `(start == end) ``return``;``  ``int` `mid = start + (end - start) / ``2``;``  ``sort(arr, start, mid);``  ``sort(arr, mid + ``1``, end);``  ``merge(arr, start, mid, end);``}` `public` `void` `merge(``int``[] arr, ``int` `start, ``int` `mid, ``int` `end) {``  ``if` `(end + ``1` `- start &gt;= ``0``) System.arraycopy(arr, start, help, start, end + ``1` `- start);``  ``int` `p = start;``  ``int` `q = mid + ``1``;``  ``int` `index = start;``  ``while` `(p &lt;= mid &amp;&amp; q &lt;= end) {``    ``if` `(help[p] &lt; help[q]) ``      ``arr[index++] = help[p++];``    ``else``      ``arr[index++] = help[q++];``  ``}``  ``while` `(p &lt;= mid) arr[index++] = help[p++];``  ``while` `(q &lt;= end) arr[index++] = help[q++];``}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h4 id="Q9：排序算法怎么选择？"><a href="#Q9：排序算法怎么选择？" class="headerlink" title="Q9：排序算法怎么选择？"></a>Q9：排序算法怎么选择？</h4><p>数据量规模较小，考虑直接插入或直接选择。当元素分布有序时直接插入将大大减少比较和移动记录的次数，如果不要求稳定性，可以使用直接选择，效率略高于直接插入。</p><p>数据量规模中等，选择希尔排序。</p><p>数据量规模较大，考虑堆排序（元素分布接近正序或逆序）、快速排序（元素分布随机）和归并排序（稳定性）。</p><p>一般不使用冒泡。</p><hr><h2 id="设计模式-15"><a href="#设计模式-15" class="headerlink" title="设计模式 15"></a>设计模式 15</h2><h4 id="Q1：设计模式有哪些原则？"><a href="#Q1：设计模式有哪些原则？" class="headerlink" title="Q1：设计模式有哪些原则？"></a>Q1：设计模式有哪些原则？</h4><p><strong>开闭原则：</strong>OOP 中最基础的原则，指一个软件实体（类、模块、方法等）应该对扩展开放，对修改关闭。强调用抽象构建框架，用实现扩展细节，提高代码的可复用性和可维护性。</p><p><strong>单一职责原则：</strong>一个类、接口或方法只负责一个职责，降低代码复杂度以及变更引起的风险。</p><p><strong>依赖倒置原则：</strong>程序应该依赖于抽象类或接口，而不是具体的实现类。</p><p><strong>接口隔离原则：</strong>将不同功能定义在不同接口中实现接口隔离，避免了类依赖它不需要的接口，减少了接口之间依赖的冗余性和复杂性。</p><p><strong>里氏替换原则：</strong>开闭原则的补充，规定了任何父类可以出现的地方子类都一定可以出现，可以约束继承泛滥，加强程序健壮性。</p><p><strong>迪米特原则：</strong>也叫最少知道原则，每个模块对其他模块都要尽可能少地了解和依赖，降低代码耦合度。</p><p><strong>合成/聚合原则：</strong>尽量使用组合(has-a)/聚合(contains-a)而不是继承(is-a)达到软件复用的目的，避免滥用继承带来的方法污染和方法爆炸，方法污染指父类的行为通过继承传递给子类，但子类并不具备执行此行为的能力；方法爆炸指继承树不断扩大，底层类拥有的方法过于繁杂，导致很容易选择错误。</p><hr><h4 id="Q2：设计模式的分类，你知道哪些设计模式？"><a href="#Q2：设计模式的分类，你知道哪些设计模式？" class="headerlink" title="Q2：设计模式的分类，你知道哪些设计模式？"></a>Q2：设计模式的分类，你知道哪些设计模式？</h4><p><strong>创建型：</strong> 在创建对象的同时隐藏创建逻辑，不使用 new 直接实例化对象，程序在判断需要创建哪些对象时更灵活。包括工厂/抽象工厂/单例/建造者/原型模式。</p><p>**结构型： **通过类和接口间的继承和引用实现创建复杂结构的对象。包括适配器/桥接模式/过滤器/组合/装饰器/外观/享元/代理模式。</p><p>**行为型： **通过类之间不同通信方式实现不同行为。包括责任链/命名/解释器/迭代器/中介者/备忘录/观察者/状态/策略/模板/访问者模式。</p><hr><h4 id="Q3：说一说简单工厂模式"><a href="#Q3：说一说简单工厂模式" class="headerlink" title="Q3：说一说简单工厂模式"></a>Q3：说一说简单工厂模式</h4><p>简单工厂模式指由一个工厂对象来创建实例，客户端不需要关注创建逻辑，只需提供传入工厂的参数。</p><p>适用于工厂类负责创建对象较少的情况，缺点是如果要增加新产品，就需要修改工厂类的判断逻辑，违背开闭原则，且产品多的话会使工厂类比较复杂。</p><p>Calendar 抽象类的 <code>getInstance</code> 方法，调用 <code>createCalendar</code> 方法根据不同的地区参数创建不同的日历对象。</p><p>Spring 中的 BeanFactory 使用简单工厂模式，根据传入一个唯一的标识来获得 Bean 对象。</p><hr><h4 id="Q4：说一说工厂方法模式"><a href="#Q4：说一说工厂方法模式" class="headerlink" title="Q4：说一说工厂方法模式"></a>Q4：说一说工厂方法模式</h4><p>工厂方法模式指定义一个创建对象的接口，让接口的实现类决定创建哪种对象，让类的实例化推迟到子类中进行。</p><p>客户端只需关心对应工厂而无需关心创建细节，主要解决了产品扩展的问题，在简单工厂模式中如果产品种类变多，工厂的职责会越来越多，不便于维护。</p><p>Collection 接口这个抽象工厂中定义了一个抽象的 <code>iterator</code> 工厂方法，返回一个 Iterator 类的抽象产品。该方法通过 ArrayList 、HashMap 等具体工厂实现，返回 Itr、KeyIterator 等具体产品。</p><p>Spring 的 FactoryBean 接口的 <code>getObject</code> 方法也是工厂方法。</p><hr><h4 id="Q5：抽象工厂模式了解吗？"><a href="#Q5：抽象工厂模式了解吗？" class="headerlink" title="Q5：抽象工厂模式了解吗？"></a>Q5：抽象工厂模式了解吗？</h4><p>抽象工厂模式指提供一个创建一系列相关或相互依赖对象的接口，无需指定它们的具体类。</p><p>客户端不依赖于产品类实例如何被创建和实现的细节，主要用于系统的产品有多于一个的产品族，而系统只消费其中某一个产品族产品的情况。抽象工厂模式的缺点是不方便扩展产品族，并且增加了系统的抽象性和理解难度。</p><p>java.sql.Connection 接口就是一个抽象工厂，其中包括很多抽象产品如 Statement、Blob、Savepoint 等。</p><hr><h4 id="Q6：单例模式的特点是什么？"><a href="#Q6：单例模式的特点是什么？" class="headerlink" title="Q6：单例模式的特点是什么？"></a>Q6：单例模式的特点是什么？</h4><p>单例模式属于创建型模式，一个单例类在任何情况下都只存在一个实例，构造方法必须是私有的、由自己创建一个静态变量存储实例，对外提供一个静态公有方法获取实例。</p><p>优点是内存中只有一个实例，减少了开销，尤其是频繁创建和销毁实例的情况下并且可以避免对资源的多重占用。缺点是没有抽象层，难以扩展，与单一职责原则冲突。</p><p>Spring 的 ApplicationContext 创建的 Bean 实例都是单例对象，还有 ServletContext、数据库连接池等也都是单例模式。</p><hr><h4 id="Q7：单例模式有哪些实现？"><a href="#Q7：单例模式有哪些实现？" class="headerlink" title="Q7：单例模式有哪些实现？"></a>Q7：单例模式有哪些实现？</h4><p><strong>饿汉式：</strong>在类加载时就初始化创建单例对象，线程安全，但不管是否使用都创建对象可能会浪费内存。</p><pre class="line-numbers language-none"><code class="language-none">public` `class` `HungrySingleton {``  ``private` `HungrySingleton(){}` `  ``private` `static` `HungrySingleton instance = ``new` `HungrySingleton();` `  ``public` `static` `HungrySingleton getInstance() {``    ``return` `instance;``  ``}``}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>懒汉式：</strong>在外部调用时才会加载，线程不安全，可以加锁保证线程安全但效率低。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LazySingleton</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">LazySingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">LazySingleton</span> instance<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">LazySingleton</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>instance <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LazySingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>双重检查锁：</strong>使用 volatile 以及多重检查来减小锁范围，提升效率。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DoubleCheckSingleton</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">DoubleCheckSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">static</span> <span class="token class-name">DoubleCheckSingleton</span> instance<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">DoubleCheckSingleton</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token class-name">DoubleCheckSingleton</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DoubleCheckSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>静态内部类：</strong>同时解决饿汉式的内存浪费问题和懒汉式的线程安全问题。</p><pre class="line-numbers language-none"><code class="language-none">public` `class` `StaticSingleton {``  ``private` `StaticSingleton(){}` `  ``public` `static` `StaticSingleton getInstance() {``    ``return` `StaticClass.instance;``  ``}` `  ``private` `static` `class` `StaticClass {``    ``private` `static` `final` `StaticSingleton instance = ``new` `StaticSingleton();``  ``}``}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>枚举：</strong>《Effective Java》提倡的方式，不仅能避免线程安全问题，还能防止反序列化重新创建新的对象，绝对防止多次实例化，也能防止反射破解单例的问题。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">EnumSingleton</span> <span class="token punctuation">{</span>  INSTANCE<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h4 id="Q8：讲一讲代理模式"><a href="#Q8：讲一讲代理模式" class="headerlink" title="Q8：讲一讲代理模式"></a>Q8：讲一讲代理模式</h4><p>代理模式属于结构型模式，为其他对象提供一种代理以控制对这个对象的访问。优点是可以增强目标对象的功能，降低代码耦合度，扩展性好。缺点是在客户端和目标对象之间增加代理对象会导致请求处理速度变慢，增加系统复杂度。</p><p>Spring 利用动态代理实现 AOP，如果 Bean 实现了接口就使用 JDK 代理，否则使用 CGLib 代理。</p><p><strong>静态代理：</strong>代理对象持有被代理对象的引用，调用代理对象方法时也会调用被代理对象的方法，但是会在被代理对象方法的前后增加其他逻辑。需要手动完成，在程序运行前就已经存在代理类的字节码文件，代理类和被代理类的关系在运行前就已经确定了。 缺点是一个代理类只能为一个目标服务，如果要服务多种类型会增加工作量。</p><p><strong>动态代理：</strong>动态代理在程序运行时通过反射创建具体的代理类，代理类和被代理类的关系在运行前是不确定的。动态代理的适用性更强，主要分为 JDK 动态代理和 CGLib 动态代理。</p><ul><li><strong>JDK 动态代理：</strong>通过 <code>Proxy</code> 类的 <code>newInstance</code> 方法获取一个动态代理对象，需要传入三个参数，被代理对象的类加载器、被代理对象实现的接口，以及一个 <code>InvocationHandler</code> 调用处理器来指明具体的逻辑，相比静态代理的优势是接口中声明的所有方法都被转移到 <code>InvocationHandler</code> 的 <code>invoke</code> 方法集中处理。 </li><li><strong>CGLib 动态代理：</strong>JDK 动态代理要求实现被代理对象的接口，而 CGLib 要求继承被代理对象，如果一个类是 final 类则不能使用 CGLib 代理。两种代理都在运行期生成字节码，JDK 动态代理直接写字节码，而 CGLib 动态代理使用 ASM 框架写字节码，ASM 的目的是生成、转换和分析以字节数组表示的已编译 Java 类。 JDK 动态代理调用代理方法通过反射机制实现，而 GCLib 动态代理通过 FastClass 机制直接调用方法，它为代理类和被代理类各生成一个类，该类为代理类和被代理类的方法分配一个 int 参数，调用方法时可以直接定位，因此调用效率更高。 </li></ul><hr><h4 id="Q9：讲一讲装饰器模式"><a href="#Q9：讲一讲装饰器模式" class="headerlink" title="Q9：讲一讲装饰器模式"></a>Q9：讲一讲装饰器模式</h4><p>装饰器模式属于结构型模式，在不改变原有对象的基础上将功能附加到对象，相比继承可以更加灵活地扩展原有对象的功能。</p><p>装饰器模式适合的场景：在不想增加很多子类的前提下扩展一个类的功能。</p><p>java.io 包中，InputStream 字节输入流通过装饰器 BufferedInputStream 增强为缓冲字节输入流。</p><hr><h4 id="Q10：装饰器模式和动态代理的区别？"><a href="#Q10：装饰器模式和动态代理的区别？" class="headerlink" title="Q10：装饰器模式和动态代理的区别？"></a>Q10：装饰器模式和动态代理的区别？</h4><p>装饰器模式的关注点在于给对象动态添加方法，而动态代理更注重对象的访问控制。动态代理通常会在代理类中创建被代理对象的实例，而装饰器模式会将装饰者作为构造方法的参数。</p><hr><h4 id="Q11：讲一讲适配器模式"><a href="#Q11：讲一讲适配器模式" class="headerlink" title="Q11：讲一讲适配器模式"></a>Q11：讲一讲适配器模式</h4><p>适配器模式属于结构型模式，它作为两个不兼容接口之间的桥梁，结合了两个独立接口的功能，将一个类的接口转换成另外一个接口使得原本由于接口不兼容而不能一起工作的类可以一起工作。 </p><p>缺点是过多使用适配器会让系统非常混乱，不易整体把握。</p><p>java.io 包中，InputStream 字节输入流通过适配器 InputStreamReader 转换为 Reader 字符输入流。</p><p>Spring MVC 中的 HandlerAdapter，由于 handler 有很多种形式，包括 Controller、HttpRequestHandler、Servlet 等，但调用方式又是确定的，因此需要适配器来进行处理，根据适配规则调用 handle 方法。</p><p>Arrays.asList 方法，将数组转换为对应的集合（注意不能使用修改集合的方法，因为返回的 ArrayList 是 Arrays 的一个内部类）。</p><hr><h4 id="Q12：适配器模式和和装饰器模式以及代理模式的区别？"><a href="#Q12：适配器模式和和装饰器模式以及代理模式的区别？" class="headerlink" title="Q12：适配器模式和和装饰器模式以及代理模式的区别？"></a>Q12：适配器模式和和装饰器模式以及代理模式的区别？</h4><p>适配器模式没有层级关系，适配器和被适配者没有必然连续，满足 has-a 的关系，解决不兼容的问题，是一种后置考虑。</p><p>装饰器模式具有层级关系，装饰器与被装饰者实现同一个接口，满足 is-a 的关系，注重覆盖和扩展，是一种前置考虑。</p><p>适配器模式主要改变所考虑对象的接口，而代理模式不能改变所代理类的接口。</p><hr><h4 id="Q13：讲一讲策略模式"><a href="#Q13：讲一讲策略模式" class="headerlink" title="Q13：讲一讲策略模式"></a>Q13：讲一讲策略模式</h4><p>策略模式属于行为型模式，定义了一系列算法并封装起来，之间可以互相替换。策略模式主要解决在有多种算法相似的情况下，使用 if/else 所带来的难以维护。</p><p>优点是算法可以自由切换，可以避免使用多重条件判断并且扩展性良好，缺点是策略类会增多并且所有策略类都需要对外暴露。</p><p>在集合框架中，经常需要通过构造方法传入一个比较器 Comparator 进行比较排序。Comparator 就是一个抽象策略，一个类通过实现该接口并重写 compare 方法成为具体策略类。</p><p>创建线程池时，需要传入拒绝策略，当创建新线程使当前运行的线程数超过 maximumPoolSize 时会使用相应的拒绝策略处理。</p><hr><h4 id="Q14：讲一讲模板模式"><a href="#Q14：讲一讲模板模式" class="headerlink" title="Q14：讲一讲模板模式"></a>Q14：讲一讲模板模式</h4><p>模板模式属于行为型模式，使子类可以在不改变算法结构的情况下重新定义算法的某些步骤，适用于抽取子类重复代码到公共父类。</p><p>优点是可以封装固定不变的部分，扩展可变的部分。缺点是每一个不同实现都需要一个子类维护，会增加类的数量。</p><p>为防止恶意操作，一般模板方法都以 final 修饰。</p><p>HttpServlet 定义了一套处理 HTTP 请求的模板，service 方法为模板方法，定义了处理HTTP请求的基本流程，doXXX 等方法为基本方法，根据请求方法的类型做相应的处理，子类可重写这些方法。</p><hr><h4 id="Q15：讲一讲观察者模式"><a href="#Q15：讲一讲观察者模式" class="headerlink" title="Q15：讲一讲观察者模式"></a>Q15：讲一讲观察者模式</h4><p>观察者模式属于行为型模式，也叫发布订阅模式，定义对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都得到通知并被自动更新。主要解决一个对象状态改变给其他对象通知的问题，缺点是如果被观察者对象有很多的直接和间接观察者的话通知很耗时， 如果存在循环依赖的话可能导致系统崩溃，另外观察者无法知道目标对象具体是怎么发生变化的。</p><p>ServletContextListener 能够监听 ServletContext 对象的生命周期，实际上就是监听 Web 应用。当 Servlet 容器启动 Web 应用时调用 <code>contextInitialized</code> 方法，终止时调用 <code>contextDestroyed</code> 方法。</p><hr><h2 id="MySQL-33"><a href="#MySQL-33" class="headerlink" title="MySQL 33"></a>MySQL 33</h2><h3 id="逻辑架构-13"><a href="#逻辑架构-13" class="headerlink" title="逻辑架构 13"></a>逻辑架构 13</h3><h4 id="Q1：MySQL-的逻辑架构了解吗？"><a href="#Q1：MySQL-的逻辑架构了解吗？" class="headerlink" title="Q1：MySQL 的逻辑架构了解吗？"></a>Q1：MySQL 的逻辑架构了解吗？</h4><p>第一层是服务器层，主要提供连接处理、授权认证、安全等功能。</p><p>第二层实现了 MySQL 核心服务功能，包括查询解析、分析、优化、缓存以及日期和时间等所有内置函数，所有跨存储引擎的功能都在这一层实现，例如存储过程、触发器、视图等。</p><p>第三层是存储引擎层，存储引擎负责 MySQL 中数据的存储和提取。服务器通过 API 与存储引擎通信，这些接口屏蔽了不同存储引擎的差异，使得差异对上层查询过程透明。除了会解析外键定义的 InnoDB 外，存储引擎不会解析 SQL，不同存储引擎之间也不会相互通信，只是简单响应上层服务器请求。</p><hr><h4 id="Q2：谈一谈-MySQL-的读写锁"><a href="#Q2：谈一谈-MySQL-的读写锁" class="headerlink" title="Q2：谈一谈 MySQL 的读写锁"></a>Q2：谈一谈 MySQL 的读写锁</h4><p>在处理并发读或写时，可以通过实现一个由两种类型组成的锁系统来解决问题。这两种类型的锁通常被称为共享锁和排它锁，也叫读锁和写锁。读锁是共享的，相互不阻塞，多个客户在同一时刻可以同时读取同一个资源而不相互干扰。写锁则是排他的，也就是说一个写锁会阻塞其他的写锁和读锁，确保在给定时间内只有一个用户能执行写入并防止其他用户读取正在写入的同一资源。</p><p>在实际的数据库系统中，每时每刻都在发生锁定，当某个用户在修改某一部分数据时，MySQL 会通过锁定防止其他用户读取同一数据。写锁比读锁有更高的优先级，一个写锁请求可能会被插入到读锁队列的前面，但是读锁不能插入到写锁前面。</p><hr><h4 id="Q3：MySQL-的锁策略有什么？"><a href="#Q3：MySQL-的锁策略有什么？" class="headerlink" title="Q3：MySQL 的锁策略有什么？"></a>Q3：MySQL 的锁策略有什么？</h4><p><strong>表锁</strong>是MySQL中最基本的锁策略，并且是开销最小的策略。表锁会锁定整张表，一个用户在对表进行写操作前需要先获得写锁，这会阻塞其他用户对该表的所有读写操作。只有没有写锁时，其他读取的用户才能获取读锁，读锁之间不相互阻塞。</p><p><strong>行锁</strong>可以最大程度地支持并发，同时也带来了最大开销。InnoDB 和 XtraDB 以及一些其他存储引擎实现了行锁。行锁只在存储引擎层实现，而服务器层没有实现。</p><hr><h4 id="Q4：数据库死锁如何解决？"><a href="#Q4：数据库死锁如何解决？" class="headerlink" title="Q4：数据库死锁如何解决？"></a>Q4：数据库死锁如何解决？</h4><p>死锁是指多个事务在同一资源上相互占用并请求锁定对方占用的资源而导致恶性循环的现象。当多个事务试图以不同顺序锁定资源时就可能会产生死锁，多个事务同时锁定同一个资源时也会产生死锁。</p><p>为了解决死锁问题，数据库系统实现了各种死锁检测和死锁超时机制。越复杂的系统，例如InnoDB 存储引擎，越能检测到死锁的循环依赖，并立即返回一个错误。这种解决方式很有效，否则死锁会导致出现非常慢的查询。还有一种解决方法，就是当查询的时间达到锁等待超时的设定后放弃锁请求，这种方式通常来说不太好。InnoDB 目前处理死锁的方法是将持有最少行级排它锁的事务进行回滚。</p><p>死锁发生之后，只有部分或者完全回滚其中一个事务，才能打破死锁。对于事务型系统这是无法避免的，所以应用程序在设计时必须考虑如何处理死锁。大多数情况下只需要重新执行因死锁回滚的事务即可。</p><hr><h4 id="Q5：事务是什么"><a href="#Q5：事务是什么" class="headerlink" title="Q5：事务是什么?"></a>Q5：事务是什么?</h4><p>事务是一组原子性的 SQL 查询，或者说一个独立的工作单元。如果数据库引擎能够成功地对数据库应用该组查询的全部语句，那么就执行该组查询。如果其中有任何一条语句因为崩溃或其他原因无法执行，那么所有的语句都不会执行。也就是说事务内的语句要么全部执行成功，要么全部执行失败。</p><hr><h4 id="Q6：事务有什么特性？"><a href="#Q6：事务有什么特性？" class="headerlink" title="Q6：事务有什么特性？"></a>Q6：事务有什么特性？</h4><p><strong>原子性 atomicity</strong></p><p>一个事务在逻辑上是必须不可分割的最小工作单元，整个事务中的所有操作要么全部提交成功，要么全部失败回滚，对于一个事务来说不可能只执行其中的一部分。</p><p><strong>一致性 consistency</strong></p><p>数据库总是从一个一致性的状态转换到另一个一致性的状态。</p><p><strong>隔离性 isolation</strong></p><p>针对并发事务而言，隔离性就是要隔离并发运行的多个事务之间的相互影响，一般来说一个事务所做的修改在最终提交以前，对其他事务是不可见的。</p><p><strong>持久性 durability</strong></p><p>一旦事务提交成功，其修改就会永久保存到数据库中，此时即使系统崩溃，修改的数据也不会丢失。</p><hr><h4 id="Q7：MySQL-的隔离级别有哪些？"><a href="#Q7：MySQL-的隔离级别有哪些？" class="headerlink" title="Q7：MySQL 的隔离级别有哪些？"></a>Q7：MySQL 的隔离级别有哪些？</h4><p><strong>未提交读 READ UNCOMMITTED</strong></p><p>在该级别事务中的修改即使没有被提交，对其他事务也是可见的。事务可以读取其他事务修改完但未提交的数据，这种问题称为脏读。这个级别还会导致不可重复读和幻读，性能没有比其他级别好很多，很少使用。</p><p><strong>提交读 READ COMMITTED</strong></p><p>多数数据库系统默认的隔离级别。提交读满足了隔离性的简单定义：一个事务开始时只能”看见”已经提交的事务所做的修改。换句话说，一个事务从开始直到提交之前的任何修改对其他事务都是不可见的。也叫不可重复读，因为两次执行同样的查询可能会得到不同结果。</p><p><strong>可重复读 REPEATABLE READ</strong>（MySQL默认的隔离级别）</p><p>可重复读解决了不可重复读的问题，保证了在同一个事务中多次读取同样的记录结果一致。但还是无法解决幻读，所谓幻读指的是当某个事务在读取某个范围内的记录时，会产生幻行。InnoDB 存储引擎通过多版本并发控制MVCC 解决幻读的问题。</p><p><strong>可串行化 SERIALIZABLE</strong></p><p>最高的隔离级别，通过强制事务串行执行，避免幻读。可串行化会在读取的每一行数据上都加锁，可能导致大量的超时和锁争用的问题。实际应用中很少用到这个隔离级别，只有非常需要确保数据一致性且可以接受没有并发的情况下才考虑该级别。</p><hr><h4 id="Q8：MVCC-是什么？"><a href="#Q8：MVCC-是什么？" class="headerlink" title="Q8：MVCC 是什么？"></a>Q8：MVCC 是什么？</h4><p>MVCC 是多版本并发控制，在很多情况下避免加锁，大都实现了非阻塞的读操作，写操作也只锁定必要的行。</p><p>InnoDB 的MVCC 通过在每行记录后面保存两个隐藏的列来实现，这两个列一个保存了行的创建时间，一个保存行的过期时间间。不过存储的不是实际的时间值而是系统版本号，每开始一个新的事务系统版本号都会自动递增，事务开始时刻的系统版本号会作为事务的版本号，用来和查询到的每行记录的版本号进行比较。</p><p>MVCC 只能在 <code>READ COMMITTED</code> 和 <code>REPEATABLE READ</code> 两个隔离级别下工作，因为 <code>READ UNCOMMITTED</code> 总是读取最新的数据行，而不是符合当前事务版本的数据行，而 <code>SERIALIZABLE</code> 则会对所有读取的行都加锁。</p><hr><h4 id="Q9：谈一谈-InnoDB"><a href="#Q9：谈一谈-InnoDB" class="headerlink" title="Q9：谈一谈 InnoDB"></a>Q9：谈一谈 InnoDB</h4><p>InnoDB 是 MySQL 的默认事务型引擎，用来处理大量短期事务。InnoDB 的性能和自动崩溃恢复特性使得它在非事务型存储需求中也很流行，除非有特别原因否则应该优先考虑 InnoDB。</p><p>InnoDB 的数据存储在表空间中，表空间由一系列数据文件组成。MySQL4.1 后 InnoDB 可以将每个表的数据和索引放在单独的文件中。</p><p>InnoDB 采用 MVCC 来支持高并发，并且实现了四个标准的隔离级别。其默认级别是 <code>REPEATABLE READ</code>，并通过间隙锁策略防止幻读，间隙锁使 InnoDB 不仅仅锁定查询涉及的行，还会对索引中的间隙进行锁定防止幻行的插入。</p><p>InnoDB 表是基于聚簇索引建立的，InnoDB 的索引结构和其他存储引擎有很大不同，聚簇索引对主键查询有很高的性能，不过它的二级索引中必须包含主键列，所以如果主键很大的话其他所有索引都会很大，因此如果表上索引较多的话主键应当尽可能小。</p><p>InnoDB 的存储格式是平***立的，可以将数据和索引文件从一个平台复制到另一个平台。</p><p>InnoDB 内部做了很多优化，包括从磁盘读取数据时采用的可预测性预读，能够自动在内存中创建加速读操作的自适应哈希索引，以及能够加速插入操作的插入缓冲区等。</p><hr><h4 id="Q10：谈一谈-MyISAM"><a href="#Q10：谈一谈-MyISAM" class="headerlink" title="Q10：谈一谈 MyISAM"></a>Q10：谈一谈 MyISAM</h4><p>MySQL5.1及之前，MyISAM 是默认存储引擎，MyISAM 提供了大量的特性，包括全文索引、压缩、空间函数等，但不支持事务和行锁，最大的缺陷就是崩溃后无法安全恢复。对于只读的数据或者表比较小、可以忍受修复操作的情况仍然可以使用 MyISAM。</p><p>MyISAM 将表存储在数据文件和索引文件中，分别以 <code>.MYD</code> 和 <code>.MYI</code> 作为扩展名。MyISAM 表可以包含动态或者静态行，MySQL 会根据表的定义决定行格式。MyISAM 表可以存储的行记录数一般受限于可用磁盘空间或者操作系统中单个文件的最大尺寸。</p><p>MyISAM 对整张表进行加锁，读取时会对需要读到的所有表加共享锁，写入时则对表加排它锁。但是在表有读取查询的同时，也支持并发往表中插入新的记录。</p><p>对于MyISAM 表，MySQL 可以手动或自动执行检查和修复操作，这里的修复和事务恢复以及崩溃恢复的概念不同。执行表的修复可能导致一些数据丢失，而且修复操作很慢。</p><p>对于 MyISAM 表，即使是 BLOB 和 TEXT 等长字段，也可以基于其前 500 个字符创建索引。MyISAM 也支持全文索引，这是一种基于分词创建的索引，可以支持复杂的查询。</p><p>MyISAM 设计简单，数据以紧密格式存储，所以在某些场景下性能很好。MyISAM 最典型的性能问题还是表锁问题，如果所有的查询长期处于 Locked 状态，那么原因毫无疑问就是表锁。</p><hr><h4 id="Q12：谈一谈-Memory"><a href="#Q12：谈一谈-Memory" class="headerlink" title="Q12：谈一谈 Memory"></a>Q12：谈一谈 Memory</h4><p>如果需要快速访问数据且这些数据不会被修改，重启以后丢失也没有关系，那么使用 Memory 表是非常有用的。Memory 表至少要比 MyISAM 表快一个数量级，因为所有数据都保存在内存，不需要磁盘 IO，Memory 表的结构在重启后会保留，但数据会丢失。</p><p>Memory 表适合的场景：查找或者映射表、缓存周期性聚合数据的结果、保存数据分析中产生的中间数据。</p><p>Memory 表支持哈希索引，因此查找速度极快。虽然速度很快但还是无法取代传统的基于磁盘的表，Memory 表使用表级锁，因此并发写入的性能较低。它不支持 BLOB 和 TEXT 类型的列，并且每行的长度是固定的，所以即使指定了 VARCHAR 列，实际存储时也会转换成CHAR，这可能导致部分内存的浪费。</p><p>如果 MySQL 在执行查询的过程中需要使用临时表来保持中间结果，内部使用的临时表就是 Memory 表。如果中间结果太大超出了Memory 表的限制，或者含有 BLOB 或 TEXT 字段，临时表会转换成 MyISAM 表。</p><hr><h4 id="Q13：查询执行流程是什么？"><a href="#Q13：查询执行流程是什么？" class="headerlink" title="Q13：查询执行流程是什么？"></a>Q13：查询执行流程是什么？</h4><p>简单来说分为五步：① 客户端发送一条查询给服务器。② 服务器先检查查询缓存，如果命中了缓存则立刻返回存储在缓存中的结果，否则进入下一阶段。③ 服务器端进行 SQL 解析、预处理，再由优化器生成对应的执行计划。④ MySQL 根据优化器生成的执行计划，调用存储引擎的 API 来执行查询。⑤ 将结果返回给客户端。 </p><hr><h3 id="数据类型-3"><a href="#数据类型-3" class="headerlink" title="数据类型 3"></a>数据类型 3</h3><h4 id="Q1：VARCHAR-和-CHAR-的区别？"><a href="#Q1：VARCHAR-和-CHAR-的区别？" class="headerlink" title="Q1：VARCHAR 和 CHAR 的区别？"></a>Q1：VARCHAR 和 CHAR 的区别？</h4><p><strong>VARCHAR</strong> 用于存储可变字符串，是最常见的字符串数据类型。它比 CHAR 更节省空间，因为它仅使用必要的空间。VARCHAR 需要 1 或 2 个额外字节记录字符串长度，如果列的最大长度不大于 255 字节则只需要 1 字节。VARCHAR 不会删除末尾空格。</p><p>VARCHAR 适用场景：字符串列的最大长度比平均长度大很多、列的更新很少、使用了 UTF8 这种复杂字符集，每个字符都使用不同的字节数存储。</p><p><strong>CHAR</strong> 是定长的，根据定义的字符串长度分配足够的空间。CHAR 会删除末尾空格。</p><p>CHAR 适合存储很短的字符串，或所有值都接近同一个长度，例如存储密码的 MD5 值。对于经常变更的数据，CHAR 也比 VARCHAR更好，因为定长的 CHAR 不容易产生碎片。对于非常短的列，CHAR 在存储空间上也更有效率，例如用 CHAR 来存储只有 Y 和 N 的值只需要一个字节，但是 VARCHAR 需要两个字节，因为还有一个记录长度的额外字节。</p><hr><h4 id="Q2：DATETIME-和-TIMESTAMP-的区别？"><a href="#Q2：DATETIME-和-TIMESTAMP-的区别？" class="headerlink" title="Q2：DATETIME 和 TIMESTAMP 的区别？"></a>Q2：DATETIME 和 TIMESTAMP 的区别？</h4><p><strong>DATETIME</strong> 能保存大范围的值，从 1001~9999 年，精度为秒。把日期和时间封装到了一个整数中，与时区无关，使用 8 字节存储空间。</p><p><strong>TIMESTAMP</strong> 和 UNIX 时间戳相同，只使用 4 字节的存储空间，范围比 DATETIME 小得多，只能表示 1970 ~2038 年，并且依赖于时区。</p><hr><h4 id="Q3：数据类型有哪些优化策略？"><a href="#Q3：数据类型有哪些优化策略？" class="headerlink" title="Q3：数据类型有哪些优化策略？"></a>Q3：数据类型有哪些优化策略？</h4><p><strong>更小的通常更好</strong></p><p>一般情况下尽量使用可以正确存储数据的最小数据类型，更小的数据类型通常也更快，因为它们占用更少的磁盘、内存和 CPU 缓存。</p><p><strong>尽可能简单</strong></p><p>简单数据类型的操作通常需要更少的 CPU 周期，例如整数比字符操作代价更低，因为字符集和校对规则使字符相比整形更复杂。应该使用 MySQL 的内建类型 date、time 和 datetime 而不是字符串来存储日期和时间，另一点是应该使用整形存储 IP 地址。</p><p><strong>尽量避免 NULL</strong></p><p>通常情况下最好指定列为 NOT NULL，除非需要存储 NULL值。因为如果查询中包含可为 NULL 的列对 MySQL 来说更难优化，可为 NULL 的列使索引、索引统计和值比较都更复杂，并且会使用更多存储空间。当可为 NULL 的列被索引时，每个索引记录需要一个额外字节，在MyISAM 中还可能导致固定大小的索引变成可变大小的索引。</p><p>如果计划在列上建索引，就应该尽量避免设计成可为 NULL 的列。</p><hr><h3 id="索引-10"><a href="#索引-10" class="headerlink" title="索引 10"></a>索引 10</h3><h4 id="Q1：索引有什么作用？"><a href="#Q1：索引有什么作用？" class="headerlink" title="Q1：索引有什么作用？"></a>Q1：索引有什么作用？</h4><p>索引也叫键，是存储引擎用于快速找到记录的一种数据结构。索引对于良好的性能很关键，尤其是当表中数据量越来越大时，索引对性能的影响愈发重要。在数据量较小且负载较低时，不恰当的索引对性能的影响可能还不明显，但数据量逐渐增大时，性能会急剧下降。</p><p>索引大大减少了服务器需要扫描的数据量、可以帮助服务器避免排序和临时表、可以将随机 IO 变成顺序 IO。但索引并不总是最好的工具，对于非常小的表，大部分情况下会采用全表扫描。对于中到大型的表，索引就非常有效。但对于特大型的表，建立和使用索引的代价也随之增长，这种情况下应该使用分区技术。</p><p>在MySQL中，首先在索引中找到对应的值，然后根据匹配的索引记录找到对应的数据行。索引可以包括一个或多个列的值，如果索引包含多个列，那么列的顺序也十分重要，因为 MySQL 只能使用索引的最左前缀。</p><hr><h4 id="Q2：谈一谈-MySQL-的-B-Tree-索引"><a href="#Q2：谈一谈-MySQL-的-B-Tree-索引" class="headerlink" title="Q2：谈一谈 MySQL 的 B-Tree 索引"></a>Q2：谈一谈 MySQL 的 B-Tree 索引</h4><p>大多数 MySQL 引擎都支持这种索引，但底层的存储引擎可能使用不同的存储结构，例如 NDB 使用 T-Tree，而 InnoDB 使用 B+ Tree。</p><p>B-Tree 通常意味着所有的值都是按顺序存储的，并且每个叶子页到根的距离相同。B-Tree 索引能够加快访问数据的速度，因为存储引擎不再需要进行全表扫描来获取需要的数据，取而代之的是从索引的根节点开始进行搜索。根节点的槽中存放了指向子节点的指针，存储引擎根据这些指针向下层查找。通过比较节点页的值和要查找的值可以找到合适的指针进入下层子节点，这些指针实际上定义了子节点页中值的上限和下限。最终存储引擎要么找到对应的值，要么该记录不存在。叶子节点的指针指向的是被索引的数据，而不是其他的节点页。</p><p>B-Tree索引的限制：</p><ul><li>如果不是按照索引的最左列开始查找，则无法使用索引。 </li><li>不能跳过索引中的列，例如索引为 (id,name,sex)，不能只使用 id 和 sex 而跳过 name。 </li><li>如果查询中有某个列的范围查询，则其右边的所有列都无法使用索引。 </li></ul><hr><h4 id="Q3：了解-Hash-索引吗？"><a href="#Q3：了解-Hash-索引吗？" class="headerlink" title="Q3：了解 Hash 索引吗？"></a>Q3：了解 Hash 索引吗？</h4><p>哈希索引基于哈希表实现，只有精确匹配索引所有列的查询才有效。对于每一行数据，存储引擎都会对所有的索引列计算一个哈希码，哈希码是一个较小的值，并且不同键值的行计算出的哈希码也不一样。哈希索引将所有的哈希码存储在索引中，同时在哈希表中保存指向每个数据行的指针。</p><p>只有 Memory 引擎显式支持哈希索引，这也是 Memory 引擎的默认索引类型。</p><p>因为索引自身只需存储对应的哈希值，所以索引的结构十分紧凑，这让哈希索引的速度非常快，但它也有一些限制：</p><ul><li>哈希索引数据不是按照索引值顺序存储的，无法用于排序。 </li><li>哈希索引不支持部分索引列匹配查找，因为哈希索引始终是使用索引列的全部内容来计算哈希值的。例如在数据列(a,b)上建立哈希索引，如果查询的列只有a就无法使用该索引。 </li><li>哈希索引只支持等值比较查询，不支持任何范围查询。 </li></ul><hr><h4 id="Q4：什么是自适应哈希索引？"><a href="#Q4：什么是自适应哈希索引？" class="headerlink" title="Q4：什么是自适应哈希索引？"></a>Q4：什么是自适应哈希索引？</h4><p>自适应哈希索引是 InnoDB 引擎的一个特殊功能，当它注意到某些索引值被使用的非常频繁时，会在内存中基于 B-Tree 索引之上再创键一个哈希索引，这样就让 B-Tree 索引也具有哈希索引的一些优点，比如快速哈希查找。这是一个完全自动的内部行为，用户无法控制或配置，但如果有必要可以关闭该功能。</p><hr><h4 id="Q5-：什么是空间索引？"><a href="#Q5-：什么是空间索引？" class="headerlink" title="Q5 ：什么是空间索引？"></a>Q5 ：什么是空间索引？</h4><p>MyISAM 表支持空间索引，可以用作地理数据存储。和 B-Tree 索引不同，这类索引无需前缀查询。空间索引会从所有维度来索引数据，查询时可以有效地使用任意维度来组合查询。必须使用 MySQL 的 GIS 即地理信息系统的相关函数来维护数据，但 MySQL 对 GIS 的支持并不完善，因此大部分人都不会使用这个特性。</p><hr><h4 id="Q6：什么是全文索引？"><a href="#Q6：什么是全文索引？" class="headerlink" title="Q6：什么是全文索引？"></a>Q6：什么是全文索引？</h4><p>通过数值比较、范围过滤等就可以完成绝大多数需要的查询，但如果希望通过关键字匹配进行查询，就需要基于相似度的查询，而不是精确的数值比较，全文索引就是为这种场景设计的。</p><p>MyISAM 的全文索引是一种特殊的 B-Tree 索引，一共有两层。第一层是所有关键字，然后对于每一个关键字的第二层，包含的是一组相关的”文档指针”。全文索引不会索引文档对象中的所有词语，它会根据规则过滤掉一些词语，例如停用词列表中的词都不会被索引。</p><hr><h4 id="Q7：什么是聚簇索引？"><a href="#Q7：什么是聚簇索引？" class="headerlink" title="Q7：什么是聚簇索引？"></a>Q7：什么是聚簇索引？</h4><p>聚簇索引不是一种索引类型，而是一种数据存储方式。InnoDB 的聚簇索引实际上在同一个结构中保存了 B-Tree 索引和数据行。当表有聚餐索引时，它的行数据实际上存放在索引的叶子页中，因为无法同时把数据行存放在两个不同的地方，所以一个表只能有一个聚簇索引。</p><p>优点：① 可以把相关数据保存在一起。② 数据访问更快，聚簇索引将索引和数据保存在同一个 B-Tree 中，因此获取数据比非聚簇索引要更快。③ 使用覆盖索引扫描的查询可以直接使用页节点中的主键值。</p><p>缺点：① 聚簇索引最大限度提高了 IO 密集型应用的性能，如果数据全部在内存中将会失去优势。② 更新聚簇索引列的代价很高，因为会强制每个被更新的行移动到新位置。③ 基于聚簇索引的表插入新行或主键被更新导致行移动时，可能导致页分裂，表会占用更多磁盘空间。④ 当行稀疏或由于页分裂导致数据存储不连续时，全表扫描可能很慢。</p><hr><h4 id="Q8：什么是覆盖索引？"><a href="#Q8：什么是覆盖索引？" class="headerlink" title="Q8：什么是覆盖索引？"></a>Q8：什么是覆盖索引？</h4><p>覆盖索引指一个索引包含或覆盖了所有需要查询的字段的值，不再需要根据索引回表查询数据。覆盖索引必须要存储索引列的值，因此 MySQL 只能使用 B-Tree 索引做覆盖索引。</p><p>优点：① 索引条目通常远小于数据行大小，可以极大减少数据访问量。② 因为索引按照列值顺序存储，所以对于 IO 密集型范围查询回避随机从磁盘读取每一行数据的 IO 少得多。③ 由于 InnoDB 使用聚簇索引，覆盖索引对 InnoDB 很有帮助。InnoDB 的二级索引在叶子节点保存了行的主键值，如果二级主键能覆盖查询那么可以避免对主键索引的二次查询。</p><hr><h4 id="Q9：你知道哪些索引使用原则？"><a href="#Q9：你知道哪些索引使用原则？" class="headerlink" title="Q9：你知道哪些索引使用原则？"></a>Q9：你知道哪些索引使用原则？</h4><p><strong>建立索引</strong></p><p>对查询频次较高且数据量比较大的表建立索引。索引字段的选择，最佳候选列应当从 WHERE 子句的条件中提取，如果 WHERE 子句中的组合比较多，应当挑选最常用、过滤效果最好的列的组合。业务上具有唯一特性的字段，即使是多个字段的组合，也必须建成唯一索引。</p><p><strong>使用前缀索引</strong></p><p>索引列开始的部分字符，索引创建后也是使用硬盘来存储的，因此短索引可以提升索引访问的 IO 效率。对于 BLOB、TEXT 或很长的 VARCHAR 列必须使用前缀索引，MySQL 不允许索引这些列的完整长度。前缀索引是一种能使索引更小更快的有效方法，但缺点是 MySQL 无法使用前缀索引做 ORDER BY 和 GROUP BY，也无法使用前缀索引做覆盖扫描。</p><p><strong>选择合适的索引顺序</strong></p><p>当不需要考虑排序和分组时，将选择性最高的列放在前面。索引的选择性是指不重复的索引值和数据表的记录总数之比，索引的选择性越高则查询效率越高，唯一索引的选择性是 1，因此也可以使用唯一索引提升查询效率。</p><p><strong>删除无用索引</strong></p><p>MySQL 允许在相同列上创建多个索引，重复的索引需要单独维护，并且优化器在优化查询时也需要逐个考虑，这会影响性能。重复索引是指在相同的列上按照相同的顺序创建的相同类型的索引，应该避免创建重复索引。如果创建了索引 (A,B) 再创建索引 (A) 就是冗余索引，因为这只是前一个索引的前缀索引，对于 B-Tree 索引来说是冗余的。解决重复索引和冗余索引的方法就是删除这些索引。除了重复索引和冗余索引，可能还会有一些服务器永远不用的索引，也应该考虑删除。</p><hr><h4 id="Q10：索引失效的情况有哪些？"><a href="#Q10：索引失效的情况有哪些？" class="headerlink" title="Q10：索引失效的情况有哪些？"></a>Q10：索引失效的情况有哪些？</h4><p>如果索引列出现了隐式类型转换，则 MySQL 不会使用索引。常见的情况是在 SQL 的 WHERE 条件中字段类型为字符串，其值为数值，如果没有加引号那么 MySQL 不会使用索引。</p><p>如果 WHERE 条件中含有 OR，除非 OR 前使用了索引列而 OR 之后是非索引列，索引会失效。</p><p>MySQL 不能在索引中执行 LIKE 操作，这是底层存储引擎 API 的限制，最左匹配的 LIKE 比较会被转换为简单的比较操作，但如果是以通配符开头的 LIKE 查询，存储引擎就无法做比较。这种情况下 MySQL 只能提取数据行的值而不是索引值来做比较。</p><p>如果查询中的列不是独立的，则 MySQL 不会使用索引。独立的列是指索引列不能是表达式的一部分，也不能是函数的参数。</p><p>对于多个范围条件查询，MySQL 无法使用第一个范围列后面的其他索引列，对于多个等值查询则没有这种限制。</p><p>如果 MySQL 判断全表扫描比使用索引查询更快，则不会使用索引。</p><p>索引文件具有 B-Tree 的最左前缀匹配特性，如果左边的值未确定，那么无法使用此索引。</p><hr><h3 id="优化-5"><a href="#优化-5" class="headerlink" title="优化 5"></a>优化 5</h3><h4 id="Q1：如何定位低效-SQL？"><a href="#Q1：如何定位低效-SQL？" class="headerlink" title="Q1：如何定位低效 SQL？"></a>Q1：如何定位低效 SQL？</h4><p>可以通过两种方式来定位执行效率较低的 SQL 语句。一种是通过慢查询日志定位，可以通过慢查询日志定位那些已经执行完毕的 SQL 语句。另一种是使用 SHOW PROCESSLIST 查询，慢查询日志在查询结束以后才记录，所以在应用反应执行效率出现问题的时候查询慢查询日志不能定位问题，此时可以使用 SHOW PROCESSLIST 命令查看当前 MySQL 正在进行的线程，包括线程的状态、是否锁表等，可以实时查看 SQL 的执行情况，同时对一些锁表操作进行优化。找到执行效率低的 SQL 语句后，就可以通过 SHOW PROFILE、EXPLAIN 或 trace 等丰富来继续优化语句。</p><hr><h4 id="Q2：SHOW-PROFILE-的作用？"><a href="#Q2：SHOW-PROFILE-的作用？" class="headerlink" title="Q2：SHOW PROFILE 的作用？"></a>Q2：SHOW PROFILE 的作用？</h4><p>通过 SHOW PROFILE 可以分析 SQL 语句性能消耗，例如查询到 SQL 会执行多少时间，并显示 CPU、内存使用量，执行过程中系统锁及表锁的花费时间等信息。例如 <code>SHOW PROFILE CPU/MEMORY/BLOCK IO FOR QUERY N</code> 分别查询 id 为 N 的 SQL 语句的 CPU、内存以及 IO 的消耗情况。</p><hr><h4 id="Q3：trace-是干什么的？"><a href="#Q3：trace-是干什么的？" class="headerlink" title="Q3：trace 是干什么的？"></a>Q3：trace 是干什么的？</h4><p>从 MySQL5.6 开始，可以通过 trace 文件进一步获取优化器是是如何选择执行计划的，在使用时需要先打开设置，然后执行一次 SQL，最后查看 information_schema.optimizer_trace 表而都内容，该表为联合i表，只能在当前会话进行查询，每次查询后返回的都是最近一次执行的 SQL 语句。</p><hr><h4 id="Q4：EXPLAIN-的字段有哪些，具有什么含义？"><a href="#Q4：EXPLAIN-的字段有哪些，具有什么含义？" class="headerlink" title="Q4：EXPLAIN 的字段有哪些，具有什么含义？"></a>Q4：EXPLAIN 的字段有哪些，具有什么含义？</h4><p>执行计划是 SQL 调优的一个重要依据，可以通过 EXPLAIN 命令查看 SQL 语句的执行计划，如果作用在表上，那么该命令相当于 DESC。EXPLAIN 的指标及含义如下：</p><table><thead><tr><th>指标名</th><th>含义</th></tr></thead><tbody><tr><td>id</td><td>表示 SELECT 子句或操作表的顺序，执行顺序从大到小执行，当 id 一样时，执行顺序从上往下。</td></tr><tr><td>select_type</td><td>表示查询中每个 SELECT 子句的类型，例如 SIMPLE 表示不包含子查询、表连接或其他复杂语法的简单查询，PRIMARY 表示复杂查询的最外层查询，SUBQUERY 表示在 SELECT 或 WHERE 列表中包含了子查询。</td></tr><tr><td>type</td><td>表示访问类型，性能由差到好为：ALL 全表扫描、index 索引全扫描、range 索引范围扫描、ref 返回匹配某个单独值得所有行，常见于使用非唯一索引或唯一索引的非唯一前缀进行的查找，也经常出现在 join 操作中、eq_ref 唯一性索引扫描，对于每个索引键只有一条记录与之匹配、const 当 MySQL 对查询某部分进行优化，并转为一个常量时，使用这些访问类型，例如将主键或唯一索引置于 WHERE 列表就能将该查询转为一个 const、system 表中只有一行数据或空表，只能用于 MyISAM 和 Memory 表、NULL 执行时不用访问表或索引就能得到结果。SQL 性能优化的目标：至少要达到 range 级别，要求是 ref 级别，如果可以是consts 最好。</td></tr><tr><td>possible_keys</td><td>表示查询时可能用到的索引，但不一定使用。列出大量可能索引时意味着备选索引数量太多了。</td></tr><tr><td>key</td><td>显示 MySQL 在查询时实际使用的索引，如果没有使用则显示为 NULL。</td></tr><tr><td>key_len</td><td>表示使用到索引字段的长度，可通过该列计算查询中使用的索引的长度，对于确认索引有效性以及多列索引中用到的列数目很重要。</td></tr><tr><td>ref</td><td>表示上述表的连接匹配条件，即哪些列或常量被用于查找索引列上的值。</td></tr><tr><td>rows</td><td>表示 MySQL 根据表统计信息及索引选用情况，估算找到所需记录所需要读取的行数。</td></tr><tr><td>Extra</td><td>表示额外信息，例如 Using temporary 表示需要使用临时表存储结果集，常见于排序和分组查询。Using filesort 表示无法利用索引完成的文件排序，这是 ORDER BY 的结果，可以通过合适的索引改进性能。Using index 表示只需要使用索引就可以满足查询表得要求，说明表正在使用覆盖索引。</td></tr></tbody></table><hr><h4 id="Q5：有哪些优化-SQL-的策略？"><a href="#Q5：有哪些优化-SQL-的策略？" class="headerlink" title="Q5：有哪些优化 SQL 的策略？"></a>Q5：有哪些优化 SQL 的策略？</h4><p><strong>优化 COUNT 查询</strong></p><p>COUNT 是一个特殊的函数，它可以统计某个列值的数量，在统计列值时要求列值是非空的，不会统计 NULL 值。如果在 COUNT 中指定了列或列的表达式，则统计的就是这个表达式有值的结果数，而不是 NULL。</p><p>COUNT 的另一个作用是统计结果集的行数，当 MySQL 确定括号内的表达式不可能为 NULL 时，实际上就是在统计行数。当使用 COUNT(*) 时，* 不会扩展成所有列，它会忽略所有的列而直接统计所有的行数。</p><p>某些业务场景并不要求完全精确的 COUNT 值，此时可以使用近似值来代替，EXPLAIN 出来的优化器估算的行数就是一个不错的近似值，因为执行 EXPLAIN 并不需要真正地执行查询。</p><p>通常来说 COUNT 都需要扫描大量的行才能获取精确的结果，因此很难优化。在 MySQL 层还能做的就只有覆盖扫描了，如果还不够就需要修改应用的架构，可以增加汇总表或者外部缓存系统。</p><p><strong>优化关联查询</strong></p><p>确保 ON 或 USING 子句中的列上有索引，在创建索引时就要考虑到关联的顺序。</p><p>确保任何 GROUP BY 和 ORDER BY 的表达式只涉及到一个表中的列，这样 MySQL 才有可能使用索引来优化这个过程。</p><p>在 MySQL 5.5 及以下版本尽量避免子查询，可以用关联查询代替，因为执行器会先执行外部的 SQL 再执行内部的 SQL。</p><p><strong>优化 GROUP BY</strong></p><p>如果没有通过 ORDER BY 子句显式指定要排序的列，当查询使用 GROUP BY 时，结果***自动按照分组的字段进行排序，如果不关心结果集的顺序，可以使用 ORDER BY NULL 禁止排序。</p><p><strong>优化 LIMIT 分页</strong></p><p>在偏移量非常大的时候，需要查询很多条数据再舍弃，这样的代价非常高。要优化这种查询，要么是在页面中限制分页的数量，要么是优化大偏移量的性能。最简单的办法是尽可能地使用覆盖索引扫描，而不是查询所有的列，然后根据需要做一次关联操作再返回所需的列。</p><p>还有一种方法是从上一次取数据的位置开始扫描，这样就可以避免使用 OFFSET。其他优化方法还包括使用预先计算的汇总表，或者关联到一个冗余表，冗余表只包含主键列和需要做排序的数据列。</p><p><strong>优化 UNION 查询</strong></p><p>MySQL 通过创建并填充临时表的方式来执行 UNION 查询，除非确实需要服务器消除重复的行，否则一定要使用 UNION ALL，如果没有 ALL 关键字，MySQL 会给临时表加上 DISTINCT 选项，这会导致对整个临时表的数据做唯一性检查，这样做的代价非常高。</p><p><strong>使用用户自定义变量</strong></p><p>在查询中混合使用过程化和关系化逻辑的时候，自定义变量可能会非常有用。用户自定义变量是一个用来存储内容的临时容器，在连接 MySQL 的整个过程中都存在，可以在任何可以使用表达式的地方使用自定义变量。例如可以使用变量来避免重复查询刚刚更新过的数据、统计更新和插入的数量等。</p><p><strong>优化 INSERT</strong> </p><p>需要对一张表插入很多行数据时，应该尽量使用一次性插入多个值的 INSERT 语句，这种方式将缩减客户端与数据库之间的连接、关闭等消耗，效率比多条插入单个值的 INSERT 语句高。也可以关闭事务的自动提交，在插入完数据后提交。当插入的数据是按主键的顺序插入时，效率更高。</p><hr><h3 id="复制-2"><a href="#复制-2" class="headerlink" title="复制 2"></a>复制 2</h3><h4 id="Q1：MySQL-主从复制的作用？"><a href="#Q1：MySQL-主从复制的作用？" class="headerlink" title="Q1：MySQL 主从复制的作用？"></a>Q1：MySQL 主从复制的作用？</h4><p>复制解决的基本问题是让一台服务器的数据与其他服务器保持同步，一台主库的数据可以同步到多台备库上，备库本身也可以被配置成另外一台服务器的主库。主库和备库之间可以有多种不同的组合方式。</p><p>MySQL 支持两种复制方式：基于行的复制和基于语句的复制，基于语句的复制也称为逻辑复制，从 MySQL 3.23 版本就已存在，基于行的复制方式在 5.1 版本才被加进来。这两种方式都是通过在主库上记录二进制日志、在备库重放日志的方式来实现异步的数据复制。因此同一时刻备库的数据可能与主库存在不一致，并且无法包装主备之间的延迟。</p><p>MySQL 复制大部分是向后兼容的，新版本的服务器可以作为老版本服务器的备库，但是老版本不能作为新版本服务器的备库，因为它可能无法解析新版本所用的新特性或语法，另外所使用的二进制文件格式也可能不同。</p><p>复制解决的问题：数据分布、负载均衡、备份、高可用性和故障切换、MySQL 升级测试。</p><hr><h4 id="Q2：MySQL-主从复制的步骤？"><a href="#Q2：MySQL-主从复制的步骤？" class="headerlink" title="Q2：MySQL 主从复制的步骤？"></a>Q2：MySQL 主从复制的步骤？</h4><p>① 在主库上把数据更改记录到二进制日志中。② 备库将主库的日志复制到自己的中继日志中。 ③ 备库读取中继日志中的事件，将其重放到备库数据之上。</p><p>第一步是在主库上记录二进制日志，每次准备提交事务完成数据更新前，主库将数据更新的事件记录到二进制日志中。MySQL 会按事务提交的顺序而非每条语句的执行顺序来记录二进制日志，在记录二进制日志后，主库会告诉存储引擎可以提交事务了。</p><p>下一步，备库将主库的二进制日志复制到其本地的中继日志中。备库首先会启动一个工作的 IO 线程，IO 线程跟主库建立一个普通的客户端连接，然后在主库上启动一个特殊的二进制转储线程，这个线程会读取主库上二进制日志中的事件。它不会对事件进行轮询。如果该线程追赶上了主库将进入睡眠状态，直到主库发送信号量通知其有新的事件产生时才会被唤醒，备库 IO 线程会将接收到的事件记录到中继日志中。</p><p>备库的 SQL 线程执行最后一步，该线程从中继日志中读取事件并在备库执行，从而实现备库数据的更新。当 SQL 线程追赶上 IO 线程时，中继日志通常已经在系统缓存中，所以中继日志的开销很低。SQL 线程执行的时间也可以通过配置选项来决定是否写入其自己的二进制日志中。</p><hr><h2 id="Redis-37"><a href="#Redis-37" class="headerlink" title="Redis 37"></a>Redis 37</h2><h3 id="架构-3"><a href="#架构-3" class="headerlink" title="架构 3"></a>架构 3</h3><h4 id="Q1：Redis-有什么特点？"><a href="#Q1：Redis-有什么特点？" class="headerlink" title="Q1：Redis 有什么特点？"></a>Q1：Redis 有什么特点？</h4><p><strong>基于键值对的数据结构服务器</strong></p><p>Redis 中的值不仅可以是字符串，还可以是具体的数据结构，这样不仅能应用于多种场景开发，也可以提高开发效率。它主要提供五种数据结构：字符串、哈希、列表、集合、有序集合，同时在字符串的基础上演变出了 Bitmaps 和 HyperLogLog 两种数据结构，Redis 3.2 还加入了有关 GEO 地理信息定位的功能。</p><p><strong>丰富的功能</strong></p><p>① 提供了键过期功能，可以实现缓存。② 提供了发布订阅功能，可以实现消息系统。③ 支持 Lua 脚本，可以创造新的 Redis 命令。④ 提供了简单的事务功能，能在一定程度上保证事务特性。⑤ 提供了流水线功能，客户端能将一批命令一次性传到 Redis，减少网络开销。</p><p><strong>简单稳定</strong></p><p>Redis 的简单主要体现在三个方面：① 源码很少，早期只有 2 万行左右，在 3.0 版本由于添加了集群特性，增加到了 5 万行左右，相对于很多 NoSQL 数据库来说代码量要少很多。② 采用单线程模型，使得服务端处理模型更简单，也使客户端开发更简单。③ 不依赖底层操作系统的类库，自己实现了事件处理的相关功能。虽然 Redis 比较简单，但也很稳定。</p><p><strong>客户端语言多</strong></p><p>Redis 提供了简单的 TCP 通信协议，很多编程语言可以方便地接入 Redis，例如 Java、PHP、Python、C、C++ 等。</p><p><strong>持久化</strong></p><p>通常来说数据放在内存中是不安全的，一旦发生断电或故障数据就可能丢失，因此 Redis 提供了两种持久化方式 RDB 和 AOF 将内存的数据保存到硬盘中。</p><p><strong>高性能</strong></p><p>Redis 使用了单线程架构和 IO 多路复用模型来实现高性能的内存数据库服务。</p><p>每次客户端调用都经历了发送命令、执行命令、返回结果三个过程，因为 Redis 是单线程处理命令的，所以一条命令从客户端到达服务器不会立即执行，所有命令都会进入一个队列中，然后逐个被执行。客户端的执行顺序可能不确定，但是可以确定不会有两条命令被同时执行，不存在并发问题。</p><p>通常来说单线程处理能力要比多线程差，Redis 快的原因：① 纯内存访问，Redis 将所有数据放在内存中。② 非阻塞 IO，Redis 使用 epoll 作为 IO 多路复用技术的实现，再加上 Redis 本身的事件处理模型将 epoll 中的连接、读写、关闭都转换为时间，不在网络 IO 上浪费过多的时间。③ 单线程避免了线程切换和竞争产生的消耗。单线程的一个问题是对于每个命令的执行时间是有要求的，如果某个命令执行时间过长会造成其他命令的阻塞，对于 Redis 这种高性能服务来说是致命的，因此 Redis 是面向快速执行场景的数据库。</p><hr><h4 id="Q2：Redis-的数据结构有哪些？"><a href="#Q2：Redis-的数据结构有哪些？" class="headerlink" title="Q2：Redis 的数据结构有哪些？"></a>Q2：Redis 的数据结构有哪些？</h4><p>可以使用 type 命令查看当前键的数据类型结构，它们分别是：string、hash、list、set、zset，但这些只是 Redis 对外的数据结构。实际上每种数据结构都有自己底层的内部编码实现，这样 Redis 会在合适的场景选择合适的内部编码，string 包括了 raw、int 和 embstr，hash 包括了 hashtable 和 ziplist，list 包括了 linkedlist 和 ziplist，set 包括了 hashtable 和 intset，zset 包括了 skiplist 和 ziplist。可以使用 <code>object encoding</code> 查看内部编码。</p><hr><h4 id="Q3：Redis-为什么要使用内部编码？"><a href="#Q3：Redis-为什么要使用内部编码？" class="headerlink" title="Q3：Redis 为什么要使用内部编码？"></a>Q3：Redis 为什么要使用内部编码？</h4><p>① 可以改进内部编码，而对外的数据结构和命令没有影响。</p><p>② 多种内部编码实现可以在不同场景下发挥各自的优势，例如 ziplist 比较节省内存，但在列表元素较多的情况下性能有所下降，这时 Redis 会根据配置选项将列表类型的内部实现转换为 linkedlist。</p><hr><h3 id="string-4"><a href="#string-4" class="headerlink" title="string 4"></a>string 4</h3><h4 id="Q1：简单说一说-string-类型"><a href="#Q1：简单说一说-string-类型" class="headerlink" title="Q1：简单说一说 string 类型"></a>Q1：简单说一说 string 类型</h4><p>字符串类型是 Redis 最基础的数据结构，键都是字符串类型，而且其他几种数据结构都是在字符串类型的基础上构建的。字符串类型的值可以实际可以是字符串（简单的字符串、复杂的字符串如 JSON、XML）、数字（整形、浮点数）、甚至二进制（图片、音频、视频），但是值最大不能超过 512 MB。</p><hr><h4 id="Q2：你知道哪些-string-的命令？"><a href="#Q2：你知道哪些-string-的命令？" class="headerlink" title="Q2：你知道哪些 string 的命令？"></a>Q2：你知道哪些 string 的命令？</h4><p><strong>设置值</strong></p><pre class="line-numbers language-none"><code class="language-none">set key value [ex seconds] [px millseconds] [nx|xx]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>ex seconds：为键设置秒级过期时间，跟 setex 效果一样 </li><li>px millseconds：为键设置毫秒级过期时间 </li><li>nx：键必须不存在才可以设置成功，用于添加，跟 setnx 效果一样。由于 Redis 的单线程命令处理机制，如果多个客户端同时执行，则只有一个客户端能设置成功，可以用作分布式锁的一种实现。 </li><li>xx：键必须存在才可以设置成功，用于更新 </li></ul><p><strong>获取值</strong></p><p><code>get key</code>，如果不存在返回 nil</p><p><strong>批量设置值</strong></p><pre class="line-numbers language-none"><code class="language-none">mset key value [key value...]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>批量获取值</strong></p><pre class="line-numbers language-none"><code class="language-none">mget key [key...]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>批量操作命令可以有效提高开发效率，假如没有 mget，执行 n 次 get 命令需要 n 次网络时间 + n 次命令时间，使用 mget 只需要 1 次网络时间 + n 次命令时间。Redis 可以支持每秒数万的读写操作，但这指的是 Redis 服务端的处理能力，对于客户端来说一次命令处理命令时间还有网络时间。因为 Redis 的处理能力已足够高，对于开发者来说，网络可能会成为性能瓶颈。</p><p><strong>计数</strong></p><pre class="line-numbers language-none"><code class="language-none">incr key<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>incr 命令用于对值做自增操作，返回结果分为三种：① 值不是整数返回错误。② 值是整数，返回自增后的结果。③ 值不存在，按照值为 0 自增，返回结果 1。除了 incr 命令，还有自减 decr、自增指定数字 incrby、自减指定数组 decrby、自增浮点数 incrbyfloat。</p><hr><h4 id="Q3：string-的内部编码是什么？"><a href="#Q3：string-的内部编码是什么？" class="headerlink" title="Q3：string 的内部编码是什么？"></a>Q3：string 的内部编码是什么？</h4><ul><li>int：8 个字节的长整形 </li><li>embstr：小于等于 39 个字节的字符串 </li><li>raw：大于 39 个字节的字符串 </li></ul><hr><h4 id="Q4：string-的应用场景有什么？"><a href="#Q4：string-的应用场景有什么？" class="headerlink" title="Q4：string 的应用场景有什么？"></a>Q4：string 的应用场景有什么？</h4><p><strong>缓存功能</strong></p><p>Redis 作为缓存层，MySQL 作为存储层，首先从 Redis 获取数据，如果失败就从 MySQL 获取并将结果写回 Redis 并添加过期时间。</p><p><strong>计数</strong></p><p>Redis 可以实现快速计数功能，例如视频每播放一次就用 incy 把播放数加 1。</p><p><strong>共享 Session</strong></p><p>一个分布式 Web 服务将用户的 Session 信息保存在各自服务器，但会造成一个问题，出于负载均衡的考虑，分布式服务会将用户的访问负载到不同服务器上，用户刷新一次可能会发现需要重新登陆。为解决该问题，可以使用 Redis 将用户的 Session 进行集中管理，在这种模式下只要保证 Redis 是高可用和扩展性的，每次用户更新或查询登录信息都直接从 Redis 集中获取。</p><p><strong>限速</strong></p><p>例如为了短信接口不被频繁访问会限制用户每分钟获取验证码的次数或者网站限制一个 IP 地址不能在一秒内访问超过 n 次。可以使用键过期策略和自增计数实现。</p><hr><h3 id="hash-4"><a href="#hash-4" class="headerlink" title="hash 4"></a>hash 4</h3><h4 id="Q1：简单说一说-hash-类型"><a href="#Q1：简单说一说-hash-类型" class="headerlink" title="Q1：简单说一说 hash 类型"></a>Q1：简单说一说 hash 类型</h4><p>哈希类型指键值本身又是一个键值对结构，哈希类型中的映射关系叫 field-value，这里的 value 是指 field 对于的值而不是键对于的值。</p><hr><h4 id="Q2：你知道哪些-hash-的命令？"><a href="#Q2：你知道哪些-hash-的命令？" class="headerlink" title="Q2：你知道哪些 hash 的命令？"></a>Q2：你知道哪些 hash 的命令？</h4><p><strong>设置值</strong></p><p><code>hset key field value</code>，如果设置成功会返回 1，反之会返回 0，此外还提供了 hsetnx 命令，作用和 setnx 类似，只是作用于由键变为 field。</p><p><strong>获取值</strong></p><p><code>hget key field</code>，如果不存在会返回 nil。</p><p><strong>删除 field</strong></p><p><code>hdel key field [field...]</code>，会删除一个或多个 field，返回结果为删除成功 field 的个数。</p><p><strong>计算 field 个数</strong></p><pre class="line-numbers language-none"><code class="language-none">hlen key<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>批量设置或获取 field-value</strong></p><pre class="line-numbers language-none"><code class="language-none">hmget key field [field...]``hmset key field value [field value...]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>判断 field 是否存在</strong></p><p><code>hexists key field</code>，存在返回 1，否则返回  0。</p><p><strong>获取所有的 field</strong></p><p><code>hkeys key</code>，返回指定哈希键的所有 field。</p><p><strong>获取所有 value</strong></p><p><code>hvals key</code>，获取指定键的所有 value。</p><p><strong>获取所有的 field-value</strong></p><p><code>hgetall key</code>，获取指定键的所有 field-value。</p><hr><h4 id="Q3：hash-的内部编码是什么？"><a href="#Q3：hash-的内部编码是什么？" class="headerlink" title="Q3：hash 的内部编码是什么？"></a>Q3：hash 的内部编码是什么？</h4><p>ziplist 压缩列表：当哈希类型元素个数和值小于配置值（默认 512 个和 64 字节）时会使用 ziplist 作为内部实现，使用更紧凑的结构实现多个元素的连续存储，在节省内存方面比 hashtable 更优秀。</p><p>hashtable 哈希表：当哈希类型无法满足 ziplist 的条件时会使用 hashtable 作为哈希的内部实现，因为此时 ziplist 的读写效率会下降，而 hashtable 的读写时间复杂度都为 O(1)。</p><hr><h4 id="Q4：hash-的应用场景有什么？"><a href="#Q4：hash-的应用场景有什么？" class="headerlink" title="Q4：hash 的应用场景有什么？"></a>Q4：hash 的应用场景有什么？</h4><p>缓存用户信息，每个用户属性使用一对 field-value，但只用一个键保存。</p><p>优点：简单直观，如果合理使用可以减少内存空间使用。</p><p>缺点：要控制哈希在 ziplist 和 hashtable 两种内部编码的转换，hashtable 会消耗更多内存。</p><hr><h3 id="list-4"><a href="#list-4" class="headerlink" title="list 4"></a>list 4</h3><h4 id="Q1：简单说一说-list-类型"><a href="#Q1：简单说一说-list-类型" class="headerlink" title="Q1：简单说一说 list 类型"></a>Q1：简单说一说 list 类型</h4><p>list 是用来存储多个有序的字符串，列表中的每个字符串称为元素，一个列表最多可以存储 2^32^-1 个元素。可以对列表两端插入（push）和弹出（pop），还可以获取指定范围的元素列表、获取指定索引下标的元素等。列表是一种比较灵活的数据结构，它可以充当栈和队列的角色，在实际开发中有很多应用场景。</p><p>list 有两个特点：① 列表中的元素是有序的，可以通过索引下标获取某个元素或者某个范围内的元素列表。② 列表中的元素可以重复。</p><hr><h4 id="Q2：你知道哪些-list-的命令？"><a href="#Q2：你知道哪些-list-的命令？" class="headerlink" title="Q2：你知道哪些 list 的命令？"></a>Q2：你知道哪些 list 的命令？</h4><p><strong>添加</strong></p><p>从右边插入元素：<code>rpush key value [value...]</code></p><p>从左到右获取列表的所有元素：<code>lrange 0 -1</code></p><p>从左边插入元素：<code>lpush key value [value...]</code></p><p>向某个元素前或者后插入元素：<code>linsert key before|after pivot value</code>，会在列表中找到等于 pivot 的元素，在其前或后插入一个新的元素 value。</p><p><strong>查找</strong></p><p>获取指定范围内的元素列表：<code>lrange key start end</code>，索引从左到右的范围是 0<del>N-1，从右到左是 -1</del>-N，lrange 中的 end 包含了自身。</p><p>获取列表指定索引下标的元素：<code>lindex key index</code>，获取最后一个元素可以使用 <code>lindex key -1</code>。</p><p>获取列表长度：<code>llen key</code></p><p><strong>删除</strong></p><p>从列表左侧弹出元素：<code>lpop key</code></p><p>从列表右侧弹出元素：<code>rpop key</code></p><p>删除指定元素：<code>lrem key count value</code>，如果 count 大于 0，从左到右删除最多 count 个元素，如果 count 小于 0，从右到左删除最多个 count 绝对值个元素，如果 count 等于 0，删除所有。</p><p>按照索引范围修剪列表：<code>ltrim key start end</code>，只会保留 start ~ end 范围的元素。</p><p><strong>修改</strong></p><p>修改指定索引下标的元素：<code>lset key index newValue</code>。</p><p><strong>阻塞操作</strong></p><p>阻塞式弹出：<code>blpop/brpop key [key...] timeout</code>，timeout 表示阻塞时间。</p><p>当列表为空时，如果 timeout = 0，客户端会一直阻塞，如果在此期间添加了元素，客户端会立即返回。</p><p>如果是多个键，那么brpop会从左至右遍历键，一旦有一个键能弹出元素，客户端立即返回。</p><p>如果多个客户端对同一个键执行 brpop，那么最先执行该命令的客户端可以获取弹出的值。</p><hr><h4 id="Q3：list-的内部编码是什么？"><a href="#Q3：list-的内部编码是什么？" class="headerlink" title="Q3：list 的内部编码是什么？"></a>Q3：list 的内部编码是什么？</h4><p>ziplist 压缩列表：跟哈希的 zipilist 相同，元素个数和大小小于配置值（默认 512 个和 64 字节）时使用。</p><p>linkedlist 链表：当列表类型无法满足 ziplist 的条件时会使用linkedlist。</p><p>Redis 3.2 提供了 quicklist 内部编码，它是以一个 ziplist 为节点的 linkedlist，它结合了两者的优势，为列表类提供了一种更为优秀的内部编码实现。</p><hr><h4 id="Q4：list-的应用场景有什么？"><a href="#Q4：list-的应用场景有什么？" class="headerlink" title="Q4：list 的应用场景有什么？"></a>Q4：list 的应用场景有什么？</h4><p><strong>消息队列</strong></p><p>Redis 的 lpush + brpop 即可实现阻塞队列，生产者客户端使用 lpush 从列表左侧插入元素，多个消费者客户端使用 brpop 命令阻塞式地抢列表尾部的元素，多个客户端保证了消费的负载均衡和高可用性。</p><p><strong>文章列表</strong></p><p>每个用户有属于自己的文章列表，现在需要分页展示文章列表，就可以考虑使用列表。因为列表不但有序，同时支持按照索引范围获取元素。每篇文章使用哈希结构存储。</p><p>lpush + lpop = 栈、lpush + rpop  = 队列、lpush + ltrim = 优先集合、lpush + brpop = 消息队列。</p><hr><h3 id="set-4"><a href="#set-4" class="headerlink" title="set 4"></a>set 4</h3><h4 id="Q1：简单说一说-set-类型"><a href="#Q1：简单说一说-set-类型" class="headerlink" title="Q1：简单说一说 set 类型"></a>Q1：简单说一说 set 类型</h4><p>集合类型也是用来保存多个字符串元素，和列表不同的是集合不允许有重复元素，并且集合中的元素是无序的，不能通过索引下标获取元素。一个集合最多可以存储 2^32^-1 个元素。Redis 除了支持集合内的增删改查，还支持多个集合取交集、并集、差集。</p><hr><h4 id="Q2：你知道哪些-set-的命令？"><a href="#Q2：你知道哪些-set-的命令？" class="headerlink" title="Q2：你知道哪些 set 的命令？"></a>Q2：你知道哪些 set 的命令？</h4><p><strong>添加元素</strong></p><p><code>sadd key element [element...]</code>，返回结果为添加成功的元素个数。</p><p><strong>删除元素</strong></p><p><code>srem key element [element...]</code>，返回结果为成功删除的元素个数。</p><p><strong>计算元素个数</strong></p><p><code>scard key</code>，时间复杂度为 O(1)，会直接使用 Redis 内部的遍历。</p><p><strong>判断元素是否在集合中</strong></p><p><code>sismember key element</code>，如果存在返回 1，否则返回 0。</p><p><strong>随机从集合返回指定个数个元素</strong></p><p><code>srandmember key [count]</code>，如果不指定 count 默认为 1。</p><p><strong>从集合随机弹出元素</strong></p><p><code>spop key</code>，可以从集合中随机弹出一个元素。</p><p><strong>获取所有元素</strong></p><pre class="line-numbers language-none"><code class="language-none">smembers key<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>求多个集合的交集/并集/差集</strong></p><pre class="line-numbers language-none"><code class="language-none">sinter key [key...]sunion key [key...]sdiff key [key...]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>保存交集、并集、差集的结果</strong></p><pre class="line-numbers language-none"><code class="language-none">sinterstore/sunionstore/sdiffstore destination key [key...]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>集合间运算在元素较多情况下比较耗时，Redis 提供这三个指令将集合间交集、并集、差集的结果保存在 destination key 中。</p><hr><h4 id="Q3：set-的内部编码是什么？"><a href="#Q3：set-的内部编码是什么？" class="headerlink" title="Q3：set 的内部编码是什么？"></a>Q3：set 的内部编码是什么？</h4><p>intset 整数集合：当集合中的元素个数小于配置值（默认 512 个时），使用 intset。</p><p>hashtable 哈希表：当集合类型无法满足 intset 条件时使用 hashtable。当某个元素不为整数时，也会使用 hashtable。</p><hr><h4 id="Q4：set-的应用场景有什么？"><a href="#Q4：set-的应用场景有什么？" class="headerlink" title="Q4：set 的应用场景有什么？"></a>Q4：set 的应用场景有什么？</h4><p>set 比较典型的使用场景是标签，例如一个用户可能与娱乐、体育比较感兴趣，另一个用户可能对例时、新闻比较感兴趣，这些兴趣点就是标签。这些数据对于用户体验以及增强用户黏度比较重要。</p><p>sadd = 标签、spop/srandmember = 生成随机数，比如抽奖、sadd + sinter = 社交需求。</p><hr><h3 id="zset-4"><a href="#zset-4" class="headerlink" title="zset 4"></a>zset 4</h3><h4 id="Q1：简单说一说-zset-类型"><a href="#Q1：简单说一说-zset-类型" class="headerlink" title="Q1：简单说一说 zset 类型"></a>Q1：简单说一说 zset 类型</h4><p>有序集合保留了集合不能有重复成员的特性，不同的是可以排序。但是它和列表使用索引下标作为排序依据不同的是，他给每个元素设置一个分数（score）作为排序的依据。有序集合提供了获取指定分数和元素查询范围、计算成员排名等功能。</p><hr><h4 id="Q2：你知道哪些-zset-的命令？"><a href="#Q2：你知道哪些-zset-的命令？" class="headerlink" title="Q2：你知道哪些 zset 的命令？"></a>Q2：你知道哪些 zset 的命令？</h4><p><strong>添加成员</strong></p><p><code>zadd key score member [score member...]</code>，返回结果是成功添加成员的个数</p><p>Redis 3.2 为 zadd 命令添加了 nx、xx、ch、incr 四个选项：</p><ul><li>nx：member 必须不存在才可以设置成功，用于添加。 </li><li>xx：member 必须存在才能设置成功，用于更新。 </li><li>ch：返回此次操作后，有序集合元素和分数变化的个数。 </li><li>incr：对 score 做增加，相当于 zincrby。 </li></ul><p>zadd 的时间复杂度为 O(log<del>n</del>)，sadd 的时间复杂度为 O(1)。</p><p><strong>计算成员个数</strong></p><p><code>zcard key</code>，时间复杂度为 O(1)。</p><p><strong>计算某个成员的分数</strong></p><p><code>zscore key member</code> ，如果不存在则返回 nil。</p><p><strong>计算成员排名</strong></p><p><code>zrank key member</code>，从低到高返回排名。</p><p><code>zrevrank key member</code>，从高到低返回排名。</p><p><strong>删除成员</strong></p><p><code>zrem key member [member...]</code>，返回结果是成功删除的个数。</p><p><strong>增加成员的分数</strong></p><pre class="line-numbers language-none"><code class="language-none">zincrby key increment member<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>返回指定排名范围的成员</strong></p><p><code>zrange key start end [withscores]</code>，从低到高返回</p><p><code>zrevrange key start end [withscores]</code>， 从高到底返回</p><p><strong>返回指定分数范围的成员</strong></p><p><code>zrangebyscore key min max [withscores] [limit offset count]</code>，从低到高返回</p><p><code>zrevrangebyscore key min max [withscores] [limit offset count]</code>， 从高到底返回</p><p><strong>返回指定分数范围成员个数</strong></p><pre class="line-numbers language-none"><code class="language-none">zcount key min max<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>删除指定分数范围内的成员</strong></p><pre class="line-numbers language-none"><code class="language-none">zremrangebyscore key min max<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>交集和并集</strong></p><pre class="line-numbers language-none"><code class="language-none">zinterstore/zunionstore destination numkeys key [key...] [weights weight [weight...]] [aggregate sum|min|max]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><code>destination</code>：交集结果保存到这个键</li><li><code>numkeys</code>：要做交集计算键的个数</li><li><code>key</code>：需要做交集计算的键</li><li><code>weight</code>：每个键的权重，默认 1</li><li><code>aggregate sum|min|max</code>：计算交集后，分值可以按和、最小值、最大值汇总，默认 sum。</li></ul><hr><h4 id="Q3：zset-的内部编码是什么？"><a href="#Q3：zset-的内部编码是什么？" class="headerlink" title="Q3：zset 的内部编码是什么？"></a>Q3：zset 的内部编码是什么？</h4><p>ziplist 压缩列表：当有序集合元素个数和值小于配置值（默认128 个和 64 字节）时会使用 ziplist 作为内部实现。</p><p>skiplist 跳跃表：当 ziplist 不满足条件时使用，因为此时 ziplist 的读写效率会下降。</p><hr><h4 id="Q4：zset-的应用场景有什么？"><a href="#Q4：zset-的应用场景有什么？" class="headerlink" title="Q4：zset 的应用场景有什么？"></a>Q4：zset 的应用场景有什么？</h4><p>有序集合的典型使用场景就是排行榜系统，例如用户上传了一个视频并获得了赞，可以使用 zadd 和 zincrby。如果需要将用户从榜单删除，可以使用 zrem。如果要展示获取赞数最多的十个用户，可以使用 zrange。</p><hr><h3 id="键和数据库管理-5"><a href="#键和数据库管理-5" class="headerlink" title="键和数据库管理 5"></a>键和数据库管理 5</h3><h4 id="Q1：如何对键重命名？"><a href="#Q1：如何对键重命名？" class="headerlink" title="Q1：如何对键重命名？"></a>Q1：如何对键重命名？</h4><pre class="line-numbers language-none"><code class="language-none">rename key newkey<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果 rename 前键已经存在，那么它的值也会被覆盖。为了防止强行覆盖，Redis 提供了 renamenx 命令，确保只有 newkey 不存在时才被覆盖。由于重命名键期间会执行 del 命令删除旧的键，如果键对应值比较大会存在阻塞的可能。</p><hr><h4 id="Q2：如何设置键过期？"><a href="#Q2：如何设置键过期？" class="headerlink" title="Q2：如何设置键过期？"></a>Q2：如何设置键过期？</h4><p><code>expire key seconds</code>：键在 seconds 秒后过期。</p><p>如果过期时间为负值，键会被立即删除，和 del 命令一样。persist 命令可以将键的过期时间清除。</p><p>对于字符串类型键，执行 set 命令会去掉过期时间，set 命令对应的函数 setKey 最后执行了 removeExpire 函数去掉了过期时间。setex 命令作为 set + expire 的组合，不单是原子执行并且减少了一次网络通信的时间。</p><hr><h4 id="Q3：如何进行键迁移？"><a href="#Q3：如何进行键迁移？" class="headerlink" title="Q3：如何进行键迁移？"></a>Q3：如何进行键迁移？</h4><ul><li><p>move</p><p>move 命令用于在 Redis 内部进行数据迁移，<code>move key db</code> 把指定的键从源数据库移动到目标数据库中。</p></li><li><p>dump + restore</p><p>可以实现在不同的 Redis 实例之间进行数据迁移，分为两步：</p><p>① <code>dump key</code> ，在源 Redis 上，dump 命令会将键值序列化，格式采用 RDB 格式。</p><p>② <code>restore key ttl value</code>，在目标 Redis 上，restore 命令将序列化的值进行复原，ttl 代表过期时间， ttl = 0 则没有过期时间。</p><p>整个迁移并非原子性的，而是通过客户端分步完成，并且需要两个客户端。</p></li><li><p>migrate</p><p>实际上 migrate 命令就是将 dump、restore、del 三个命令进行组合，从而简化操作流程。migrate 具有原子性，支持多个键的迁移，有效提高了迁移效率。实现过程和 dump + restore 类似，有三点不同：</p><p>① 整个过程是原子执行，不需要在多个 Redis 实例开启客户端。</p><p>② 数据传输直接在源 Redis 和目标 Redis 完成。</p><p>③ 目标 Redis 完成 restore 后会发送 OK 给源 Redis，源 Redis 接收后根据 migrate 对应选项来决定是否在源 Redis 上删除对应键。</p></li></ul><hr><h4 id="Q4：如何切换数据库？"><a href="#Q4：如何切换数据库？" class="headerlink" title="Q4：如何切换数据库？"></a>Q4：如何切换数据库？</h4><p><code>select dbIndex</code>，Redis 中默认配置有 16 个数据库，例如 select 0 将切换到第一个数据库，数据库之间的数据是隔离的。</p><hr><h4 id="Q5：如何清除数据库？"><a href="#Q5：如何清除数据库？" class="headerlink" title="Q5：如何清除数据库？"></a>Q5：如何清除数据库？</h4><p>用于清除数据库，flushdb 只清除当前数据库，flushall 会清除所有数据库。如果当前数据库键值数量比较多，flushdb/flushall 存在阻塞 Redis 的可能性。</p><hr><h3 id="持久化-9"><a href="#持久化-9" class="headerlink" title="持久化 9"></a>持久化 9</h3><h4 id="Q1：RDB-持久化的原理？"><a href="#Q1：RDB-持久化的原理？" class="headerlink" title="Q1：RDB 持久化的原理？"></a>Q1：RDB 持久化的原理？</h4><p>RDB 持久化是把当前进程数据生成快照保存到硬盘的过程，触发 RDB 持久化过程分为手动触发和自动触发。</p><p>手动触发分别对应 save 和 bgsave 命令：</p><ul><li>save：阻塞当前 Redis 服务器，直到 RDB 过程完成为止，对于内存比较大的实例会造成长时间阻塞，线上环境不建议使用。 </li><li>bgasve：Redis 进程执行 fork 操作创建子进程，RDB 持久化过程由子进程负责，完成后自动结束。阻塞只发生在 fork 阶段，一般时间很短。bgsave 是针对 save 阻塞问题做的优化，因此 Redis 内部所有涉及 RDB 的操作都采用 bgsave 的方式，而 save 方式已经废弃。 </li></ul><p>除了手动触发外，Redis 内部还存在自动触发 RDB 的持久化机制，例如：</p><ul><li>使用 save 相关配置，如 save m n，表示 m 秒内数据集存在 n 次修改时，自动触发 bgsave。 </li><li>如果从节点执行全量复制操作，主节点自动执行 bgsave 生成 RDB 文件并发送给从节点。 </li><li>执行 debug reload 命令重新加载 Redis 时也会自动触发 save 操作。 </li><li>默认情况下执行 shutdown 命令时，如果没有开启 AOF 持久化功能则自动执行 bgsave。 </li></ul><hr><h4 id="Q2：bgsave-的原理？"><a href="#Q2：bgsave-的原理？" class="headerlink" title="Q2：bgsave 的原理？"></a>Q2：bgsave 的原理？</h4><p>① 执行 bgsave 命令，Redis 父进程判断当前是否存在正在执行的子进程，如 RDB/AOF 子进程，如果存在 bgsave 命令直接返回。</p><p>② 父进程执行 fork 操作创建子进程，fork 操作过程中父进程会阻塞。</p><p>③ 父进程 fork 完成后，bgsave 命令返回并不再阻塞父进程，可以继续响应其他命令。</p><p>④ 子进程创建 RDB 文件，根据父进程内存生成临时快照文件，完成后对原有文件进行原子替换。</p><p>⑤ 进程发送信号给父进程表示完成，父进程更新统计信息。</p><hr><h4 id="Q3：RDB-持久化的优点？"><a href="#Q3：RDB-持久化的优点？" class="headerlink" title="Q3：RDB 持久化的优点？"></a>Q3：RDB 持久化的优点？</h4><p>RDB 是一个紧凑压缩的二进制文件，代表 Redis 在某个时间点上的数据快照。非常适合于备份，全量复制等场景。例如每 6 个消时执行 bgsave 备份，并把 RDB 文件拷贝到远程机器或者文件系统中，用于灾难恢复。</p><p>Redis 加载 RDB 恢复数据远远快于 AOF 的方式。</p><hr><h4 id="Q4：RDB-持久化的缺点？"><a href="#Q4：RDB-持久化的缺点？" class="headerlink" title="Q4：RDB 持久化的缺点？"></a>Q4：RDB 持久化的缺点？</h4><p>RDB 方式数据无法做到实时持久化/秒级持久化，因为 bgsave 每次运行都要执行 fork 操作创建子进程，属于重量级操作，频繁执行成本过高。针对 RDB 不适合实时持久化的问题，Redis 提供了 AOF 持久化方式。</p><p>RDB 文件使用特定二进制格式保存，Redis 版本演进过程中有多个格式的 RDB 版本，存在老版本 Redis 服务无法兼容新版 RDB 格式的问题。</p><hr><h4 id="Q5：AOF-持久化的原理？"><a href="#Q5：AOF-持久化的原理？" class="headerlink" title="Q5：AOF 持久化的原理？"></a>Q5：AOF 持久化的原理？</h4><p>AOF 持久化以独立日志的方式记录每次写命令，重启时再重新执行 AOF 文件中的命令达到恢复数据的目的。AOF 的主要作用是解决了数据持久化的实时性，目前是 Redis 持久化的主流方式。</p><p>开启 AOF 功能需要设置：<code>appendonly yes</code>，默认不开启。保存路径同 RDB 方式一致，通过 dir 配置指定。</p><p>AOF 的工作流程操作：命令写入 append、文件同步 sync、文件重写 rewrite、重启加载 load：</p><ul><li>所有的写入命令会追加到 aof_buf 缓冲区中。 </li><li>AOF 缓冲区根据对应的策略向硬盘做同步操作。 </li><li>随着 AOF 文件越来越大，需要定期对 AOF 文件进行重写，达到压缩的目的。 </li><li>当服务器重启时，可以加载 AOF 文件进行数据恢复。 </li></ul><hr><h4 id="Q6：AOF-命令写入的原理？"><a href="#Q6：AOF-命令写入的原理？" class="headerlink" title="Q6：AOF 命令写入的原理？"></a>Q6：AOF 命令写入的原理？</h4><p>AOF 命令写入的内容直接是文本协议格式，采用文本协议格式的原因：</p><ul><li>文本协议具有很好的兼容性。 </li><li>开启 AOF 后所有写入命令都包含追加操作，直接采用协议格式避免了二次处理开销。 </li><li>文本协议具有可读性，方便直接修改和处理。 </li></ul><p>AOF 把命令追加到缓冲区的原因：</p><p>Redis 使用单线程响应命令，如果每次写 AOF 文件命令都直接追加到硬盘，那么性能完全取决于当前硬盘负载。先写入缓冲区中还有另一个好处，Redis 可以提供多种缓冲区同步硬盘策略，在性能和安全性方面做出平衡。</p><hr><h4 id="Q7：AOF-文件同步的原理？"><a href="#Q7：AOF-文件同步的原理？" class="headerlink" title="Q7：AOF 文件同步的原理？"></a>Q7：AOF 文件同步的原理？</h4><p>Redis 提供了多种 AOF 缓冲区文件同步策略，由参数 <code>appendfsync</code> 控制，不同值的含义如下：</p><ul><li>always：命令写入缓冲区后调用系统 fsync 操作同步到 AOF 文件，fsync 完成后线程返回。每次写入都要同步 AOF，性能较低，不建议配置。</li><li>everysec：命令写入缓冲区后调用系统 write 操作，write 完成后线程返回。fsync 同步文件操作由专门线程每秒调用一次。是建议的策略，也是默认配置，兼顾性能和数据安全。</li><li>no：命令写入缓冲区后调用系统 write 操作，不对 AOF 文件做 fsync 同步，同步硬盘操作由操作系统负责，周期通常最长 30 秒。由于操作系统每次同步 AOF 文件的周期不可控，而且会加大每次同步硬盘的数据量，虽然提升了性能，但安全性无法保证。</li></ul><hr><h4 id="Q8：AOF-文件重写的原理？"><a href="#Q8：AOF-文件重写的原理？" class="headerlink" title="Q8：AOF 文件重写的原理？"></a>Q8：AOF 文件重写的原理？</h4><p>文件重写是把 Redis 进程内的数据转化为写命令同步到新 AOF 文件的过程，可以降低文件占用空间，更小的文件可以更快地被加载。</p><p>重写后 AOF 文件变小的原因：</p><ul><li>进程内已经超时的数据不再写入文件。 </li><li>旧的 AOF 文件含有无效命令，重写使用进程内数据直接生成，这样新的 AOF 文件只保留最终数据写入命令。 </li><li>多条写命令可以合并为一个，为了防止单条命令过大造成客户端缓冲区溢出，对于 list、set、hash、zset 等类型操作，以 64 个元素为界拆分为多条。 </li></ul><p>AOF 重写分为手动触发和自动触发，手动触发直接调用 bgrewriteaof 命令，自动触发根据 <code>auto-aof-rewrite-min-size</code> 和  <code>auto-aof-rewrite-percentage</code> 参数确定自动触发时机。</p><p>重写流程：</p><p>① 执行 AOF 重写请求，如果当前进程正在执行 AOF 重写，请求不执行并返回，如果当前进程正在执行 bgsave 操作，重写命令延迟到 bgsave 完成之后再执行。</p><p>② 父进程执行 fork 创建子进程，开销等同于 bgsave 过程。</p><p>③ 父进程 fork 操作完成后继续响应其他命令，所有修改命令依然写入 AOF 缓冲区并同步到硬盘，保证原有 AOF 机制正确性。</p><p>④ 子进程根据内存快照，按命令合并规则写入到新的 AOF 文件。每次批量写入数据量默认为 32 MB，防止单次刷盘数据过多造成阻塞。</p><p>⑤ 新 AOF 文件写入完成后，子进程发送信号给父进程，父进程更新统计信息。</p><p>⑥ 父进程把 AOF 重写缓冲区的数据写入到新的 AOF 文件并替换旧文件，完成重写。</p><hr><h4 id="Q9：AOF-重启加载的原理？"><a href="#Q9：AOF-重启加载的原理？" class="headerlink" title="Q9：AOF 重启加载的原理？"></a>Q9：AOF 重启加载的原理？</h4><p>AOF 和 RDB 文件都可以用于服务器重启时的数据恢复。Redis 持久化文件的加载流程：</p><p>① AOF 持久化开启且存在 AOF 文件时，优先加载 AOF 文件。</p><p>② AOF 关闭时且存在 RDB 文件时，记载 RDB 文件。</p><p>③ 加载 AOF/RDB 文件成功后，Redis 启动成功。</p><p>④ AOF/RDB 文件存在错误导致加载失败时，Redis 启动失败并打印错误信息。</p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习心得 </tag>
            
            <tag> java </tag>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HelloHexo⭐⭐⭐</title>
      <link href="posts/d8e4ee89/"/>
      <url>posts/d8e4ee89/</url>
      
        <content type="html"><![CDATA[<h1 id="走近HEXO"><a href="#走近HEXO" class="headerlink" title="走近HEXO"></a>走近HEXO</h1><blockquote><p>我的hexo全攻略</p></blockquote><h2 id="一、参考链接-star"><a href="#一、参考链接-star" class="headerlink" title="一、参考链接:star:"></a>一、参考链接<span class="github-emoji"><span>⭐</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2b50.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></h2><h3 id="1-官方文档"><a href="#1-官方文档" class="headerlink" title="1.官方文档"></a>1.官方文档</h3><p><a href="https://hexo.io/zh-cn/docs/">https://hexo.io/zh-cn/docs/</a></p><h3 id="2-皮肤文档-matery"><a href="#2-皮肤文档-matery" class="headerlink" title="2.皮肤文档(matery)"></a>2.皮肤文档(matery)</h3><p><a href="https://github.com/blinkfox/hexo-theme-matery/blob/develop/README_CN.md">https://github.com/blinkfox/hexo-theme-matery/blob/develop/README_CN.md</a></p><h3 id="3-详细配置文档"><a href="#3-详细配置文档" class="headerlink" title="3.详细配置文档"></a>3.详细配置文档</h3><p><a href="https://yafine-blog.cn/posts/4ab2.html">https://yafine-blog.cn/posts/4ab2.html</a></p><h3 id="4-LIVE2D插件"><a href="#4-LIVE2D插件" class="headerlink" title="4.LIVE2D插件"></a>4.LIVE2D插件</h3><p><a href="https://www.jianshu.com/p/3a6342e16e57">https://www.jianshu.com/p/3a6342e16e57</a></p><h3 id="5-歌单"><a href="#5-歌单" class="headerlink" title="5.歌单"></a>5.歌单</h3><p><a href="http://music.163.com/playlist?id=5337749378">http://music.163.com/playlist?id=5337749378</a></p><h3 id="6-代码高亮解决方案-star2-star2"><a href="#6-代码高亮解决方案-star2-star2" class="headerlink" title="6.代码高亮解决方案:star2::star2:"></a>6.代码高亮解决方案<span class="github-emoji"><span>🌟</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f31f.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span><span class="github-emoji"><span>🌟</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f31f.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></h3><p><a href="https://www.jianshu.com/p/f395d92a1110">https://www.jianshu.com/p/f395d92a1110</a></p><p>首先卸载之前的prism插件！！</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> uninstall -S hexo-prism-plugin<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="7-valine配置-star-star"><a href="#7-valine配置-star-star" class="headerlink" title="7.valine配置:star::star:"></a>7.valine配置<span class="github-emoji"><span>⭐</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2b50.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span><span class="github-emoji"><span>⭐</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2b50.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></h3><p><a href="https://www.jianshu.com/p/205aaa14dff3">https://www.jianshu.com/p/205aaa14dff3</a></p><p><a href="https://gaattc.life/posts/708ac940/">https://gaattc.life/posts/708ac940/</a></p><h3 id="8-设置二级标题-star"><a href="#8-设置二级标题-star" class="headerlink" title="8.设置二级标题:star:"></a>8.设置二级标题<span class="github-emoji"><span>⭐</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2b50.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></h3><p><a href="https://zhangxiaocai.cn/posts/5a99eb4d.html#toc-heading-3">https://zhangxiaocai.cn/posts/5a99eb4d.html#toc-heading-3</a></p><h3 id="9-很多有用的操作-star"><a href="#9-很多有用的操作-star" class="headerlink" title="9.很多有用的操作:star:"></a>9.很多有用的操作<span class="github-emoji"><span>⭐</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2b50.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></h3><p><a href="https://zhangxiaocai.cn/categories/Hexo/">https://zhangxiaocai.cn/categories/Hexo/</a></p><h3 id="10-不蒜子与live2d冲突问题-star-star"><a href="#10-不蒜子与live2d冲突问题-star-star" class="headerlink" title="10.不蒜子与live2d冲突问题:star::star:"></a>10.不蒜子与live2d冲突问题<span class="github-emoji"><span>⭐</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2b50.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span><span class="github-emoji"><span>⭐</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2b50.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></h3><p><a href="https://github.com/blinkfox/hexo-theme-matery/issues/458">https://github.com/blinkfox/hexo-theme-matery/issues/458</a></p><p><left><img src="/img/Snipaste_2020-11-17_19-03-50.jpg" style="zoom:67%;"></left></p><pre class="line-numbers language-none"><code class="language-none">hexo\themes\hexo-theme-matery-master\source\libs\others\busuanzi.pure.mini.js<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> bszCaller<span class="token punctuation">,</span>bszTag<span class="token punctuation">;</span><span class="token operator">!</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">var</span> c<span class="token punctuation">,</span>d<span class="token punctuation">,</span>e<span class="token punctuation">,</span>a<span class="token operator">=</span><span class="token operator">!</span><span class="token number">1</span><span class="token punctuation">,</span>b<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function-variable function">ready</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">c</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> a<span class="token operator">||</span><span class="token string">"interactive"</span><span class="token operator">===</span>document<span class="token punctuation">.</span>readyState<span class="token operator">||</span><span class="token string">"complete"</span><span class="token operator">===</span>document<span class="token punctuation">.</span>readyState<span class="token operator">?</span><span class="token function">c</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token operator">:</span>b<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token function">c</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token function-variable function">d</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> a<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>c<span class="token operator">=</span>b<span class="token punctuation">.</span>length<span class="token punctuation">;</span>c<span class="token operator">&gt;</span>a<span class="token punctuation">;</span>a<span class="token operator">++</span><span class="token punctuation">)</span>b<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">;</span>b<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token function-variable function">e</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>a<span class="token operator">||</span><span class="token punctuation">(</span>a<span class="token operator">=</span><span class="token operator">!</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token function">d</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>window<span class="token punctuation">)</span><span class="token punctuation">,</span>document<span class="token punctuation">.</span>removeEventListener<span class="token operator">?</span>document<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">"DOMContentLoaded"</span><span class="token punctuation">,</span>e<span class="token punctuation">,</span><span class="token operator">!</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">:</span>document<span class="token punctuation">.</span>attachEvent<span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">detachEvent</span><span class="token punctuation">(</span><span class="token string">"onreadystatechange"</span><span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">,</span>window<span class="token operator">==</span>window<span class="token punctuation">.</span>top<span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span><span class="token function">clearInterval</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">,</span>c<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>document<span class="token punctuation">.</span>addEventListener<span class="token operator">?</span>document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"DOMContentLoaded"</span><span class="token punctuation">,</span>e<span class="token punctuation">,</span><span class="token operator">!</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">:</span>document<span class="token punctuation">.</span>attachEvent<span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">attachEvent</span><span class="token punctuation">(</span><span class="token string">"onreadystatechange"</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">loaded|complete</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span>readyState<span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token function">e</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>window<span class="token operator">==</span>window<span class="token punctuation">.</span>top<span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>c<span class="token operator">=</span><span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">try</span><span class="token punctuation">{</span>a<span class="token operator">||</span>document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span><span class="token function">doScroll</span><span class="token punctuation">(</span><span class="token string">"left"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span><span class="token punctuation">}</span><span class="token function">e</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>bszCaller<span class="token operator">=</span><span class="token punctuation">{</span><span class="token function-variable function">fetch</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">var</span> c<span class="token operator">=</span><span class="token string">"BusuanziCallback_"</span><span class="token operator">+</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token number">1099511627776</span><span class="token operator">*</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>window<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token operator">=</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">evalCall</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">,</span>a<span class="token operator">=</span>a<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"=BusuanziCallback"</span><span class="token punctuation">,</span><span class="token string">"="</span><span class="token operator">+</span>c<span class="token punctuation">)</span><span class="token punctuation">,</span>scriptTag<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"SCRIPT"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>scriptTag<span class="token punctuation">.</span>type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token punctuation">,</span>scriptTag<span class="token punctuation">.</span>defer<span class="token operator">=</span><span class="token operator">!</span><span class="token number">0</span><span class="token punctuation">,</span>scriptTag<span class="token punctuation">.</span>src<span class="token operator">=</span>a<span class="token punctuation">,</span>document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">"HEAD"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>scriptTag<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token function-variable function">evalCall</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">b</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">try</span><span class="token punctuation">{</span><span class="token function">a</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">,</span>scriptTag<span class="token punctuation">.</span>parentElement<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>scriptTag<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">{</span>bszTag<span class="token punctuation">.</span><span class="token function">hides</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span>bszCaller<span class="token punctuation">.</span><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">"//busuanzi.ibruce.info/busuanzi?jsonpCallback=BusuanziCallback"</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span><span class="token punctuation">{</span>bszTag<span class="token punctuation">.</span><span class="token function">texts</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span>bszTag<span class="token punctuation">.</span><span class="token function">shows</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>bszTag<span class="token operator">=</span><span class="token punctuation">{</span>bszs<span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">"site_pv"</span><span class="token punctuation">,</span><span class="token string">"page_pv"</span><span class="token punctuation">,</span><span class="token string">"site_uv"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token function-variable function">texts</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>bszs<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">b</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">var</span> c<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"busuanzi_value_"</span><span class="token operator">+</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>c<span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>innerHTML<span class="token operator">=</span>a<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token function-variable function">hides</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>bszs<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">var</span> b<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"busuanzi_container_"</span><span class="token operator">+</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>b<span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token function-variable function">shows</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>bszs<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">var</span> b<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"busuanzi_container_"</span><span class="token operator">+</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>b<span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display<span class="token operator">=</span><span class="token string">"inline"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="11-友情链接下面有一个空白区域"><a href="#11-友情链接下面有一个空白区域" class="headerlink" title="11.友情链接下面有一个空白区域"></a>11.友情链接下面有一个空白区域</h3><p>找到以下文件：</p><pre class="line-numbers language-none"><code class="language-none">themes/hexo-theme-matery-master/layout/friends.ejs<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注释掉原来的然后加上自己的东西：</p><p><left><img src="/img/image-20201117224030065.png" alt="image-20201117224030065" style="zoom:67%;"></left></p><h3 id="12-自定义valine-star-第七条的补充"><a href="#12-自定义valine-star-第七条的补充" class="headerlink" title="12.自定义valine:star:(第七条的补充)"></a>12.自定义valine<span class="github-emoji"><span>⭐</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2b50.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>(第七条的补充)</h3><p><a href="https://gaattc.life.io/posts/708ac940/">https://gaattc.life.io/posts/708ac940/</a></p><h3 id="13-更改鼠标指针-star-star"><a href="#13-更改鼠标指针-star-star" class="headerlink" title="13.更改鼠标指针:star::star:"></a>13.更改鼠标指针<span class="github-emoji"><span>⭐</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2b50.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span><span class="github-emoji"><span>⭐</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2b50.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></h3><h4 id="法一："><a href="#法一：" class="headerlink" title="法一："></a><del>法一：</del></h4><blockquote><p>ref:<a href="https://yafine-blog.cn/posts/8c84.html">https://yafine-blog.cn/posts/8c84.html</a></p></blockquote><h4 id="推荐-法二："><a href="#推荐-法二：" class="headerlink" title="(推荐)法二："></a>(推荐)法二：</h4><p>找到文件：</p><pre class="line-numbers language-none"><code class="language-none">hexo\themes\hexo-theme-matery-master\source\css\my.css<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>增加样式：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">*</span><span class="token punctuation">{</span>    <span class="token property">cursor</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string url">"/medias/Arrow.cur"</span><span class="token punctuation">)</span></span><span class="token punctuation">,</span>auto<span class="token important">!important</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">a,button,img</span><span class="token punctuation">{</span>    <span class="token property">cursor</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string url">"/medias/pointer.cur"</span><span class="token punctuation">)</span></span><span class="token punctuation">,</span>auto<span class="token important">!important</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中cursor.ico就是指针图，比如：<img src="/img/cursor.ico">或<img src="/img/cursor.cur">或<img src="/img/Arrow.cur">或<img src="/img/normal.cur"></p><h3 id="14-评论推送服务"><a href="#14-评论推送服务" class="headerlink" title="14.评论推送服务"></a>14.评论推送服务</h3><p>详见<a href="https://gaattc.life.io/posts/708ac940/">另一篇文章</a></p><h3 id="15-增加跳转评论按钮"><a href="#15-增加跳转评论按钮" class="headerlink" title="15.增加跳转评论按钮"></a>15.增加跳转评论按钮</h3><p><a href="https://blog.csdn.net/cungudafa/article/details/106278206">https://blog.csdn.net/cungudafa/article/details/106278206</a></p><h3 id="16-修改滑动条"><a href="#16-修改滑动条" class="headerlink" title="16.修改滑动条"></a>16.修改滑动条</h3><p><a href="https://blog.csdn.net/cungudafa/article/details/106278206">https://blog.csdn.net/cungudafa/article/details/106278206</a></p><h3 id="17-访问优化"><a href="#17-访问优化" class="headerlink" title="17.访问优化"></a>17.访问优化</h3><p><a href="https://blog.sky03.cn/posts/42790.html#toc-heading-5">https://blog.sky03.cn/posts/42790.html#toc-heading-5</a></p><p><a href="https://blog.sky03.cn/posts/1663.html">https://blog.sky03.cn/posts/1663.html</a></p><h3 id="18-文章详情卡片透明度"><a href="#18-文章详情卡片透明度" class="headerlink" title="18.文章详情卡片透明度"></a>18.文章详情卡片透明度</h3><pre class="line-numbers language-dir" data-language="dir"><code class="language-dir">hexo\themes\hexo-theme-matery-master\source\css\matery.css<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>修改两个透明度：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">#artDetail .card</span> <span class="token punctuation">{</span>    <span class="token property">box-shadow</span><span class="token punctuation">:</span> 0 10px 35px 2px <span class="token function">rgba</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> .15<span class="token punctuation">)</span><span class="token punctuation">,</span>        0 5px 15px <span class="token function">rgba</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> .07<span class="token punctuation">)</span><span class="token punctuation">,</span>        0 2px 5px -5px <span class="token function">rgba</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> .1<span class="token punctuation">)</span> <span class="token important">!important</span><span class="token punctuation">;</span>    <span class="token property">opacity</span><span class="token punctuation">:</span> 0.85<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">#artDetail .article-card-content</span> <span class="token punctuation">{</span>    <span class="token property">padding</span><span class="token punctuation">:</span> 0 15px 20px 18px<span class="token punctuation">;</span>    <span class="token property">opacity</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="19-文章短链接"><a href="#19-文章短链接" class="headerlink" title="19.文章短链接"></a>19.文章短链接</h3><p><a href="https://github.com/rozbo/hexo-abbrlink">https://github.com/rozbo/hexo-abbrlink</a></p><h3 id="20-WebStackPage导航"><a href="#20-WebStackPage导航" class="headerlink" title="20.WebStackPage导航"></a>20.WebStackPage导航</h3><p><a href="https://zhangxiaocai.cn/posts/38b34c3c.html">https://zhangxiaocai.cn/posts/38b34c3c.html</a></p><p>(html和静态资源是偷来的,希望他不会生气)</p><h3 id="21-全屏浏览按钮"><a href="#21-全屏浏览按钮" class="headerlink" title="21.全屏浏览按钮"></a>21.全屏浏览按钮</h3><p>也是从楼上那位大佬处偷来的~</p><p>①把下面文件放在js目录下：</p><pre class="line-numbers language-url" data-language="url"><code class="language-url">/img/fullscreen.js<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>②在文件：</p><pre class="line-numbers language-dir" data-language="dir"><code class="language-dir">hexo\themes\hexo-theme-matery-master\layout\_partial\navigation.ejs<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>添加代码(一般加在搜索栏右边美观点吧)：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fullscreen_li<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fullscreen<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>javascript:void(0);<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>modal-trigger waves-effect waves-light<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fullscreen<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fas fa-expand-arrows-alt<span class="token punctuation">"</span></span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>全屏<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">zoom</span><span class="token punctuation">:</span> 0.65<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>③在文件：</p><pre class="line-numbers language-dir" data-language="dir"><code class="language-dir">hexo\themes\hexo-theme-matery-master\layout\layout.ejs<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>添加代码：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!--全屏--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/js/fullscreen.js<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>module<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="22-TOC目录样式美化"><a href="#22-TOC目录样式美化" class="headerlink" title="22.TOC目录样式美化"></a>22.TOC目录样式美化</h3><pre class="line-numbers language-dir" data-language="dir"><code class="language-dir">hexo\themes\hexo-theme-matery-master\layout\_partial\post-detail-toc.ejs<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>修改：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.toc-widget</span> <span class="token punctuation">{</span>        <span class="token property">width</span><span class="token punctuation">:</span> 345px<span class="token punctuation">;</span>        <span class="token property">padding-left</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>        <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">rgb</span><span class="token punctuation">(</span>255<span class="token punctuation">,</span> 255<span class="token punctuation">,</span> 255<span class="token punctuation">,</span>0.7<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token property">border-radius</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>        <span class="token property">box-shadow</span><span class="token punctuation">:</span> 0 10px 35px 2px <span class="token function">rgba</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> .15<span class="token punctuation">)</span><span class="token punctuation">,</span> 0 5px 15px <span class="token function">rgba</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> .07<span class="token punctuation">)</span><span class="token punctuation">,</span> 0 2px 5px -5px <span class="token function">rgba</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> .1<span class="token punctuation">)</span> <span class="token important">!important</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="23-图片懒加载"><a href="#23-图片懒加载" class="headerlink" title="23.图片懒加载"></a>23.图片懒加载</h2><p>参考链接：<a href="https://blog.sky03.cn/posts/42790.html#toc-heading-10">https://blog.sky03.cn/posts/42790.html#toc-heading-10</a></p><p>其中提前开始加载的修改要在第11行而不是第九行，总之就是：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">elementInViewport</span><span class="token punctuation">(</span><span class="token parameter">el</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> rect <span class="token operator">=</span> el<span class="token punctuation">.</span><span class="token function">getBoundingClientRect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>        rect<span class="token punctuation">.</span>bottom <span class="token operator">&gt;=</span> <span class="token number">0</span>        <span class="token operator">&amp;&amp;</span> rect<span class="token punctuation">.</span>left <span class="token operator">&gt;=</span> <span class="token number">0</span>        <span class="token operator">&amp;&amp;</span> rect<span class="token punctuation">.</span>top <span class="token operator">&lt;=</span> <span class="token punctuation">(</span>window<span class="token punctuation">.</span>innerHeight <span class="token operator">+</span> <span class="token number">240</span> <span class="token operator">||</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>clientHeight <span class="token operator">+</span> <span class="token number">240</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二、常用命令-star-star"><a href="#二、常用命令-star-star" class="headerlink" title="二、常用命令:star::star:"></a>二、常用命令<span class="github-emoji"><span>⭐</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2b50.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span><span class="github-emoji"><span>⭐</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2b50.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></h2><h3 id="1-Create-a-new-post"><a href="#1-Create-a-new-post" class="headerlink" title="1.Create a new post"></a>1.Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token operator">&lt;</span>POST_NAME<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="2-Run-server"><a href="#2-Run-server" class="headerlink" title="2.Run server"></a>2.Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server//or$ hexo s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="3-Generate-static-files"><a href="#3-Generate-static-files" class="headerlink" title="3.Generate static files"></a>3.Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate//or$ hexo g<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="4-Deploy-to-remote-sites"><a href="#4-Deploy-to-remote-sites" class="headerlink" title="4.Deploy to remote sites"></a>4.Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy//or$ hexo d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="5-Deploy-on-gitee"><a href="#5-Deploy-on-gitee" class="headerlink" title="5.Deploy on gitee"></a>5.Deploy on gitee</h3><p><a href="https://gitee.com/GAATTC/gaattc/pages">https://gitee.com/GAATTC/gaattc/pages</a><img src="/img/image-20201116155556274.png" alt="image-20201116155556274" style="zoom: 67%;"></p><h3 id="6-Visit-site"><a href="#6-Visit-site" class="headerlink" title="6.Visit site"></a>6.Visit site</h3><pre class="line-numbers language-none"><code class="language-none">//browser:gaattc.life<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="三、POST-star-star"><a href="#三、POST-star-star" class="headerlink" title="三、POST:star::star:"></a>三、POST<span class="github-emoji"><span>⭐</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2b50.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span><span class="github-emoji"><span>⭐</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2b50.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></h2><h3 id="1-新建post"><a href="#1-新建post" class="headerlink" title="1.新建post"></a>1.新建post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token operator">&lt;</span>POST_NAME<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-编辑post"><a href="#2-编辑post" class="headerlink" title="2.编辑post"></a>2.编辑post</h3><p><strong>①路径：</strong></p><pre class="line-numbers language-none"><code class="language-none">%HEXO_ROOT%/source/_posts<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>②或新建文章自动打开本地 Markdown 编辑器(recommend)：</strong><span class="github-emoji"><span>⭐</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2b50.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p><p>在站点根目录下新建 <code>scripts</code> 目录，然后在新建 <code>auto_open.js</code>，在文件填入一下内容：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> spawn <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'child_process'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>exec<span class="token punctuation">;</span>hexo<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'new'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">spawn</span><span class="token punctuation">(</span><span class="token string">'start  "D:\Program Files\Typora\Typora.exe" '</span> <span class="token operator">+</span> data<span class="token punctuation">.</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>其中 <code>"D:\Program Files\Typorae\Typora.exe"</code> 是本地编辑器的路径示例。</p><h3 id="3-Front-matter"><a href="#3-Front-matter" class="headerlink" title="3.Front-matter"></a>3.Front-matter</h3><p>格式：</p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml">title: HelloHexodate: 2020-11-16 11:32:56updated: 2020-11-17 21:24:15top: falsecategories:- 学习- hexotags:- 学习心得- hexoimg: /img/yaoshuixiedaima.jpg<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-图床-PicGo"><a href="#4-图床-PicGo" class="headerlink" title="4.图床(PicGo)"></a>4.图床(PicGo)</h3><p><a href="https://github.com/GAATTC0/MyPicGoOSS">https://github.com/GAATTC0/MyPicGoOSS</a></p><p><left><img src="/img/image-20201119093006186.png" alt="image-20201119093006186" style="zoom: 50%;"></left></p><blockquote><p>插入图片会默认居中，在图片前添加<code>&lt;left&gt;</code>标签即可左对齐</p></blockquote><h3 id="5-保存更新部署"><a href="#5-保存更新部署" class="headerlink" title="5.保存更新部署"></a>5.保存更新部署</h3><p>完成一篇大作~</p><p>——————————————————————–到底啦—————————————————————————–</p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习心得 </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
